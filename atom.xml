<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xnth97.github.io/</id>
    <title>NOWHERE Blog</title>
    <updated>2025-01-16T22:51:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xnth97.github.io/"/>
    <subtitle>NOWHERE Blog</subtitle>
    <icon>https://xnth97.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[2024 年终盘点]]></title>
        <id>https://xnth97.github.io/2025/01/16/annual</id>
        <link href="https://xnth97.github.io/2025/01/16/annual"/>
        <updated>2025-01-16T22:51:00.000Z</updated>
        <summary type="html"><![CDATA[又是一年糊里糊涂地过完了。感觉 2024 年过得尤其的快，少了很多去年的闲情雅致和声色犬马，更像是被推着一般摧枯拉朽地结束了。花点时间回想回想，盘点一下。]]></summary>
        <content type="html"><![CDATA[<p>又是一年糊里糊涂地过完了。感觉 2024 年过得尤其的快，少了很多去年的闲情雅致和声色犬马，更像是被推着一般摧枯拉朽地结束了。花点时间回想回想，盘点一下。</p>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="影视">影视<a href="https://xnth97.github.io/2025/01/16/annual#%E5%BD%B1%E8%A7%86" class="hash-link" aria-label="影视的直接链接" title="影视的直接链接">​</a></h2>
<p>好像是非常剧荒的一年，去年几乎所有真人的剧集和电影都让我提不起兴趣。《侍者》有几幕倒是印象深刻，也算拍出大场景，整体观感很一般，《骨干小队》则是彻底故事乱七八糟，主角毫无弧光。《百年孤独》名著改编却也如原著一样早早把我劝退了。《鱿鱼游戏 2》仿佛是铺垫整整一季就为了下一季一样，而且很多套路化的叙事在第一季珠玉在前也很平庸。《龙之家族 2》也有类似感觉，推着赶着就为了下一季血战，对看过原著的我可能尤为明显。《辐射》客观讲算是挺好看的，不过我个人对这个 IP 没什么感情有些难以沉浸。《我推的孩子》则是客观上我知道它一般，但你给我看斋藤飞鸟我就给你钱，阿夸和露比的演员也挺有化学反应还是蛮还原的。《沙丘 2》特效场面也太大了，然而（没读过不知道有没有冒犯原著）电影叙事有点男频爽文起手的走向。《毒液：最后一舞》不温不火，《异形：夺命舰》中规中矩。</p>
<p>另一方面，今年动画的剧集电影大部分都还蛮对我胃口的。《变形金刚：起源》讲了一个经典兄弟反目的故事却能把机械拍的有血有肉。《荒野机器人》也是披着科幻（或奇幻？）外衣探讨家庭关系，中间鸟崽子离家剧情拍得很有张力。《Flow》中文译作《猫猫的奇幻漂流》，谁不喜欢猫猫呢？画风我很喜欢，全片没有一句台词，完全靠细致描绘和音效来推动故事，虽然是一幕幕连续的遇到危机 -&gt; 解除危机循环却很生动。《鬼灭之刃柱训练篇》也是我看了原著本以为会很无聊，但动画化也确实制作精良。结尾一出“产屋敷计取鬼舞辻”开启无限城决战是全季高潮，虽然很多是原著的分镜，配上流畅画风和激燃配乐还是很不错的。</p>
<p>《双城之战 2》是当之无愧的今年全场最佳，甚至我认为也成功脱离了“第二季不如第一季”的诅咒而上了一个新台阶。不管是一贯优秀独特的画风和音乐，还是人物的成长弧光的转变，还是随着故事的深入矛盾愈发深刻，以及世界观的展开和伏笔的层层揭示，都让第二季在十分出色的第一季基础上青出于蓝。第二季延续了第一季每三集一播的模式，所以让我有种其实是每周看了一部电影、总共是个三部曲的感觉。我个人尤为喜欢的是四到六集，大量的多线叙事却层层串联，一幕幕群像却个性鲜明动机合理。但在激烈矛盾的多条主线之外，我尤其喜欢金克丝和伊莎的关系刻画。虽然金克丝是个疯批（？），但作为（在她视角）被姐姐伤过的妹妹，这次在努力扮演那个保护妹妹的姐姐角色，她能从伊莎身上看到爆爆的影子，进而理解蔚并与过去和解（虽说包饺子的节奏是有点仓促）。伊莎的悲剧结尾是毋庸置疑的情感高潮，配合陈奕迅的《这样很好 / Isha's Song》，这一幕实在劲儿太大了。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/arcane2-3cf1edbe127db124042195638bc27324.jpg" width="4320" height="1822" class="img_ev3q"></p>
<blockquote>
<p>拨开山岭 让她看看我</p>
<p>告诉繁星 快些照亮我</p>
<p>吹散乌云 用一抹蓝色</p>
<p>那就算 世界满是荒芜我们</p>
<p>抬头就能 看见月亮</p>
</blockquote>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/%E8%BF%99%E6%A0%B7%E5%BE%88%E5%A5%BD-ishas-song-from-the-series-arcane-league-of-legends/1767031657?i=1767031957"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="音乐">音乐<a href="https://xnth97.github.io/2025/01/16/annual#%E9%9F%B3%E4%B9%90" class="hash-link" aria-label="音乐的直接链接" title="音乐的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="专辑">专辑<a href="https://xnth97.github.io/2025/01/16/annual#%E4%B8%93%E8%BE%91" class="hash-link" aria-label="专辑的直接链接" title="专辑的直接链接">​</a></h3>
<p>音乐品味随着年龄增长不可避免地倒向了 kpop 甜妹。以前觉得音乐要前卫要表达要不落窠臼，现在觉得大哥你玩摇滚你玩它有啥用啊，旋律抓耳 MV 好看就得了。今年我喜欢的艺人们纷纷推出了不错的作品，让我还是有种股东自豪感的。XG 出道时我作为早期艾回粉丝听了一下没上头，但后面《Left Right》还是挺喜欢的，当时 HOPICO 讲的 <a href="https://www.bilibili.com/video/BV1KM4y1z7UH/" target="_blank" rel="noopener noreferrer">XG 到底做对了什么？日本女团又行了</a>深得我心。去年 B 站跨晚请来才第一次看表演，嚯！活蹦乱跳（？）的真不错嘿，垂直入坑。这一年我们小叉姬发的还挺多，《Something Ain't Right》《IYKYK》都是有些跳脱的 Y2K 风格，《HOWLING》外星小狼 R&amp;B 狼嚎副歌太抓耳了。最爱是《WOKE UP》，teen rap 炉火纯青实力过硬，编曲有些 drill 风格（？），整个团队 flow 丝滑听感太舒服了。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/woke-up/1742262122?i=1742262123"></iframe>
<br>
<br>
<p>我娃的专辑《2》除了（数字版）封面辣眼睛也没什么问题，好在 EP《I Sway》封面和内页拍的都很美丽，实体专辑收集者狂喜。歌曲我都很喜欢，粉丝滤镜嘛。《Fate》是尤其喜欢的，万万没想到韩国人能写出这么 2009 年 JPOP 风格的旋律，歌词写的也仿佛日本动画 EP 分镜一般，听着歌眼前都脑补出画面滚动 staff 字幕了。比较惊喜的是宋雨琦的专辑《YUQ1》，最早以为这小姑娘就是上跑男的综艺咖，这两年发现除了搞笑其实唱跳业务水平也可以的，甚至自作曲也从稚嫩慢慢成熟到“诶还可以！”。去年演唱会的《Could It Be》就一耳朵吸引人，让我很期待这第一张专辑，不过没想到第一张就是量大管饱的七首歌各有特色，主打歌《FREAK》带点千禧年初的流行舞曲风格，很搭她独特的低音音色。后面看到有博主介绍这张专辑混音制作团队和《Left Right》是一个，大概能解释我严重的耳虫了。我也很喜欢《FREAK》里的表达，从 <em>she's a certified freak</em> 到 <em>little did I know she's really me</em> 到 <em>I'm a certified freak</em>，虽是有些熟悉的递进套路却又充满年轻的力量。《FREAK》的<a href="https://www.youtube.com/watch?v=bRrinM4uwYg" target="_blank" rel="noopener noreferrer">打歌舞台</a>也挺好，红发妆造和专辑里红兔子概念也太搭了。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" style="width:100%;max-width:660px;overflow:hidden;aspect-ratio:1.7777777777777777;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/music-video/freak/1742697364"></iframe>
<br>
<br>
<p>华语歌曲今年感觉被 OST 碾压了。拳头音乐和陈奕迅的《这样很好》上面提过了，万万没想到黑猴子老板自己写词的 OST 竟然如此带感，以至我反复听了好多遍游戏音乐精选集。网上吹爆的那几首《黄风起兮》、《屁》和《未竟》都挺好，我个人更喜欢《勿听》张紫宁细腻的唱腔和《不由己》陈彼得苍老略带嘶哑的演绎。词作是真的强，不知道冯老板一个做游戏的生物专业是哪来的文曲星点化，比内娱九漏鱼作词家不知道高到哪里去了。单就《勿听》里一个江流轻舟的意象，三对比喻 <em>汹涌如江流/忐忑似轻舟</em>、<em>喧闹如江流/宁静似轻舟</em>、<em>缥缈似轻舟/寂寥如江流</em> ，一下子整个爱情故事脉络都出来了，这遣词造句水平能让我琢磨一年。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/listen-not/1765255251?i=1765255276"></iframe>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="演出">演出<a href="https://xnth97.github.io/2025/01/16/annual#%E6%BC%94%E5%87%BA" class="hash-link" aria-label="演出的直接链接" title="演出的直接链接">​</a></h3>
<p>年初在伦敦看了《歌剧魅影》，以前只在音乐课电视上心不在焉看过的经典作品，在真正的剧院里现场演绎还是很震撼的，演员精湛的表演高超的唱功和现场交响乐队的演奏，还是很值得一去附庸风雅。后面艾薇儿来家门口几英里的地方巡演，为了给青春期补个票就去了。姐一张嘴还是年轻那味，虽然少了一些 20 年前的清亮，但现在音色更配摇滚。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>9 月又去看娃啦！从第一次世巡开始看娃已经成了年年必备项目，非常开心。这次《IDOL World Tour》买了 VIP package，因为是内场 GA 排队了一下午挤一个前面的位置，还有额外看 sound check 的机会。可能因为 sound check 观众人少，目测也就 200 个左右疯狂粉丝，我们娃的饭撒给的非常勤快。今年本来因为《FREAK》就很好感宋雨琦，一下子又被 YUQI 眯着小狗眼比了个心，这下坑底躺平了。内场也真的非常近，简直是贴脸跳舞的程度，我全程老父亲慈爱笑容。舞台设计也挺用心的，虽然之前也被剧透过其他场的舞美，但我们娃还是尽量每场搞点不一样的花活（？），比如娟总的百变造型和小品女团突如其来的随地大小演。这次舞台是一个 T 形，所以有些在中间小舞台的表演我们内场这里视线是很不好的，但很多时候基本上娃都会有一两个人对着内场这边，她们太细了，开麦也是一如既往的稳。唱完 Fate 看到台上聚光灯打下来照着五个小娃娃的背影，揪着两根飘扬的彩带，面前是比第一次世巡多了近 10 倍观众疯狂的欢呼，真是太欣慰了。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/gidle5-3029ea1fedc94e5d3fdf88d0782d50ba.jpeg" width="2500" height="1875" class="img_ev3q"></p>
<p>10 月去看了小叉姬，七小狼蹦蹦跳跳的太快乐了。XG 是那种我知道她们实力很强本来去就有很高预期，有些没想到的是高预期甚至还能被超出一些。全开麦稳定的现场，卡点而整齐的舞蹈，呈现了一场很高水平的表演。我之前刷到有黑粉嘲讽说 XG 的音乐和编舞都是为了那些卡点节奏设计的，但我不得不赞同这位黑子，因为现场这种节奏和卡点的契合看起来听起来实在是太爽了。Solo 也都很棒，本来我个人更偏心 Rap 担的几位的，她们 solo / 小分队环节也展示了一段十分带感的 cypher。然而 Vocal 担的几位 solo 表现真的很惊艳，我尤其被 Juria 圈粉，声压好强真的完全压制住了全场。真正女团学，虽然各自都有很强实力，在团队中还是懂得藏锋配合，瑞思拜。除此之外小叉姬可能还是年纪太小了，talk 环节还是有点青涩的，远没有我们老娃娃（？）出道七年插科打诨游刃有余。但最后蹦蹦跳跳的一个 JPOP 经典打气，我的天呐，这可太青春了。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="游戏">游戏<a href="https://xnth97.github.io/2025/01/16/annual#%E6%B8%B8%E6%88%8F" class="hash-link" aria-label="游戏的直接链接" title="游戏的直接链接">​</a></h2>
<p>继续沉迷电子游戏。年初玩了《P3R》，彻底重制后比当年《P3P》玩起来舒服太多了，不过整个故事线没有 P4 精彩，人物塑造没有 P5 讨喜，最后还搞了个主角 BE。《星战幸存者》手感挺不错，无法拒绝能嗡嗡挥动光剑的游戏，但同伴大哥一出场就长着一张要叛变的脸。《相声模拟器》倒是个颇有意思的小品，AI 语音不说是谁也能听出来，靠着在天津上过学磨练出的奇怪语感也能玩得下去。《潜水员戴夫》十分适合 Steam Deck，抓鱼捏寿司时间大杀器。《印第安纳琼斯》镜头和配乐太 cinematic 了原汁原味，解谜还算有趣但动作部分节奏慢很难受。《超级马里奥：惊奇》还是横版跳跃标杆，创意层出不穷。今年买了 Quest 3S 玩上了《半衰期：Alyx》，万物可交互带来的沉浸感真是独一份的，只可惜这么多年了 VR 标杆还是它。我也玩了 TGA 颁给的最佳 VR 游戏《蝙蝠侠：阿卡姆之影》，对比 Alyx 实在是令人失望。《小丑牌》我玩的是 Apple Arcade 版本，牌局多变十分上瘾，随时随地来一盘配合 iCloud 同步真的欲罢不能。我最喜欢的非 3A 游戏今年非《杀死公主》莫属。这是一部挺难描述的气质独特的视觉小说，大量反套路的设定、出人意料的情节展开、时而诙谐无厘头时而深刻而沉重的探讨，让我不断 S/L 不断多周目循环。游戏海量的文本和分支、不算精美却独特的插画、以及剪辑版更新的大量内容包括中文语言都体现出这个小工作室的满满诚意，非常值得深入体验。</p>
<p>年度游戏《Astrobot》我其实挺喜欢的，从 PS4 摄像头带的那个游戏开始我就很喜欢 Team Asobi 的关卡场景设计和独一份的软硬件结合、对控制器新特性的适配真的是第一方标杆，因此我一直希望他们除了两个 demo 性质的小游戏做一个完整的出来。《Astrobot》完美地将 Team Asobi 的优势扩大到一份全价 3A 游戏的体量，给出了精彩的平台跳跃设计、情怀满满的电影感演出、天马行空的游戏创意。里面有很多设计和创意，在我还未完全琢磨透玩法的时候已经换了下一个，这个创意就奢侈地再也没有出现过，让我都觉得这代码写得太浪费了。和索尼其他 IP 的联动味道很正，地平线埃洛伊的弓箭、战神奎爷的斧头，不知道 Team Asobi 怎么做到在他们的引擎里却还原出极为接近的不同手感的。最后 30 年来的 PlayStation 集结进攻绿色（Xbox: 6）邪恶外星人，结尾字幕俏皮地成为可以随意破坏的关卡，这部游戏确实是献给 PlayStation 玩家的情书，获得年度游戏我认为实至名归。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/astrobot-24b1bcb3c406d314476f5613a6914d63.jpg" width="2560" height="1440" class="img_ev3q"></p>
<p>但论 2024 年，私心里倒是有另一个更为值得年度游戏的作品，《黑神话：悟空》无须多言。从游科发布第一个预告片起就关注，暗自怀疑又暗自期待真的能做出国产第一 3A 动作，在熟悉的文化背景里冒险。随着一个个预告片、实机演示发布，对黑猴的期望从“能做出来不骗钱就行”一点点拔高到“卧槽这次好像真成了”。解禁那天迫不及待回到家接上 5K 屏幕猿神启动，UE5 加持下美轮美奂的画面，十足的东方氛围。BGM 锣鼓铙钹一响，梦回暑假打开电视看西游记。动画打磨非常细致，演出和打斗均是顶级水准。最惊喜的是 boss 战，虽说有些 boss rush，但量大管饱各有特色没有换皮怪，动作设计也很考究，让你愿意琢磨节奏反复试炼拼死拼活受苦，但受完苦看到大大的“得胜”真的很爽。另外里面怪物的人物小传写得太好看了，每天打完都专门去读一读看得津津有味的。当然作为游戏也有很多缺点，像是欠调教的操作，极难按出来的 LT + RT，欠缺引导的地图，过多的空气墙等，但瑕不掩瑜。另一方面，叙事实在太犯规了，这是一个我们再也熟悉不过的故事，而游科又极擅长遮遮掩掩隐约其辞，让故事虽然主体是还是奥德赛式的“英雄踏上冒险”，但多了很多东方的含蓄隽永意味，像是整个第四章《曲度紫鸳》就是一个表面含蓄却后劲很大的故事。最后，大圣残躯，我很难想象还能设计出比这更棒的 boss 了，这是一种近乎天然的文化亲近，而游科也用水平极高的 boss 设计没有辜负玩家的极高期待。《黑神话》是一次如爽剧网文一般的梦幻开局，十分期待有了第一次 3A 的经验后游戏科学未来能打磨出怎样的作品。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/blackmyth-e88f13c96567e3febcb64719a3c35fbb.jpg" width="2560" height="1440" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="旅行">旅行<a href="https://xnth97.github.io/2025/01/16/annual#%E6%97%85%E8%A1%8C" class="hash-link" aria-label="旅行的直接链接" title="旅行的直接链接">​</a></h2>
<p>倒没有去很多地方，除了<a href="https://xnth97.github.io/2024/04/08/scotland">苏格兰</a>和<a href="https://xnth97.github.io/2024/12/01/puerto-rico">波多黎各</a>，值得一提的可能就是去了波士顿。一直挺想看看 MIT 和哈佛大学的，上这辈子是上不了，看看总行吧。MIT 有不少现代高大的教学楼，而哈佛明显更为古朴雅致。很喜欢在大学里漫步，身旁都是智商很高的人匆匆行走，好像也能变聪明一点（要长脑子了.gif）。波士顿 downtown 很有美国历史文化名城风格，有很多历史名胜古迹，一路沿着 freedom trail 走马观花基本都可以看到。深秋的东部有很多橙黄或鲜红的树木植被，草坪上有肥硕的松鼠到处溜达，景色和湾区还是很不一样的，这种微妙的熟悉感也让我不禁有点怀念在东部上学的时候。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>万圣节跟朋友去了 LA 环球影城的 Horror Night，第一次去还是蛮好玩的！整个园区被改造成了一个巨大的鬼屋，不时有手持电锯的 NPC 试图吓唬人群中看起来最胆小的人。白天的游乐项目也都变成了鬼屋，有环球经典 IP 和极高制作质量加持，鬼屋里场景、声光电特效还是很唬人的，算是深度体验。鬼屋里的 NPC 表演信念感很强，但也很有分寸不会真的很吓到你。我最喜欢的是 Terror Tram 后面一个露天的大场景，逼真的道具和烟雾恐怖氛围十足，大量精心装扮的 NPC 随机吓唬人也很有趣。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="剁手">剁手<a href="https://xnth97.github.io/2025/01/16/annual#%E5%89%81%E6%89%8B" class="hash-link" aria-label="剁手的直接链接" title="剁手的直接链接">​</a></h2>
<p>今年剁手比较克制，集中于几十几百块钱的小玩意，像是 DJI Action Pro 5、M4 Mac Mini、46mm Natural Milanese Loop、Studio Display、Jellycat 圣诞树之类。Action 比我想象的好用，现在已经到了画质和稳定性都很不错的程度了，尤其浮潜拍摄体验非常好，不过暗光环境下画质还是断崖式劣化，涂抹感和噪点都很严重。不过为了避免吃灰有个好处是可以直接 USB-C 连电脑当摄像头用，多了不常旅拍但又能花钱的理由。</p>
<p>今年最大笔的花费是 <strong>一条狗</strong>！狗子一个半月大的时候抱回家，一年过去已俨然长成一个混世魔王。狗精力十分充沛无穷无尽，破坏的东西从充电线到 Apple Pencil 数不胜数，四个月大的时候还摔断了腿，动了三次手术。但狗的心思又都写在脸上，一门心思想跟你出去玩，随时随地躺地上肚皮一翻。狗也有好朋狗，狗刚到家没两天朋友家的狗就来看它，好奇又小心地和它玩了一晚上，之后就成了好朋狗。随着狗长大两条狗体型差距逐渐减少到反超，打架玩耍也愈加凶猛激烈。有次好朋狗寄宿在家里，明明摆了两张狗床，狗和好朋狗还是挤在一个小床上，整夜每十几分钟就要互相啃啃打打，乐此不疲。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<blockquote>
<p>狗（左一）和好朋狗在好莱坞山</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="https://xnth97.github.io/2025/01/16/annual#%E5%85%B6%E4%BB%96" class="hash-link" aria-label="其他的直接链接" title="其他的直接链接">​</a></h2>
<p>年初毅然跟前老板去 toxic 大厂卷，计划跟着前老板当个虚线 leader 带带小弟，可惜经过毒打发现对类似 M track 还是缺乏能力和热情。虽然小弟小妹们都挺好很积极，老板也照顾我这个亲信，但还是在一次次赛博养蛊明争暗斗腾笼换鸟之后心力交瘁，不出半年老板和我双双跑路了。这次操作让我重新审视原以为是湾区常规爬梯子 IC -&gt; Leader -&gt; M 的路，不知道是否是能力或性格使然，也许当下并不适合我。</p>
<p>还好后面回归纯 IC 少了这些 politics。以前老罗说“工匠精神”我深以为然，幸运组和老板都很 supportive 能够让我自己 own 并交付，加之做的东西更为底层，偶尔能有时间进入心流状态潜心打磨。我觉得相较管理吹逼我还是更享受造物的过程。</p>
<p>前半年精神和身体的状态都不太好，后半年随着常态化去健身房加 HIIT 课明显身体各项 metrics 好了很多。最近又有些懈怠了，希望今年能照顾好自己和家人。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[在加勒比海过冬：波多黎各游记]]></title>
        <id>https://xnth97.github.io/2024/12/01/puerto-rico</id>
        <link href="https://xnth97.github.io/2024/12/01/puerto-rico"/>
        <updated>2024-12-01T22:25:00.000Z</updated>
        <summary type="html"><![CDATA[冬天到了，牛马也终于放假了。感恩节假期我们飞去了波多黎各，几个位于中美洲加勒比海上的小岛。波多黎各是美属非建制领地，所以航班也都走 domestic 而没有出入境，是一个 visa slave 狂喜的旅行目的地。11 月末的加勒比海，近 30 摄氏度的气温一扫湾区的湿冷，让旅行也惬意了几分。波多黎各由主岛和周围一些小岛组成，而除主岛外仅有 Vieques 岛和 Culebra 岛有人居住，这次便也都去游览一番。]]></summary>
        <content type="html"><![CDATA[<p>冬天到了，牛马也终于放假了。感恩节假期我们飞去了波多黎各，几个位于中美洲加勒比海上的小岛。波多黎各是美属非建制领地，所以航班也都走 domestic 而没有出入境，是一个 visa slave 狂喜的旅行目的地。11 月末的加勒比海，近 30 摄氏度的气温一扫湾区的湿冷，让旅行也惬意了几分。波多黎各由主岛和周围一些小岛组成，而除主岛外仅有 Vieques 岛和 Culebra 岛有人居住，这次便也都去游览一番。</p>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="vieques">Vieques<a href="https://xnth97.github.io/2024/12/01/puerto-rico#vieques" class="hash-link" aria-label="Vieques的直接链接" title="Vieques的直接链接">​</a></h2>
<p>落地 SJU 机场后浅睡几个小时，便乘轮渡前往 Vieques 岛。轮渡在主岛 Ceiba 码头和 V 岛之间往返，似乎也是当地人主要的交通手段。轮渡价格非常良心，往返 $4 加行李 $1，座位并不拥挤也有空调，单程 45 分钟左右。还有一种在游客间更受欢迎的交通方式是坐小飞机，好像只要 15 分钟景色也非常好，不过我实在是无法克服恐惧。</p>
<p>之前听朋友说，V 岛是一个“像我乡下姥姥家一样荒的地方”，确实如此，狭窄的街道、低矮的建筑、满地的溜达鸡都显示出这里经济上的不发达。打车没有 Uber / Lyft，全靠存出租车司机电话预约。整个小岛似乎也不大，仅花 15 分钟我们就从北端的码头来到了南端的酒店。这次酒店预订的是 El Blok，并没有什么理由，单纯是因为预约的 tour 集合地点在这个酒店对面，不过来了之后发现可能是设施最好的酒店了。室内室外都有大量混凝土的现代风格，房间内设施也算齐全、布置温馨。酒店隔一条马路对面就是沙滩，房间也能称得上海景。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>旅途劳顿，我们选择直接在酒店旁边靠海的小餐厅吃饭。点了当地著名的鸡尾酒 Pina Colada，大概是 rum 混上椰浆和菠萝汁，带有很多冰沙，清凉甜美。点了当地小吃似乎是炸的鱼饼，还有烤猪里脊配黄米饭。不知道是不是小岛民风淳朴农产品天然有机，烤猪里脊香嫩无比，简单海盐调味却满口爆汁，真的有农村土猪的味道。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>吃完饭在旁边沙滩散步，沙滩边很多椰子树/木瓜树，大颗的成熟椰子/木瓜散落在沙滩各处，不知道当地人会不会直接拿去吃。沙滩上还有很多小螃蟹爬来爬去，甚至还看到两只在打架。大概是因为周五晚上，沙滩有很多当地家庭拖家带口，带着 cooler 喝着冰啤酒大声地放着音乐，孩子在浅滩里三三两两追逐嬉戏，岛民生活实在惬意。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/7-44e225c212780d79f2507aabde624f57.jpeg" width="3000" height="1238" class="img_ev3q"></p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>晚上就是期待已久的荧光海 tour，导游开着特别破的淘汰校车来接，经过 6 分钟我人生中最颠的路（而且不时有树枝从车窗伸进来划到我），我们到了一片散发着恶臭的烂泥坑边。导游解释说这是因为两边都是芒果树，烂芒果掉下来发酵变成的泥，我们不得不忍着恶臭脱鞋踩过去，味道温度和触感都和踩在一泡屎里没什么区别。好在走过屎坑就是 Mosquito Bay 下水的地方，船是透明塑料的 kayak，一到水上就能透过船底看到星星点点的荧光。随着每次划浆，海水被搅动的地方荧光就格外明亮。更有趣的是偶尔有小鱼跃出水面甚至撞在船上，就会产生一道十分明显的亮光。可惜夜间太暗什么也拍不下来，只能用眼睛记住这奇观。整个 tour 一个多小时，到后面我感觉这就是个 outdoor rowing 体能训练。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>夜间回到住处，随便点了杯酒、一份汤和烤鱼，口感有些柴。早上起床，去附近唯一一家开门的早餐店，店里赫然写着“Today's Menu: Eat It or Starve”，不过友善的老板还是给了我几个选择。点了份 coconut coffee 和 cinnamon pancake，咖啡是用廉价的破塑料杯盛着漂着谜之泡沫的液体，看起来<em>干净又卫生</em>，不过喝起来意外地味道还不错。吃完早饭便打车去码头，坐船回主岛了。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="culebra">Culebra<a href="https://xnth97.github.io/2024/12/01/puerto-rico#culebra" class="hash-link" aria-label="Culebra的直接链接" title="Culebra的直接链接">​</a></h2>
<p>在 Culebra，我们报了一个很受欢迎的浮潜 tour，导游开船带着去 C 岛两个点，据介绍是无人的自然保护区。我们早上从主岛东北部一个码头出发乘上导游的船，船不大却也能容纳 30 人，其中还有两个游客是潜水的大哥，带着氧气罐和各种高级装备。船上准备了免费的零食水果和冰汽水，大概开了 1h45min 的船才到了第一个浮潜点。一路上非常颠簸风浪很大，一阵雨一阵晴的，到了地方倒是风平浪静。导游大概讲了一下活动区域，我们就穿戴好装备下水了。之前在恐龙湾也浮潜过，但感觉加勒比海里珊瑚好像更大，珊瑚礁里的小生物也更多更活跃。水中漂浮着大大小小的水母，珊瑚丛中游着颜色体型各异的鱼虾。我使用 DJI Action 5 Pro 拍摄了很多视频，但想拍照片时发现这个官方的 extension rod kit 并不带拍照按键，需要以一个诡异的姿势去够机身上的按键，只能匆匆拍几张全分辨率的 40MP 照片。这个点位水比较浅，导游也特意嘱咐不要踩到珊瑚破坏生态。在水里扑腾了一个小时左右我便游到沙滩上躺着了，阳光下的加勒比海确实有些展现出所谓“果冻色”的质感。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/14-143d60d41cef32cdc9251e6ca3290aa5.jpg" width="2200" height="1241" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/15-d394cab96671bad17a809969d9453c6c.jpg" width="2200" height="1241" class="img_ev3q"></p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>回到船上，工作人员准备了简单的午饭，吃完后开船去下一个点位。下一个点相对更深，水深有约 40 - 50ft，需要往岸边游才能看到珊瑚。导游介绍说这边的珊瑚是像一堵墙一样沿着海岸线生长的，所以是从深水往浅水游去看。下水后能见度果然差了很多，绿糊糊一片什么也看不到，只能一直往岸边游，而且感觉到好几股温暖或冰冷的海水水流冲击身体。游了几分钟突然看到非常大棵的珊瑚礁，确实规模庞大，甚至有时候让我想到 GoT 里的北境长城。可惜运动相机的广角镜头无法记录这种巨物冲击感，只能默默赞叹大自然造物的神奇。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/18-896cbfeb19a7de568d877fb03789b916.jpg" width="2200" height="1241" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/19-bfc8def6a3c842e2d878b571c5424514.jpg" width="2200" height="1241" class="img_ev3q"></p>
<p>这个点位也是有一个小时左右的时间，可惜并没有看到什么新奇的动物，只有一群长长尖嘴的银白色鱼，很像《潜水员戴夫》里抓过的品种。同行的游客到是有说看到海龟的。上船后看到导游贴心地调制鸡尾酒，坐在船边吹着海风小酌，也是非常悠闲。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="主岛">主岛<a href="https://xnth97.github.io/2024/12/01/puerto-rico#%E4%B8%BB%E5%B2%9B" class="hash-link" aria-label="主岛的直接链接" title="主岛的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="old-san-juan">Old San Juan<a href="https://xnth97.github.io/2024/12/01/puerto-rico#old-san-juan" class="hash-link" aria-label="Old San Juan的直接链接" title="Old San Juan的直接链接">​</a></h3>
<p>San Juan 是波多黎各的首府，Old San Juan 老城区更是充满历史古迹和中美洲风情。老城应该是一个著名的旅行目的地，因为附近就是港口停泊着庞大豪华的游轮，估计是很多加勒比海游轮的必经之地吧。老城里街道狭窄，坡道繁多，街旁很多房子会刷成鲜艳的彩色，街头不时能看到艺术家的涂鸦。我还算喜欢漫无目的 citywalk，偶然会有惊喜，像是做着礼拜仪式的大教堂和满是鸽子落在游人身上的广场，这种不期而遇比照着攻略打卡更为有趣。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>老城还有两处 San Juan National Historic Site，是两座规模颇大的城堡，记录了老区人民抗击西班牙殖民的可歌可泣斗争史。西北角的那座城堡规模会更大一些，上上下下好几层都开放游览，还是颇需要走些路的。我对这些历史没什么兴趣，走马观花，只是觉得有些像大沽炮台。两座城堡加起来门票 $10，所以看完一个需要留好 receipt，到下一个直接出示即可。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>老城有家著名的 gelato 店 <a href="https://maps.apple.com/?address=65%20Calle%20de%20la%20Fortaleza,%20San%20Juan,%20Puerto%20Rico%2000901,%20United%20States&amp;auid=9286692859174078693&amp;ll=18.464550,-66.117936&amp;lsp=9902&amp;q=Anita%20Gelato" target="_blank" rel="noopener noreferrer">Anita Gelato</a>，口味非常多选择，而且都是那种好几个词的口味，大概混了很多原料，像什么 white chocolate caramel almonds，一套小连招下来以为点了三个口味实际上是一个。点完一个 3 flavor gelato 里面得有十来种料。午饭去了一家叫 <a href="https://maps.apple.com/?address=280%20Calle%20del%20Sol,%20San%20Juan,%20PR%20%2000901,%20United%20States&amp;auid=6489624652693795677&amp;ll=18.467156,-66.114610&amp;lsp=9902&amp;q=El%20Jibarito" target="_blank" rel="noopener noreferrer">El Jibarito</a>，puerto rican 传统菜，点了个招牌 fried red snapper。味道么，你想象一条炸鱼是什么味它就是什么味，完全意料之中，mojito 也比较一般，中规中矩。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="el-yunque">El Yunque<a href="https://xnth97.github.io/2024/12/01/puerto-rico#el-yunque" class="hash-link" aria-label="El Yunque的直接链接" title="El Yunque的直接链接">​</a></h3>
<p>之前我以为云雀国家森林得名是因为盛产某种云雀，像是巨人柱国家公园那种命名法，后来才知道只是撞了汉语拼音 yunque 是个音译。云雀国家森林就是一片热带雨林，里面气候湿润且多变，时不时就会下场大雨，但除了森林本身就也没什么看的了。有很多游客会选择走爬山的 trail，爱玩的话有比较知名的水滑梯和 zipline，懒惰的我还是直接开车一条路车览了。相对于我见过的其他热带雨林，云雀好像生物多样性更差一点，如果不是为了 hiking 或玩水滑梯 / zipline 我觉得是个可以跳过的景点。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cueva-del-indio">Cueva del Indio<a href="https://xnth97.github.io/2024/12/01/puerto-rico#cueva-del-indio" class="hash-link" aria-label="Cueva del Indio的直接链接" title="Cueva del Indio的直接链接">​</a></h3>
<p>Cueva del Indio 是海边一片石头形成的岩洞、拱桥等景观，也曾是某部《加勒比海盗》的拍摄地。石头坡由于长久的海水侵蚀形成了密密麻麻坑坑洼洼的地貌，并不是非常好走，有些地方也会有乍一看是个小坑、仔细一看竟没有底直接透到海面的坑洞，还是得小心攀爬的。岩石拱桥内部形成的狭湾风大浪急，海水甚至能直接打到悬崖边的我身上。岩石延伸不远便迅速过渡成沙滩和热带雨林，也是蛮神奇的地貌。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/32-d0ca85bc13badf85244b536d009858d5.jpeg" width="2000" height="1500" class="img_ev3q"></p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="吃住">吃住<a href="https://xnth97.github.io/2024/12/01/puerto-rico#%E5%90%83%E4%BD%8F" class="hash-link" aria-label="吃住的直接链接" title="吃住的直接链接">​</a></h3>
<p>本着海岛旅行还是能躺则躺的原则，选择了 Hyatt Regency Grand Reserve Puerto Rico。这家店位于主岛的一个半岛上，半岛似乎都是高尔夫球场或度假小区，环境还不错。酒店占地还挺大，客房楼是很多较小的二层小楼，每楼大概十几间房，不想走路的话可以打电话叫高尔夫球车接送。虽然早已失去了 Globalist 的身份，凯悦还是友好地给我升级了海景房，不过在没有电梯的二层。房间很宽敞，设施一应俱全，酒店里也有大大小小几个泳池，泳池边也有 bar、餐车、SPA 等，还算适合躺平度假。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>酒店里餐厅的评分都低的令人发指，所以还是尽可能出去吃当地 puerto rican 菜。有两家餐厅我还蛮喜欢的，一家是 <a href="https://maps.apple.com/?address=Kioskos%20de%20Luquillo,%20Unit%2020,%20Luquillo,%20PR%2000773,%20United%20States&amp;auid=14933569904580269532&amp;ll=18.380453,-65.736778&amp;lsp=9902&amp;q=Terru%C3%B1o%20Comida%20Artesanal" target="_blank" rel="noopener noreferrer">Terruno</a>，小小的海边小店，有大叔在吹萨克斯。Pina Colada 调的甜香微辣非常清爽。烤章鱼十分鲜嫩，配上某种酸甜的果酱（也许是杏/橘子）非常开胃。很有特色的是烤的半只去骨兔子配炸的某种当地大芭蕉果实，兔肉也是外焦里嫩。另一家是 <a href="https://maps.apple.com/?address=Marginal%20Palmer,%20Rio%20Grande,%20PR%2000745,%20United%20States&amp;auid=6023226606621401628&amp;ll=18.372436,-65.770485&amp;lsp=9902&amp;q=Don%20Pepe%20Restaurant" target="_blank" rel="noopener noreferrer">Don Pepe</a>，这家店就更小了只有不到 10 个位子，而且是那种每个人进来都和老板热情互相打招呼的那种熟人店。点了波多黎各特色小吃拼盘，有一种像炸鲜奶一样的东西还挺好吃的。另点了一个烤猪排配椰子饭，猪排应该是炸过，外皮酥脆焦香，猪肉又火候恰好满口爆汁，椰子饭也是淡淡甜味很解腻。在波多黎各吃的其他餐厅也都还可以没有踩雷，不过没有这两家那么合我胃口了。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="评价">评价<a href="https://xnth97.github.io/2024/12/01/puerto-rico#%E8%AF%84%E4%BB%B7" class="hash-link" aria-label="评价的直接链接" title="评价的直接链接">​</a></h2>
<p>我原以为波多黎各是夏威夷平替，现在我觉得它作为一个又能加勒比海岛躺平、又能体验中美洲风情的目的地，还算是独特而值得一去的。作为美国属地却非 50 州之一，波多黎各较多保留了其本土（殖民）文化。居民仍讲西班牙语，路牌、标识虽是美国的样式却都是西语，甚至部分地方用公制而不是英制，让整个地方有一种同一国家却身处异域的感觉。我遇到的大部分当地居民和商家朴实而友好，但每次加油需要先押信用卡又让我隐隐觉得这个地方也不是那么简单。这里老城的多彩和厚重并存、小岛各种 tour 尽情探索自然、丰富美味的传统饮食，让波多黎各还是有很多值得体验之处。</p>]]></content>
        <category label="travel" term="travel"/>
        <category label="photo" term="photo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[冰冷人心的苏格兰之旅]]></title>
        <id>https://xnth97.github.io/2024/04/08/scotland</id>
        <link href="https://xnth97.github.io/2024/04/08/scotland"/>
        <updated>2024-04-08T21:02:40.000Z</updated>
        <summary type="html"><![CDATA[去年玩了伦敦对带英印象非常好，但美中不足的是莫名几天都是阳光普照晴空万里，完全没有雾都伦敦阴雨英伦的气氛。为了体验原汁原味的联合王国，春天的三月末，我们来到苏格兰，感受高地不一样的风情。]]></summary>
        <content type="html"><![CDATA[<p>去年<a href="https://xnth97.github.io/2023/10/12/london">玩了伦敦</a>对带英印象非常好，但<em>美中不足</em>的是莫名几天都是阳光普照晴空万里，完全没有雾都伦敦阴雨英伦的气氛。为了体验原汁原味的联合王国，春天的三月末，我们来到苏格兰，感受高地不一样的风情。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="苏格兰高地">苏格兰高地<a href="https://xnth97.github.io/2024/04/08/scotland#%E8%8B%8F%E6%A0%BC%E5%85%B0%E9%AB%98%E5%9C%B0" class="hash-link" aria-label="苏格兰高地的直接链接" title="苏格兰高地的直接链接">​</a></h2>
<p>因为时间紧张加上不敢开右舵，这次苏格兰高地之旅并没有租车，而是参加了一个还算 popular 的 tour <a href="https://www.discoverscotlandtours.com/" target="_blank" rel="noopener noreferrer">Discover Scotland</a> 走马观花。司机兼导游大哥是地道苏格兰人，穿着苏格兰裙操着一口苏格兰口音浓重的夹杂着<a href="https://zh.wikipedia.org/wiki/%E4%BD%8E%E5%9C%B0%E8%98%87%E6%A0%BC%E8%98%AD%E8%AA%9E" target="_blank" rel="noopener noreferrer">低地苏格兰语</a>的英语，氛围感属实是拉满了。大哥穿着清凉，然而三月的苏格兰气候还是比较恶劣，一路风雨交加，让我们被迫买了帽子和两把伞（吹断了一把）。</p>
<!-- -->
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>苏格兰高地的景色对于没去过冰岛的我来说还算新奇，也许有点像冰岛平替？黑色岩石上黄绿色低矮植被，高山、瀑布、大河和湖泊，有些地方颇有死亡搁浅的味道，不过与冰岛相比奇观程度和规模都远远逊色。这个 tour 的亮点是去看哈利波特电影里拍摄 Hogwarts Express 的大桥，据导游大哥说每年中间几个月份是会有蒸汽火车在桥上开的。另外印象深刻的是去看了农场里的高地牛，刘海发型实在是太酷炫了。不过总体感觉这个 tour 没什么亮点，天气也不好，很难静下来欣赏。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="爱丁堡">爱丁堡<a href="https://xnth97.github.io/2024/04/08/scotland#%E7%88%B1%E4%B8%81%E5%A0%A1" class="hash-link" aria-label="爱丁堡的直接链接" title="爱丁堡的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="city-walk">City Walk<a href="https://xnth97.github.io/2024/04/08/scotland#city-walk" class="hash-link" aria-label="City Walk的直接链接" title="City Walk的直接链接">​</a></h3>
<p>爱丁堡是一座非常适合 city walk 的城市。整个城市古色古香，充满历史厚重感；街区步行友好，常见禁止行车的步行街；主要景点集中，大部分步行可达，同时公共交通方便。爱丁堡有点“山城”的感觉，经常有地方需要爬很长楼梯或上下坡，倒是有点像匹兹堡的某些区域。以 Royal Mile 为中心的老城好像一个欧洲的时间胶囊，古朴的石板路、精致的哥特式教堂、宏伟的爱丁堡城堡，漫步其中别有异域风情。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/edb1-ad9d45011d632bc57a2070d467b7ca93.JPG" width="1920" height="1280" class="img_ev3q"></p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>在爱丁堡当街溜子，我们并没有做什么旅行攻略，但漫无目的散步却总能给我惊喜。看到路边敞开的小门自信走进去，竟然是一个历史悠久的修道士陵园，另一头的正门口还有著名的<a href="https://zh.wikipedia.org/wiki/%E5%BF%A0%E7%8A%AC%E5%B7%B4%E6%AF%94%E9%9B%95%E5%83%8F" target="_blank" rel="noopener noreferrer">忠犬巴比雕像</a>，狗鼻子被摸得锃亮。路边众多的小店也是很有意思，我们逛了五彩缤纷的维多利亚街，看到有摆着盔甲的卖骑士相关物品的店和摆着 Edge Runner OST 的黑胶唱片店。随处可见的广场、喷泉、教堂更是满足对我欧洲旧城的所有刻板印象。然而爱丁堡的天气也是变幻莫测，时常在晴天/雨天/太阳雨之间切换，最奇妙的是在参观爱丁堡大学时突然黄豆大的冰雹劈头盖脸砸下来，大街上行人四散逃窜，分外离谱。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>在爱丁堡还去了苏格兰博物馆打卡了课本上才见过的克隆羊多莉，也去爬了卡尔顿山。山上风景确实不错，整个爱丁堡尽收眼底。一边是庄重古朴错落有致的老城，另一边是湛蓝的大西洋与欧洲大陆隔海相望。然而高处不胜寒，狂风骤雨之下只能草草拍照下山。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="吃与住">吃与住<a href="https://xnth97.github.io/2024/04/08/scotland#%E5%90%83%E4%B8%8E%E4%BD%8F" class="hash-link" aria-label="吃与住的直接链接" title="吃与住的直接链接">​</a></h3>
<p>我们住在 Princes Street 上的 Hotel Indigo，地理位置绝佳，就在火车站正对面。酒店里面不大，装修倒颇有英伦风，住起来也很舒适。酒店早餐是非常标准的英国全套早饭，煎蛋、培根、豆子、烤番茄和黑布丁，这很英国。在爱丁堡还专程打卡了一家地道苏格兰菜，点了他家招牌慢炖小羊腿和牛排，但感觉调味偏咸，肉也比想象的柴，只能说也符合英国菜水平吧。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>然而这次很神奇的是在遥远的爱丁堡吃到了一家徐州菜。之前某老家公众号似乎推送过一篇文风类似《他把徐州菜做到大洋彼岸 广受老外欢迎》之类的文章，并没有点开看，结果后来刷红宝书找爱丁堡攻略竟然又看到了这家店，而且似乎评价还不错。加上我们吃了几天的英国菜了，的确不甚合胃口，索性就去了这家 <a href="https://www.google.com/maps/place/%E5%BE%90%E5%B7%9E%E5%9C%B0%E9%8D%8B+Xu+Zhou+Ground+Pot+Chinese+Restaurant/@55.938891,-3.1811862,15z/data=!4m6!3m5!1s0x4887c7cddff1be25:0xbcd5acd4aacdd20!8m2!3d55.938891!4d-3.1811862!16s%2Fg%2F11v3g2z6jr?entry=ttu" target="_blank" rel="noopener noreferrer">Xuzhou Ground Pot</a> 点了地锅鸡、干煸回锅肉和牛筋。地锅鸡确实味道对了，咸香甜辣，hē 饼也很香，吸满汤汁非常过瘾。回锅肉和牛筋也是稳定发挥，虽然难称惊艳，也算是地道家常小炒味道，在遥远国度吃上一口还是非常奇妙的。后面听到老板和厨子用徐州话讲话，忍不住趁老板出来聊了几句，小哥确实怀着把家乡菜做到国际化的一腔热情，后面老板又出来送了个炸榴莲鲜奶，跟我说“浓浓的徐州情”，祝他财源广进！</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="edb---kgx">EDB - KGX<a href="https://xnth97.github.io/2024/04/08/scotland#edb---kgx" class="hash-link" aria-label="EDB - KGX的直接链接" title="EDB - KGX的直接链接">​</a></h3>
<p>我们从伦敦国王十字车站往返爱丁堡都是坐的火车。有高铁的国家真的很方便！单程四个多小时，价格便宜一人 60 多镑，座位宽敞舒适但是有点硬，有专门的安全小房间放行李，一路上也能看看沿线的风景。英国火车相同线路（起点到终点）可能有很多不同公司运营，我们往返在两个网站买的不同的票，不过提前预约好座位付款后就可以方便地添加到 Apple Wallet 或 Google Pay，倒也不是什么问题。爱丁堡附近有一段铁路非常沿海，能看到很多海滩、乡村和小城镇。夕阳时分阳光照到草地和大海上，微微摇晃的火车发出规则的白噪音，非常惬意。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cotswolds">Cotswolds<a href="https://xnth97.github.io/2024/04/08/scotland#cotswolds" class="hash-link" aria-label="Cotswolds的直接链接" title="Cotswolds的直接链接">​</a></h2>
<p>Cotswolds 其实不是苏格兰了，它是离伦敦不算远的一个英格兰郊区，是英国最大的“牛逼自然美景区”—— Area of Outstanding Natural Beauty。但我觉得这其实有些误导性，Cotswolds 附近并不是自然美景而是人文，区域里聚集了很多原汁原味的英格兰小镇。春天的英国郊外，听起来就带劲。我们也是报了一个 tour，司机和导游两个老头都是操着伦敦口音彬彬有礼的。Cotswolds 的小镇里特色是灰黄色石头盖的房子和修的桥，以及很多和小镇规模不相称的规模宏大的教堂，好一派田园风光。但对我而言不少小镇商业化气息还是比较浓重，有点像 Carmel by the Sea 那种感觉。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="伦敦-again">伦敦 Again<a href="https://xnth97.github.io/2024/04/08/scotland#%E4%BC%A6%E6%95%A6-again" class="hash-link" aria-label="伦敦 Again的直接链接" title="伦敦 Again的直接链接">​</a></h2>
<p>伦敦还是魅力之都，这个城市永远有丰富和有趣等着你。我们去了上次没看好时间关门的博罗市场，工作日的下午也是人头攒动，去买了美食博主们强烈推荐的海鲜烩饭、巧克力草莓、生蚝，没有一个好吃的，看来评判英国菜还是需要校准一下基线。去看了泰特美术馆，我学艺术的妹妹热情洋溢地给我讲解《泉》为什么是现代艺术的开端、是一件如此不朽的作品，而我只能对着那个小便池不理解但大受震撼。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>在伦敦我们住在华尔道夫，位置看起来挺不错，每天晚上附近的剧院都是大排长队热闹非凡，希尔顿会员的免费早餐在老牌酒店也是非常超值。可是也许是酒店太老旧了，房间面积和硬件设施都是一言难尽，应该是不会再住了。我们还附庸风雅地去看了《歌剧魅影》，演出效果很震撼，演员非常专业，舞美也非常精致，但是想听明白唱词也太难了。看到一半我突然发现舞台和观众中间好像有个指挥的手？中场休息时去看了下，原来是有乐队现场演奏的，真的艺术。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="https://xnth97.github.io/2024/04/08/scotland#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2>
<p>这次英国之旅有些仓促，虽然被风吹雨打影响了旅行兴致，但也看到了伦敦之外不一样的风土人情。欧洲浓厚的文化氛围还是比北美丰富太多了，这种文化是深深沉淀在一座城市的历史和人们的生活方式中的。</p>]]></content>
        <category label="travel" term="travel"/>
        <category label="photo" term="photo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 的年末复盘]]></title>
        <id>https://xnth97.github.io/2024/01/06/annual</id>
        <link href="https://xnth97.github.io/2024/01/06/annual"/>
        <updated>2024-01-06T21:05:12.000Z</updated>
        <summary type="html"><![CDATA[去年立下的 flag “希望能回家摸摸我的猫”今年实现辣！]]></summary>
        <content type="html"><![CDATA[<p>去年立下的 flag “希望能回家摸摸我的猫”今年实现辣！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="大好事">大好事<a href="https://xnth97.github.io/2024/01/06/annual#%E5%A4%A7%E5%A5%BD%E4%BA%8B" class="hash-link" aria-label="大好事的直接链接" title="大好事的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="回国">回国<a href="https://xnth97.github.io/2024/01/06/annual#%E5%9B%9E%E5%9B%BD" class="hash-link" aria-label="回国的直接链接" title="回国的直接链接">​</a></h3>
<p>赞美三年大吃饱，时隔四年半我终于回国了。落地广州，好友夜宵接风，看着街上时近午夜仍然人头攒动烟火气十足，不能不说羡慕。回家后不免是和多年未见的父母亲友相聚，也终于又摸到了我的猫，对它来说四年半也是小半辈子已经过去了。刚回家时它笨笨的脑袋想不明白我是谁为什么能大摇大摆占据它的床，过了几天或许是想起来了或许只是习惯了，又会摆出小时候的姿势睥睨看我并不害怕了。</p>
<!-- -->
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>除了广州和老家/对象老家，这次回国还去了长沙、武汉、杭州、上海。长沙真是太好玩了，魅力之都，每天我们不干三杯茶颜五顿饭都不能罢休。凌晨一两点热闹非凡的小龙虾大排档、顿顿锅气十足吊打湾区天花板的正宗湘菜、气氛火爆不醉不归的 live house、价格公道手法娴熟的按摩馆……不得不说论生活东亚还是太精彩了，乐不思蜀。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>武汉的 vibe 也比较接近，虾是真的好吃。爬了黄鹤楼看了博物馆，见到了一些只出现在历史书上的名器“越王勾践剑”“曾侯乙编钟”，属实是国家宝藏。去广州和上海带我差点要开始跟随我姨吃斋念佛的母亲搓了几顿黑珍珠或网红餐厅，打消了她吃素的念头。还去了 LinkedIn Shanghai office 上了一天班，体验了一日上海白领挤地铁上班生活，也震撼于椰树维他随便喝的饮料冰柜。去杭州见了几位也是许久不见的好友，和每个人都约了几个小时的时间或参观工作或压马路或家里蹲，聊着这几年被疫情打断的联系，听到每个人的生活都在各方面或多或少地变好。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="婚礼">婚礼<a href="https://xnth97.github.io/2024/01/06/annual#%E5%A9%9A%E7%A4%BC" class="hash-link" aria-label="婚礼的直接链接" title="婚礼的直接链接">​</a></h3>
<p>这次回国最主要的任务是办婚礼，老夫老妻领证多年之后终于补上了这一环。筹备的过程无疑是痛苦的，主要是我俩自视甚高的审美和十八线小城婚庆低下执行力的矛盾。当然我老婆是明显更为上心的那个，每天腾讯会议微信工作群运筹帷幄。但毕竟已经婚后多年，实在没什么宣誓人生大事的仪式感，于是我们的想法就是一切从简走个形式请大伙吃顿饭，我俩就是父母回收份子钱的道具。但直到当天，在鲜花水晶婚纱和亲友瞩目之下，还是有那么几个瞬间能感觉到心跳漏了一拍。遭完这桩罪后（？）我觉得我对“婚礼”这件事的看法变了。所谓仪式感确实是花钱花时间做给别人看的自讨苦吃，但或许人生的某些时候也是真的需要这种仪式感的。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/wedding-f7d7a13fd4e5f35cca32b0daeb6e3ac1.jpg" width="1920" height="1277" class="img_ev3q"></p>
<p>婚礼之前为了装饰匆匆拍了婚纱照，但仍然十八线小城婚纱影楼海报 PS 审美不敢恭维，于是我学设计的妹妹被拉来用 Figma 给我排版做图，一下午搞完了好几张立牌。几个伴郎都是发小兄弟，老实巴交的不知所措，会来事的忙前忙后。小外甥女三岁半，摇摇晃晃地上台给我们送戒指。回国前我从没见过诞生于疫情中的她，家里提前花了几天时间让她熟悉我这个素未谋面的舅舅。小家伙郑重其事，在家演练了好几遍。好友们这次也千里迢迢特种兵来到老家参加婚礼，反正老夫老妻也不需要洞房花烛夜，晚上各自带了一波朋友去吃肉喝酒，在湖中小路上散步，带朋友们看了如果没有疫情原定于2020年办酒的场地。在微醺小酌中畅聊，仿佛回到青年湖畔一般痛快。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="杂七杂八">杂七杂八<a href="https://xnth97.github.io/2024/01/06/annual#%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB" class="hash-link" aria-label="杂七杂八的直接链接" title="杂七杂八的直接链接">​</a></h3>
<ul>
<li>婚礼之后也去对象家办了回门宴，岳父岳母极尽地主之宜感觉拼命招待我家亲戚。</li>
<li>也参加了朋友的婚礼。朋友和她对象认识得非常奇妙，所以缘分来了挡都挡不住。自己刚刷新了对婚礼的感悟后又见证别人宣誓结合，又和以往参加婚礼吃席多了些不一样的感觉。</li>
<li>今年第一次去<a href="https://xnth97.github.io/2023/06/06/wwdc">参加了 WWDC</a>，认识了很多同行朋友，还下载到了喜欢的 up 主。</li>
<li>去 Pinnacles 国家公园看了英仙座流星雨，比往年频率高得多，看到了好几颗明亮的火流星。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="游戏">游戏<a href="https://xnth97.github.io/2024/01/06/annual#%E6%B8%B8%E6%88%8F" class="hash-link" aria-label="游戏的直接链接" title="游戏的直接链接">​</a></h2>
<p>今年好像又<a href="https://s.team/y23/qtmcmck?l=schinese" target="_blank" rel="noopener noreferrer">玩物丧志</a>了不少。开年《霍格沃茨之遗》，黑巫师修炼手册，后期校园里横着走随手阿瓦达啃大瓜。《王国之泪》史诗续作，主打一个怎么都能玩怎么都能过。《瑞奇与叮当：时空跳转》终于登陆 PC，手感爽快福瑞控狂喜（我不是），丰富而大开脑洞的武器设计绝不会腻。《P4G》故事巧妙令人回味，久慈川理世可太可爱了（CV 竟然还是钉宫理惠）。《如龙维新》和《如龙 7 外传》都是赞美西瓜皮，既然不要钱就跟着桐生一马大哥继续走一遭。《烟火》中式恐怖现代怪谈却又辛辣讽刺，作者笔力令人赞叹。《暗黑 4》颇有《暗黑 2》的味道，刷刷刷一个爽字了得。《星空》我的期待爆高，前期由于热爱太空歌剧题材，加上开放世界又有 B 社海量内容支撑，体验太对我胃口了，新鲜感正反馈极强；可惜后期反复读图、稀烂的手感、又臭又长的主线和崩溃的战斗平衡让我失去兴趣，只能忍着不适打完了，感觉虎头蛇尾非常可惜。夏天回国时带了 Steam Deck，由于经常坐飞机高铁，有两部游戏《蜘蛛侠：迈尔斯》和《最终幻想：核心危机》完全是在 Steam Deck 上打完的，掌机确实有独特的沉浸感，戴上耳机瞬间高铁里的嘈杂便与我无关，一头扎进方寸屏幕中的异世界。年末受 PS5 Slim 的广告轰炸一个没忍住终于买了，《蜘蛛侠 2》确实是用震撼的光线追踪和新奇的自适应扳机与震动反馈让我觉得 PlayStation 还是比 Xbox 更次世代一些。《战神 5》更是让我一个系列老粉丝情难自禁了，索尼这次祖坟冒了烟给美版光盘加了中文，终于可以更好地享受故事甚至只言片语的碎嘴对白了。读着有时奎爷不经意提起希腊时的故事，脑中突然又能回想起以前或放学去 PS2 游戏厅或被窝里偷偷打 PSP 的时光。</p>
<p>今年我最喜爱的游戏要颁给一个 DLC——《往日之影》。我在《赛博朋克 2077》首发就入手了实体盘，无奈层出不穷的 bug、糟糕的优化、迟钝的手感让我在上世代 Xbox One X 上顶着十几二十帧、读着冗长的英文蝇头小字对白文本磕磕绊绊打了 20 个小时弃坑了，这几年再也没碰过盘打开过。《往日之影》出了之后加上 2.0 版本好评如潮，PC 也有了好显卡，于是买了 Steam 版 + DLC。令我惊喜的是 2.0 版本有了跨平台存档同步，我 Xbox 上更新之后时隔多年打开读档，同步之后在 Steam 上无缝继续几年前的夜之城之旅。在蠢驴多年修 bug 优化后（或者是我终于换了现代硬件后），光追开启的 4K 60 帧夜之城美轮美奂，中文配音对白更是一听觉得“那味对了！”，符合我对人物的想象。</p>
<p>说回《往日之影》本身，开篇一两个小时就让我很惊喜，蠢驴一改《巫师》或《2077》本篇站桩对话的剧情，《往日之影》开局便是超大规模跌宕起伏的电影级演出，其生动和沉浸让我想起第一次玩到《CoD4》时的震撼。后续的故事也称得上引人入胜，蠢驴刻画了一出本篇里没涉及过的精彩谍战，勾心斗角反转连连令人大呼过瘾。战斗手感在几乎重做的加点/义体/装备系统后也算痛快，除了主线的某一条分支太过于侧重潜行令人不适，相比之下另一条分支不仅有更恢弘的场景、更爽快的战斗、更精彩的故事，甚至蠢驴组专门设计了一个向《边缘行者》致敬的桥段。在雨夜往航天城一路狂飙，收音机里放着寡妇小曲，这大概是我仅次于《The Last of Us》最终章的情感体验了。虽然事后回想《边缘行者》的场外因素加成过大，但那个瞬间的确是独特的。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/2077-4fe81201a3da1ec18a8b4511b14252f6.jpg" width="1920" height="1080" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="音乐">音乐<a href="https://xnth97.github.io/2024/01/06/annual#%E9%9F%B3%E4%B9%90" class="hash-link" aria-label="音乐的直接链接" title="音乐的直接链接">​</a></h2>
<p>今年又去看娃了！《I Am Free-ty》巡演整体风格我太爱了，仿佛一场巨大的狂欢节。今年更努力抢票买了内场较前排，在三番场换了更大的场地和容纳了更多粉丝后感觉能量更强了。感觉经过去年一次巡演娃们明显更游刃有余了，业务水平不用说，串场讲英语也不让话掉下来。今年歌单甚至也很用心，特意挑了去年没有表演过的收录曲 + 新的编舞，她们真的我哭死。而且因为发英文专辑的缘故，在北美第一站三番还首演了《I Do》，全场粉丝打着手电筒一起大合唱氛围超棒。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="175" style="width:100%;max-width:660px;overflow:hidden;border-radius:10px" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/i-do/1696587119?i=1696587124&amp;l=zh-Hans-CN"></iframe>
<br>
<br>
<div class="react-photo-album react-photo-album--columns" role="group" aria-label="Photo album"></div>
<br>
<p>看完以后继续非常上头，正好宣布了她们年底要来 LA 参加 Jingle Ball，那——再！来！亿！遍！不过除了娃，整场 Jingle Ball 也是非常量大管饱的四小时，来了很多耳熟能详的歌手，仿佛 A-List Pop 线下版。AJR 的现场非常有意思，仿佛在表演现场混音一般一轨一轨地加到曲子里。Flo Rida 嘻哈老炮邀请了好多观众上台蹦，大哥唱到兴奋衣服也脱了送给观众，鞋子也脱了送给观众，自己跳了下去。Olivia Rodrigo 现场我比较惊喜的，没想到感染力还是很强的一个小姑娘，唱功也是非常了得，和伴唱阿卡贝拉无伴奏的《Can't Catch Me Now》非常好听，我很喜欢的《brutal》更是调动全场。我们娃来了西海岸也嘻哈起来了，rap title song 《I Want That》首秀热辣带劲，很是养眼。</p>
<div class="react-photo-album react-photo-album--columns" role="group" aria-label="Photo album"></div>
<br>
<p>今年新说唱来了我喜欢的法老和谢可寅，搞得有段时间 B 站天天给我推他俩的磕 CP 混剪（？）。孙权是真的稳，《鬼脸》和《我想》的现场版真让我目瞪口呆，丝滑又走心，《健将》也是好美的精神状态，好想明年去看活死人的现场。对谢可寅我作为一个颜粉（？）本来没什么期望的，《叫姐姐》美女跳舞谁不爱看，结果第二场不知道节目组咋想的硬组得拉垮得难受，好在第三场摊爸带的《流浪·地球》直接我起飞了。独特烟嗓质感加小姑娘细腻词作，衬着其他组都有些大老粗了，什么叫文化说唱啊。</p>
<blockquote>
<p>就让我带着自己去流浪</p>
<p>拨开云层的心房 关掉太阳关掉月亮吧</p>
<p>到那个地方我会对你讲</p>
<p>繁星化成我的偏旁 所有光芒早就在我怀里了</p>
</blockquote>
<iframe allow="autoplay *; encrypted-media *; fullscreen *; clipboard-write" frameborder="0" height="175" style="width:100%;max-width:660px;overflow:hidden;border-radius:10px" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/%E6%B5%81%E6%B5%AA-%E5%9C%B0%E7%90%83-%E7%8E%B0%E5%9C%BA/1691038045?i=1691038048&amp;l=zh-Hans-CN"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="剁手">剁手<a href="https://xnth97.github.io/2024/01/06/annual#%E5%89%81%E6%89%8B" class="hash-link" aria-label="剁手的直接链接" title="剁手的直接链接">​</a></h2>
<p>年初买了 RTX 4070 公版卡升级 PC 主机，终于淘汰了之前矿潮时过渡用的渣 RDNA2。买公版卡一是为了我从 MX440 开始投靠老黄家的 20 年信仰加成，一是 Alienware R10 塑料壳里面真正机箱空间极其有限，塞不下三风扇以及很多双风扇的显卡。有了现代 N 卡后除了我的 Steam 时长显著增加，借助 CUDA 也初步接触了一些大热的 AI 应用如 stable diffusion 和 llama，第一次单机部署起 LLM 还是很震撼的，难以想象这种级别的模型能在我几百块买的消费级硬件上跑起来（近一年之后 Apple Silicon 甚至都能做 fine tune 了）。公版卡的设计和包装也都非常扎实，X 形夸张的包装和低调内敛的显卡本体形成有趣的对比，沉稳简约的设计在我眼中比 RGB 光污染不知道好到哪里去了，很想找个侧透的机箱每天展示。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/rtx-7ac34a9959ecbf50b7170acbdaef0756.jpg" width="1920" height="1440" class="img_ev3q"></p>
<p>回国买了 <a href="https://xnth97.github.io/2023/08/20/find-x6-pro">Oppo Find X6 Pro</a> 作为主力机，使用至今对 Oppo 大为改观，甚至近期旅行将 Find X6 Pro 作为我拍照的主力机。不光前期携带比相机舒服太多太多，后期手机算法自动的 HDR 和 Oppo 与哈苏合作的色彩也比带电脑解 RAW 堆栈拉曲线方便太多了。但另一方面在极限场景和画质要求的时候相机也有不可替代性，对象今年送了我一个 a7r5，61 MP 的解析力相比我 a7m3 是史诗级提升，为二次构图留下了极其充裕的空间。下图左边是 a7m3 拍摄合成的英仙座流星雨，右边是 a7r5 接同一镜头拍的银河，感觉解析力和高感的噪点控制还是明显提升的。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>今年的剁手集中在客厅，升级了 OLED 大法 A90J 电视、HT-A9 音响系统 + SA-SW3 低音炮、PS5 Slim，一套索尼大法全家桶下来感觉客厅影音娱乐实现了大幅跨越。OLED 电视的高亮度和高对比度也太美了，之前真的是“眼前的黑不是黑”，支持 Dolby Vision 的片源和游戏画面真叫一个栩栩如生。音响方面我早就想把计算声学的 HomePods 换成真正环绕声了，先买了 HT-A5000 + SA-SW3，结果除了低音，整体效果惨不忍睹差点让我对大法失去信仰。之后退了 HT-A5000 咬牙上旗舰 HT-A9，豁然开朗！HT-A9 以四坨物理单元加大法 360 声场黑科技实现了 12 个虚拟扬声器的效果，还能将自家 A90J 的扬声器作为中置声场，在支持 Dolby Atmos 的片源里那是真的身临其境了，尤其是 Apple Music Live 的演唱会视频能清晰听到身边观众和歌手乐器的位置。打游戏更是大幅提升，硬件的 ARC 比果电视 + 家多宝 ARC 的延迟低太多了完全无感，真正的环绕扬声器又带来了很强的听声辩位能力。网上诟病的扬声器断连在几次固件更新后也越来越少，但我还是希望下一代产品大法能至少提供一个有线的选项。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="旅行">旅行<a href="https://xnth97.github.io/2024/01/06/annual#%E6%97%85%E8%A1%8C" class="hash-link" aria-label="旅行的直接链接" title="旅行的直接链接">​</a></h2>
<p>年初去了 Phoenix 和巨人柱国家公园看大仙人掌，吃了同事推荐的绝好吃的 taco（Taco Boys）。五月去了波特兰然后坐了火车去西雅图，去 Olympic 国家公园爬了山，打卡了暮光之城发生地 Forks 小镇，去 Bellevue office 上班见了老板和组员，之后回了国。回来不久因为妹妹去伦敦念书，十月正好<a href="https://xnth97.github.io/2023/10/12/london">去了趟带英</a>，期待签证过期之前再去看看伦敦之外的地方。年底算是特种兵地游了一圈 Utah 的 Mighty 5，连着玩了 Zion、Bryce Canyon、Capitol Reef、Canyonlands 和 Arches 五个国家公园外加 Goblin Valley SP 和 Monument Valley，每天微信步数冠绝群雄。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="https://xnth97.github.io/2024/01/06/annual#%E5%85%B6%E4%BB%96" class="hash-link" aria-label="其他的直接链接" title="其他的直接链接">​</a></h2>
<p>年初做了个 web app <a href="https://gamegrid.azurewebsites.net/" target="_blank" rel="noopener noreferrer">游戏生涯个人喜好表</a>突然火了，在<a href="https://www.yystv.cn/p/10453" target="_blank" rel="noopener noreferrer">游研社</a>和<a href="https://www.zhihu.com/question/583691939" target="_blank" rel="noopener noreferrer">知乎</a>都看到一些讨论，机核那几天也是满天飞还得到了西蒙的关注，算是一次神奇的经验。技术上随着访问量的暴涨，原来 Next.js + Azure B1 instance 越来越撑不住，甚至 QPS 过高超过了上游 API 的阈值，于是经历了 scale up、负载均衡、加 cache、用 Go 重写后端等操作，终于控制在一个响应时间和成本都能接受的程度。短短两周之内整个站子有 4500 万次请求、一百万 PV、峰值 300 QPS，一共向外发了 1.3TB 的数据。当然这泼天的富贵我是接不住的，过两周大家都玩过了流量也就消失了，不过仍然对我来说是一次非常有趣的经历。我在工地内部做了一次分享，因为整个项目是跑在 Azure 上的，Azure App Service 的弹性部署和云端与本地 VSCode 的深度集成给我留下了很深的印象。之后很多同事过来跟我说“你的项目很酷”，小小成就感。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/ppt-88e5035f17167134ca3bd57c887507c5.png" width="1600" height="908" class="img_ev3q"></p>
<p>总的来说今年还是生活上颇有收获的一年，职业上年底也做了跳出舒适圈的决定，希望新的一年继续加油叭。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[去伦敦广场喂鸽子]]></title>
        <id>https://xnth97.github.io/2023/10/12/london</id>
        <link href="https://xnth97.github.io/2023/10/12/london"/>
        <updated>2023-10-12T22:23:00.000Z</updated>
        <summary type="html"><![CDATA[传言梁朝伟闲下来就飞去伦敦，独自蹲在广场上喂一下午鸽子，当晚再飞回香港。这个广场据说便是伦敦地标 Trafalgar Square。虽然没有影帝的闲情逸致，我们也凑出五天时间飞去伦敦，住在喂鸽子广场附近好好走马观花了一番。第一次去带英，也距离上次去欧洲已经过去十一年多了（巧合的是上次正好是伦敦奥运会），浅记录一下标准游客的路线和见闻。]]></summary>
        <content type="html"><![CDATA[<p>传言梁朝伟闲下来就飞去伦敦，独自蹲在广场上喂一下午鸽子，当晚再飞回香港。这个广场据说便是伦敦地标 Trafalgar Square。虽然没有影帝的闲情逸致，我们也凑出五天时间飞去伦敦，住在喂鸽子广场附近好好走马观花了一番。第一次去带英，也距离上次去欧洲已经过去十一年多了（巧合的是上次正好是伦敦奥运会），浅记录一下标准游客的路线和见闻。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-1-picadilly-周边大本钟西敏寺">Day 1: Picadilly 周边，大本钟，西敏寺<a href="https://xnth97.github.io/2023/10/12/london#day-1-picadilly-%E5%91%A8%E8%BE%B9%E5%A4%A7%E6%9C%AC%E9%92%9F%E8%A5%BF%E6%95%8F%E5%AF%BA" class="hash-link" aria-label="Day 1: Picadilly 周边，大本钟，西敏寺的直接链接" title="Day 1: Picadilly 周边，大本钟，西敏寺的直接链接">​</a></h2>
<p>SFO 飞 LHR 花了整整十个小时，怀念以前上学时看的 $400 匹兹堡飞雷克雅未克的机票，感觉美东去欧洲还是方便很多的。由于时差的关系，从出门到抵达伦敦基本上整一天就没了。我们住在伦敦繁华的 Picadilly Circus 附近，用 Amex Platinum 的 Fine Hotel &amp; Resorts 预订了 The Londoner 酒店。这个酒店感觉是老牌贵族的气质，面积不大但装修豪华，在寸土寸金的地方硬生生靠着四层地下室扩张成了一幢 12 层的大酒店。酒店服务人员感觉都非常专业友好，门口大爷也穿着板正的西装戴着礼帽操着一口伦敦腔向你问好帮你开门，优雅，太优雅了。</p>
<!-- -->
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>中午在附近的唐人街草草吃了午饭，下午开始 city walk。不远的特拉法加广场便是传说中梁朝伟喂鸽子的地方，但临近冬天并没有几只鸽子。广场占地不大却密布了喷泉、石碑（？）、狮子雕像等，非常符合欧洲广场的刻板印象。走过广场就能远远看见大本钟了，于是我们沿街一路走去，途径了传说中的唐宁街 10 号，不过门口似乎聚集了大批卫兵 / 警察，没有仔细去看。在大本钟旁边我们先去看了西敏寺，哥特式的建筑精致而壮观，可惜并没有开放。大本钟和威斯敏斯特宫（aka 议会大厦，Houses of Parliament）是连在一起的，有一个 tour 可以爬大本钟里面，可惜过于热门也没有约到。大本钟比我想象的倒是大出不少，近距离能看到指针都好大一个，好像每 15 分钟就会敲钟报时。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/abbey-876225be002d4fb55b01dca7c95f08d3.jpg" width="1440" height="1080" class="img_ev3q"></p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>傍晚走在威斯敏斯特桥上，吹着泰晤士河的微风，看着两岸伦敦地标，非常惬意。过桥后能看到议会大厦和大本钟侧面的全貌，晚上也适时亮起黄色灯光，把建筑轮廓衬托的更加精致。晚上吃了 Flat Iron，价格极为良心的牛排（13 磅好像）但味道着实一般，餐厅环境氛围倒不错，赠送的 salted caramel 冰淇淋好评。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/river-0b8d48ca6f206dddc48107ba409c4df7.jpg" width="1920" height="1280" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-2-大英博物馆伦敦眼泰晤士河">Day 2: 大英博物馆，伦敦眼，泰晤士河<a href="https://xnth97.github.io/2023/10/12/london#day-2-%E5%A4%A7%E8%8B%B1%E5%8D%9A%E7%89%A9%E9%A6%86%E4%BC%A6%E6%95%A6%E7%9C%BC%E6%B3%B0%E6%99%A4%E5%A3%AB%E6%B2%B3" class="hash-link" aria-label="Day 2: 大英博物馆，伦敦眼，泰晤士河的直接链接" title="Day 2: 大英博物馆，伦敦眼，泰晤士河的直接链接">​</a></h2>
<p>上午约了免费的大英博物馆，周末排队非常长但相比 walk-in 还是快不少，强烈建议要去的朋友都提前预约一下。但好像时间并不是很重要，我去的时候工作人员只看你有没有预约并不看约的什么时候。注意博物馆可能会有一些付费的展览也是需要提前买门票的。大英博物馆进门有免费地图小册子拿，对于迷宫一样的巨大建筑来说，地图和良好的方向感确实至关重要。如果时间紧张走马观花的话，小册子会标注十来个必看的镇馆之宝和它们的位置。我们大概花了三个小时的时间把所有场馆都遛了一遍，但欠缺艺术细胞也看不出门道，只记得有大批的埃及木乃伊、帕特农神庙的雕像、复活节岛石像和罗塞塔石碑原件。大英博物馆里来自世界各地的文物奇观还是非常丰富的，很值得博物馆爱好者泡一天细细欣赏。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/museum-7acc83541fd7d67469deed715bf0efaf.jpeg" width="1920" height="1440" class="img_ev3q"></p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>中午去赶时髦排队了一个红宝书网红店 Apple Butter Cafe，这个店的管理实在是有些混乱，排了一个多小时的队也没有店员维持秩序，队还被分成了马路两边，全靠自己和插队的人斗智斗勇。店面不大，装修风格很英式，甚至里面有一棵大苹果树。饭的味道我自己没什么特别的印象，感觉中规中矩 brunch，符合我对英国料理的刻板印象。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>下午买了伦敦眼和 cruise 的 combo，摩天轮缓缓转一圈 30 分钟，能看到河边地标的全貌。摩天轮每个 pod 都是圆滚滚的大玻璃，360 度全景方便挑选角度。Cruise 全程 40 多分钟，沿泰晤士河中段一个来回，有导游讲解两岸伦敦地标和名人轶事，感觉也是个游客保留项目。晚上去吃了一家西班牙菜，海鲜烩饭很香，别的一般。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/bigben_full-f92ea5a602fd9342afbcdcb229feb940.jpg" width="1920" height="1280" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-3-贝克街国王十字车站剑桥">Day 3: 贝克街，国王十字车站，剑桥<a href="https://xnth97.github.io/2023/10/12/london#day-3-%E8%B4%9D%E5%85%8B%E8%A1%97%E5%9B%BD%E7%8E%8B%E5%8D%81%E5%AD%97%E8%BD%A6%E7%AB%99%E5%89%91%E6%A1%A5" class="hash-link" aria-label="Day 3: 贝克街，国王十字车站，剑桥的直接链接" title="Day 3: 贝克街，国王十字车站，剑桥的直接链接">​</a></h2>
<p>早上先去了 221B Baker St 打卡了福尔摩斯博物馆，小小的 townhouse 里按照小说记述还原了大量的家具摆设，也有工作人员讲解，是个纯“圣地巡礼”式的景点，对于不是粉丝的我而言兴趣索然。今天计划去 Cambridge，于是去了国王十字车站买火车票，顺便看了看 9¾ 站台。这个其实纯纯是噱头了，因为它并不是真的按描述位于 9 和 10 站台中间，也不是当时拍电影用的地方，而单纯是一家 Harry Potter store 的外墙，粘上半截行李车打了个 9¾ 的标志就吸引游客大排长队合影打卡，实在是不推荐为了它专门跑一趟。但如果你买了火车票进站，看到国王十字车站的巨大拱顶、罗马数字的旧时钟、站台之间的黄砖墙，整个场景就颇有电影里的即视感了。国王十字车站应该是伦敦一个颇为繁忙的车站，去英国各个地方的车次都很多，我们买了当日去 Cambridge 的往返票，一张仅需 20 英镑。火车也比较现代，和美国脏兮兮又缓慢的火车不同，英国火车更接近国内早期动车但更为舒适，空间充足宽敞明亮。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/kings_cross-6b06896491fd1c59683efda8b37c796e.jpeg" width="1920" height="1440" class="img_ev3q"></p>
<p>Cambridge 感觉整个小镇都是依托于剑桥大学而建的，保留了大量的老建筑，古朴庄重的书卷气扑面而来。River Cam 沿着著名的国王学院、三一学院等穿城而过，我们也不能免俗地去坐了 punting。徐志摩曾写道，</p>
<blockquote>
<p>康河，我敢说是全世界最秀丽的一条水。</p>
</blockquote>
<p>在天气晴好的周末下午泛舟河上，岸边杨柳依依红墙黛瓦，游人或学生在草地上三三两两拿着啤酒聊天，时能看到雄伟的学院建筑。撑船小哥技术颇好，能在挤满了 self-hire punting 的歪歪扭扭游船堆中闪转腾挪，一路上也能不断介绍学校和古迹，甚至能磕磕绊绊用中文讲“徐志摩”和“再别康桥”。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/cam3-2d3fa292096d8eabef68596e88047ee5.jpg" width="1920" height="1280" class="img_ev3q"></p>
<p>可惜周末下午大部分学院已经不对外开放了，我们只能在剑桥当街溜子。剑桥小镇上学校周边有一个小小的集市，聚集了众多商店、餐厅和露天喝酒的人，氛围非常 chill。还看到了牛顿苹果树，虽然有说其实并不是砸到牛顿的苹果树，只是为了纪念牛顿，但好像我本科学校里的牛顿苹果树是从这棵树的枝条繁育的。街头的建筑也非常符合我对英伦小镇的想象，是个不错的从大城市抽身的地方。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>晚上坐火车回伦敦天色已迟，就直接呆在酒店餐厅吃晚饭（正好 FHR 有 $150 的 credit）。是一家 French fusion，辣味的焗蜗牛味道很神奇。主菜点了烤海鲈鱼和 A5 和牛，都还挺不错的。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-4-白金汉宫伦敦塔圣保罗大教堂">Day 4: 白金汉宫，伦敦塔，圣保罗大教堂<a href="https://xnth97.github.io/2023/10/12/london#day-4-%E7%99%BD%E9%87%91%E6%B1%89%E5%AE%AB%E4%BC%A6%E6%95%A6%E5%A1%94%E5%9C%A3%E4%BF%9D%E7%BD%97%E5%A4%A7%E6%95%99%E5%A0%82" class="hash-link" aria-label="Day 4: 白金汉宫，伦敦塔，圣保罗大教堂的直接链接" title="Day 4: 白金汉宫，伦敦塔，圣保罗大教堂的直接链接">​</a></h2>
<p>上午去看白金汉宫，正巧赶上一次皇家卫兵换岗，有军乐队奏乐和戴着巨大黑毛帽子的卫兵💂走来走去，看了半天也看不出个所以然。白金汉宫后门有个纪念品店，里面是大量纪念女王 Platinum Jubilee 和国王加冕的纪念品，很多做工还是很精致的。白金汉宫步行 10 分钟就到了海德公园，不过除了门口标志性的雕像外没啥吸引人的，草草逛了一会就转战伦敦塔了。伦敦塔开放了很多的塔楼和房间可以参观，有的房间里还原了以前王公贵族的陈设，但大部分房间是空空荡荡或者摆着一些展板讲历史小故事。反而是有些塔楼用栅栏关着的未开放地方一眼望去非常有趣，好像从权游中走出的场景。很凑巧的是最近伦敦塔在举办一个 The Crown Jewels 的展览，能看到很多以前的皇冠、权杖、佩剑和礼仪用具，近距离观看大颗大颗几百克拉的巨大钻石和满柜子金灿灿的庞大器具还是很震撼的，可惜为了保护文物并不允许拍照。伦敦塔旁边是著名的塔桥，也走上去遛了一圈。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/towerbridge-00a399a7a362a1e4f555e01aa7305d2a.jpg" width="1920" height="1280" class="img_ev3q"></p>
<p>之后去看了新地标千禧桥，据说是和伦敦眼竞争 2000 年地标的胜出者，设计非常现代化，也在不少电影中都出过镜惨遭摧毁。千禧桥对面便是圣保罗大教堂，建筑也是非常精美但感觉香火（？）不旺，人流量很大但大家都是步履匆匆作为一个抄近路去地铁站。晚上想着快走了，去泰晤士河边一家 bar 吃了英国国粹——炸鱼薯条，没有什么特别的印象，就是炸鱼和薯条。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-5-逛街回家">Day 5: 逛街，回家<a href="https://xnth97.github.io/2023/10/12/london#day-5-%E9%80%9B%E8%A1%97%E5%9B%9E%E5%AE%B6" class="hash-link" aria-label="Day 5: 逛街，回家的直接链接" title="Day 5: 逛街，回家的直接链接">​</a></h2>
<p>最后一天时间很紧，早上抽时间去逛街采买，然后就坐上机场线直奔 LHR 了。LHR 安检感觉规划得特别好，有工作人员引导分出不同的队伍并行处理，有条不紊而且效率很高，没几分钟就进去了，简直是 high concurrency I/O 典范。LHR 里面也有不少免税店，感觉如果想来购物的话需要提前规划好留够时间。</p>
<p>回到家里，身心俱疲，更为想念伦敦大城市的繁华和夜里喝酒的惬意。希望能趁着多次往返签证过期前再去些城市，看看英国别样的风光吧。</p>]]></content>
        <category label="travel" term="travel"/>
        <category label="photo" term="photo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[聊聊 Oppo Find X6 Pro]]></title>
        <id>https://xnth97.github.io/2023/08/20/find-x6-pro</id>
        <link href="https://xnth97.github.io/2023/08/20/find-x6-pro"/>
        <updated>2023-08-20T23:46:01.000Z</updated>
        <summary type="html"><![CDATA[六月份回国时早早京东买了台 Oppo Find X6 Pro 作 +86 专用机。从来没有用过国产安卓手机的我实在是太好奇了：为何 Oppo 从传统的厂弟厂妹品牌能做到占有率头筹？国内所谓“xxOS”在最毒瘤特殊的生态系统下表现如何？国产厂商靠堆料堆出来的产品究竟会不会有比 iPhone / Pixel 更好的体验？深入作为主力机使用了一个半月，聊一聊我的看法。]]></summary>
        <content type="html"><![CDATA[<p>六月份回国时早早京东买了台 Oppo Find X6 Pro 作 +86 专用机。从来没有用过国产安卓手机的我实在是太好奇了：为何 Oppo 从传统的厂弟厂妹品牌能做到占有率头筹？国内所谓“xxOS”在<del>最毒瘤</del>特殊的生态系统下表现如何？国产厂商靠堆料堆出来的产品究竟会不会有比 iPhone / Pixel 更好的体验？深入作为主力机使用了一个半月，聊一聊我的看法。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="硬件">硬件<a href="https://xnth97.github.io/2023/08/20/find-x6-pro#%E7%A1%AC%E4%BB%B6" class="hash-link" aria-label="硬件的直接链接" title="硬件的直接链接">​</a></h2>
<p>我购买的是 Oppo 首推的“大漠银月”版。和我之前用过的朴素的咕果 Pixel、大法 Xperia、三爽 S 系列不同，Find X6 Pro 主打一个骚气张扬。银色金属与灰色素皮的拼接设计，硕大招摇叠着哈苏和马里亚纳 logo 的镜头模组，生怕别人看不出来这是 Oppo 当季的看家旗舰。而且由于哈苏的联名，镜头模组一圈特地做了仿相机卡口纹路设计，甚至致敬了哈苏标志性的橙色小点。整体做工非常精致严丝合缝。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/back-bd615d98a405e0e633b5da4cd25c27e3.jpg" width="2048" height="1536" class="img_ev3q"></p>
<p>正面是一块 1440P 120Hz 高刷曲面屏，屏幕内嵌了速度很不错的指纹识别模组。我第一次用纯曲面屏，感觉曲率还算蛮高的，几乎能覆盖到侧面三分之一的机身。巨大的曲率让安卓边缘返回的手势非常顺滑贴手，但也导致屏幕两侧正面看会微微发绿，看来手感和观感不可兼得。这块屏幕的色彩和亮度都非常不错，明显好于 S21 以及远远甩开 iPhone 13。我特别享受用这块巨亮无比的屏幕观看 HDR 内容，以至于最近有些节目（比如《黑镜》第六季）我选择专门缓存好 Netflix 等着出门时在手机上看。宽大的尺寸和讨喜的调色让我第一次体会到手机甚至掌上设备看视频的甜点舒适区。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/screen-f3778ca6884da51be5b00eeca8426f58.jpg" width="2048" height="1181" class="img_ev3q"></p>
<p>内在硬件则是国产旗舰的传统强项了。Snapdragon 8 Gen 2（现在这都啥命名）+ 12GB RAM，所有应用都是一个游刃有余。游戏高刷满帧丝滑流畅，小而美也从不被杀后台。自研的马里亚纳芯片虽然被自豪地标记在外壳和软件里，却也无奈成为 Oppo 半导体的绝唱<sup><a href="https://xnth97.github.io/2023/08/20/find-x6-pro#user-content-fn-1-ecc11f" id="user-content-fnref-1-ecc11f" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>。上下双扬声器开口且支持杜比，音质对我轻度游戏、Netflix 视频和 Apple Music 都比较足够。</p>
<p>整体来讲，这台机器由内而外满足我对国产旗舰的刻板印象：堆料。另一方面，它的工业设计也打破了我对国产傻大黑粗的偏见。色彩讨喜亲肤舒适的素皮，宽大扎实却不厚重的手感，以及满满致敬哈苏老法师狂喜的镜头模组设计，的确是独特而自成一派的风格。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="软件">软件<a href="https://xnth97.github.io/2023/08/20/find-x6-pro#%E8%BD%AF%E4%BB%B6" class="hash-link" aria-label="软件的直接链接" title="软件的直接链接">​</a></h2>
<p>软件搭载基于 Android 13 的 ColorOS，在国内一众系统中也算得上简约了。ColorOS 的 launcher 基本是 Android 和 iOS 的缝合怪，只有一层“桌面”加负一屏，图标、文件夹、Android 小部件和 Oppo 自家的仿 iOS 的 Widget 都缝合在一起。Oppo 这个“卡片中心”确实学到了 WidgetKit 的精髓，实时更新的卡片提供完善的一瞥之内可以看清的信息，也有比 iOS widget 更开放的交互，不过不知道脱离 Android 规范的产物第三方适配的积极性和维护程度如何。更离谱（？）的是卡片中心里有大量本机上并没有安装的 app，其提供的卡片也能正常使用，感觉是设备厂商和应用厂商大型 py 交易现场，和 iOS 的模式大相径庭。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/coloros-f0a1cb2ad65d4ca5a85af1ae261d3873.png" width="1920" height="1080" class="img_ev3q"></p>
<p>在内建 app / 系统功能上，ColorOS 也符合国内系统的刻板印象：什么都有（在海外你很难见到有手机自带万能红外遥控器的）。系统内建 app 除了寥寥几个如时钟、计算器、文件等还算符合 ColorOS 自己的设计规范，精巧好用又克制，其他的基本都是为自家增值服务引流的入口，充斥着广告和 bloatware。钱包拼命劝你办贷款，健康疯狂安利自家手表，浏览器就更不用说了，几个 tab 页跟特么猪圈一样到处都是热榜、短视频和自媒体垃圾信息。不幸中的万幸，ColorOS 的吃相相对还好看些，大部分 bloatware 可以轻松卸载，关掉通知权限后也不会再推送广告了。</p>
<p>ColorOS 整体来讲还算可以，我个人喜欢它胜于 OneUI。同样是走大而全路线，ColorOS 有些小设计会让我感觉到小惊喜的那种灵巧。比如 launcher 大文件夹的模式可以直接点进具体 app 而不需要先展开文件夹，灵活顺手的浮窗分屏，调教得极为细腻的震动反馈，质量非常高且每幅作品都有介绍的 Art+ 壁纸等。而且 ColorOS 的软件质量还算不错，使用过程中我完全没碰到恶性死机发热之类的问题，也有陆陆续续收到 Android 上游的安全补丁更新。</p>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>注意</div><div class="admonitionContent_BuS1"><p>2024 年 6 月底，ColorOS 已实装更新会<strong>联网</strong>检查手机名称是否存在敏感字符。</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="拍照">拍照<a href="https://xnth97.github.io/2023/08/20/find-x6-pro#%E6%8B%8D%E7%85%A7" class="hash-link" aria-label="拍照的直接链接" title="拍照的直接链接">​</a></h2>
<p>Oppo 给这台机器的 slogan 叫“不分昼夜 无论远近”，话说的很狂，然而实际用下来这套大底自由曲面 + 潜望长焦组合也确实对得起这句话。无论光线明暗程度和使用哪一颗镜头，用 Find X6 Pro 都能拍下令我惊喜的画面。Find X6 Pro 主摄传感器足有一英寸，超广角和长焦都是 1/1.56 英寸的主摄级大底，暴力堆料保证了画面纯净，哈苏加持色彩科学又带来了极高的宽容度和玄学加成，还是有些东西的。</p>
<p>贴一些长焦暗光下样张。广角或白天的样张就没必要发了，毋庸置疑的第一梯队。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/sample1-5079cc69ae72e0f8cc91fc46ef53583e.jpg" width="2048" height="1756" class="img_ev3q"></p>
<!-- -->
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>回放是让我很惊喜的一点，Oppo 终于在 Android 系统上实现了类似 iOS 的 XDR 回放，可以针对同屏内不同内容激发不同的亮度。在这块巨亮的屏幕上回放高亮度 XDR 照片视频，确实有很强的身临其境的感觉。视频录制上 Find X6 Pro 也是我用过的 Android 天花板，4K 60fps 质量高色彩准防抖稳，没什么好挑的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="生态">生态？<a href="https://xnth97.github.io/2023/08/20/find-x6-pro#%E7%94%9F%E6%80%81" class="hash-link" aria-label="生态？的直接链接" title="生态？的直接链接">​</a></h2>
<p>虽然拿到机器的第一天我就一波谷歌三件套装齐了（很感谢 ColorOS 枪口抬高一寸并没有卡什么），常用的 app 大部分也是通过 Google Play 安装，但这一个多月尤其肉身在国内的生活也让我第一次体验到安卓系统的“生态”。</p>
<p>首先一点是系统和第三方服务的深度集成。或许是国内巨头对设备厂商影响力甚巨，或许是 PM 发自肺腑地认为整合一堆乱七八糟的能带来更多便利。不需安装就能使用的卡片中心之前提过了，我第一个文化震撼就是在没什么设置的情况下，ColorOS 可以系统级追踪你的所有快递、外卖、高铁票之类，我猜测是系统直接读取了手机号接入相应 API。付出（不存在的）隐私成本后，系统追踪的快递会提示我在哪个快递柜取件，到附近直接点开系统级小程序一键开柜；屏幕上方挖空附近区域会实时显示高铁票的检票口，点开会追踪本人所有的高铁票（尽管很多并不是我自己购买的）；电话 app 可以直接追踪话费流量使用情况并充值，甚至还有专属的合作套餐；通讯录可以直接导入领英联系人（RIP 我组前 feature）。信息和入口在系统里无处不在。</p>
<p>然后是系统对巨头的主动适配。针对国民级应用微信，系统竟然会主动提供类似“视频通话美颜”、“红包助手”之类辅助性功能，游戏助手里也有针对王者荣耀复活时可以以小窗倒计时等。类似这种需求在海外产品里是很难见到或者是很<em>隐蔽</em>的<sup><a href="https://xnth97.github.io/2023/08/20/find-x6-pro#user-content-fn-2-ecc11f" id="user-content-fnref-2-ecc11f" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>。另外前些年经常看到的什么 app 连环唤醒、滥发通知、流氓软件、乱写存储等问题，可能是由于 Android 系统权限的收紧，以及 ColorOS 针对毒瘤的特定压制，在日常使用中还没有遇到过，也许道高一尺魔高一丈吧。</p>
<p>感觉在国内生态中，由于 Android 主导者 Google 的缺位，设备生产商上位成为了 OS vendor 和渠道商（各自的应用商店、推送系统等）。又由于国内互联网巨头地位过于压倒性，绝大部分用户关心少量头部国民 app 运行（适配）得好不好（<em>“为什么他的手机抢红包快？”</em>），于是形成了大而全的 OEM 和 BAT 巨头相互拉扯的奇妙环境，与国际市场运营商、OEM、Google “三权分立”的生态截然不同。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="体验">体验<a href="https://xnth97.github.io/2023/08/20/find-x6-pro#%E4%BD%93%E9%AA%8C" class="hash-link" aria-label="体验的直接链接" title="体验的直接链接">​</a></h2>
<p>体验下来，我对 Find X6 Pro 最满意的还是拍照。硬件的豪华堆料保证了随时随心选择一个焦段所见即所得，成片也更多的是大底传感器忠实记录光线而不是 Pixel 或三星浓重的计算风味。其次是素质优秀亮度饱满的屏幕，无论是回放 XDR 照片还是播放 HDR 内容都生动精确，拔高了在移动设备上享受内容的上限。尤其要说的是续航，这真的是我用过续航最为充沛的手机，重度使用一天晚上还是能有超过 30% 的电量，完全没有使用 Pixel 和前代水果时的续航焦虑。SuperVOOC 闪充本以为是个噱头，结果这 100W 充电真的太猛了，随时插上一会就能补足大量电量，甚至让早上起床发现晚上忘了充电都不再是一个问题，洗漱时间足够充满出门了，还完全可以在外面打开反向无线充电给副机或耳机补能。</p>
<p>总体来说，我觉得 Oppo 还是<del>靠堆料</del>做出了一些差异化的体验，如果未来热门旗舰机型能够海外发售、ColorOS 国际版紧跟主线 Android、精简掉特色服务，还是值得选择的。</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://xnth97.github.io/2023/08/20/find-x6-pro#footnote-label" class="hash-link" aria-label="Footnotes的直接链接" title="Footnotes的直接链接">​</a></h2>
<ol>
<li id="user-content-fn-1-ecc11f">
<p><a href="https://36kr.com/p/2256035274190472" target="_blank" rel="noopener noreferrer">OPPO 芯片一夜解散，马里亚纳 404</a> <a href="https://xnth97.github.io/2023/08/20/find-x6-pro#user-content-fnref-1-ecc11f" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-ecc11f">
<p><code>WeChat references this, only god knows why.</code> Apple <a href="https://github.com/apple-open-source-mirror/libmalloc/blob/6f8aa5a1b1ef88c45b46ff45eb2b0dd46180e023/private/make_tapi_happy.h#L82" target="_blank" rel="noopener noreferrer">libmalloc</a> <a href="https://xnth97.github.io/2023/08/20/find-x6-pro#user-content-fnref-2-ecc11f" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[年轻人的第一次 WWDC]]></title>
        <id>https://xnth97.github.io/2023/06/06/wwdc</id>
        <link href="https://xnth97.github.io/2023/06/06/wwdc"/>
        <updated>2023-06-06T21:13:04.000Z</updated>
        <summary type="html"><![CDATA[又到了一年一度苦命的 iOS 开发春晚时间。年年抽 WWDC 年年陪跑，今年终于中签一次。疫情之后原本一周的活动缩减为一整天，不过门票也从 $1500+ 直降到不要钱，于是高高兴兴地 RSVP 了。]]></summary>
        <content type="html"><![CDATA[<p>又到了一年一度苦命的 iOS 开发春晚时间。年年抽 WWDC 年年陪跑，今年终于中签一次。疫情之后原本一周的活动缩减为一整天，不过门票也从 $1500+ 直降到不要钱，于是高高兴兴地 RSVP 了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="check-in">Check-in<a href="https://xnth97.github.io/2023/06/06/wwdc#check-in" class="hash-link" aria-label="Check-in的直接链接" title="Check-in的直接链接">​</a></h2>
<p>WWDC 前几天苹果会把门票以 wallet pass 发到邮箱里，但当天（或者前一天）还是需要 check-in 换成实体的 badge 的。早上 Check-in 还发了一些 swag，像是手提袋、水杯、别针之类。之后就是漫长的安检过程，然后终于得以进入 Apple Park。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/1-3bf64d562ab89cb2b2dca3adc455d5ec.jpeg" width="1600" height="1200" class="img_ev3q"></p>
<blockquote>
<p>巨大的飞碟外面，果农人头攒动</p>
</blockquote>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/2-1cb6682fb85fa35ba357e8843ca612d0.jpeg" width="1600" height="1200" class="img_ev3q"></p>
<blockquote>
<p>Cafe Mac 内景，非常开阔，而且食堂里竟然种树</p>
</blockquote>
<p>去 Cafe Mac 拿了简单的早餐，非常朴素，确实被我司吊打了。我拍照发给苹果员工朋友吐槽，被告知“你这份我们每天买得六七刀”。匆匆吃完就去会场等着 Keynote 了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="keynote">Keynote<a href="https://xnth97.github.io/2023/06/06/wwdc#keynote" class="hash-link" aria-label="Keynote的直接链接" title="Keynote的直接链接">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/3-1ccf57f906fa65a42d3e6a63e2b8d214.jpeg" width="1600" height="1600" class="img_ev3q"></p>
<p>Keynote 开场前两三分钟时库克上台（<em>“我简单讲两句”</em>），之后十点一到就是和全球开发者们一起看视频了。每每有新产品发布或是系统新功能，观众席就会爆发出鼓掌和欢呼。但有意思的是我注意到因为开发者和媒体老师们坐的位置不太一样，经常会导致鼓掌欢呼有明显的差异。比如新产品部分 15 寸 MacBook Air 得到媒体老师们的掌声，开发者兴趣寥寥；反倒 M2 Ultra 的 Mac Pro 支持 PCIe 让我们这边为之一振，媒体老师却比较安静。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/4-880a88584471d3fe4148e3a29207e322.jpeg" width="1600" height="993" class="img_ev3q"></p>
<p>新系统新特性部分过得比较快，每讲一个功能我都心里暗暗盘算一下能做点什么，但总体来说没什么印象深刻的。唯一吓了一跳的是小岛秀夫出场的时候，我以为他和 Azure 合作的神秘项目要背刺我软上 macOS 了；结果只是死亡搁浅导剪版冷饭重制。而且这次 macOS 部分苹果又双叒叕讲了游戏，甚至简单演示了一下用 Game Porting Kit 来 debug《灵媒》的过程，感觉比起以前尬吹 Metal 的干货多了很多，小小期待一下 Apple Silicon + 3A 大作能不能带来真正的移动游戏体验。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/5-43863fb90990d27d9c944b12c13ae2a3.jpeg" width="1600" height="823" class="img_ev3q"></p>
<p>后面以“One More Thing”为引子，Vision Pro 千呼万唤始出来，会场的气氛达到高潮。visionOS 华丽而顺应直觉的设计和交互在苹果显示质量极高的大屏幕上确实美轮美奂，也令我更为好奇实机体验到底如何。后面公布价格 $3499 时，整个场地所有人发出了震惊和失望的“Oh...”不过总体来讲，这次 Keynote 内容还是很充实的，也很幸运见证了 spatial computing 的诞生。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/6-49557b3f9c858a3072cdbafd7da9adc6.JPG" width="1600" height="1200" class="img_ev3q"></p>
<blockquote>
<p>Keynote 散场后抓到了@贪玩歌姬小宁子，大型追星成功现场</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="platforms-state-of-the-union">Platforms State of the Union<a href="https://xnth97.github.io/2023/06/06/wwdc#platforms-state-of-the-union" class="hash-link" aria-label="Platforms State of the Union的直接链接" title="Platforms State of the Union的直接链接">​</a></h2>
<p>中午 Cafe Mac 供应同样非常简陋的午饭，不过种类比较多，涵盖了亚洲 / 美式 / 素食等。Cafe Mac 外面布置了一些有网线的 download station，吃饭的时候可以插上直接更新系统 / SDK。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/7-f0775dc5e888343027f47fff5ec5263f.jpeg" width="1600" height="1083" class="img_ev3q"></p>
<p>吃完午饭，回到主会场观看 Platforms State of the Union。相比于 Keynote 介绍新的 features，这个环节会更聚焦在不同平台 API / SDK 里的改动，也会直接展示一些 code snippet，算是更面向开发者，直接 show me the code。我印象最深刻的是 Swift 语言和框架的进化，比如 Swift macros、SwiftUI 和 SwiftData 的整合。但 iOS 里的新 API 对于我们还在支持 iOS 14 的产品来说，实在不知道猴年马月才能用上。</p>
<blockquote>
<p>后面才知道，这个时候媒体老师们都去体验 Vision Pro 了，🍋</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="inside-the-ring">Inside the Ring<a href="https://xnth97.github.io/2023/06/06/wwdc#inside-the-ring" class="hash-link" aria-label="Inside the Ring的直接链接" title="Inside the Ring的直接链接">​</a></h2>
<p>是一个苹果员工带我们游览大楼里一部分的活动，有点像导游带着旅行团一边逛一边讲解。果楼里到处都是玻璃和整块的混凝土，白色灰色的色调，充斥着一股性冷淡拒人千里之外的气息。TBH 我更喜欢我司的氛围，暖色灯光、小绿植和很多软 fufu 的垫子，更为 chill 和 welcoming 一点。我比较喜欢他们楼的是有些大天井直接把天光送到楼里，感觉又省电又舒服。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/8-301419aeddc076b10c5a09fef539e484.jpg" width="1600" height="536" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="meet-with-team">Meet with Team<a href="https://xnth97.github.io/2023/06/06/wwdc#meet-with-team" class="hash-link" aria-label="Meet with Team的直接链接" title="Meet with Team的直接链接">​</a></h2>
<p>有很多苹果工程师穿着蓝色 T 恤一堆一堆地按组分布，开发者可以去自由勾搭问些问题。我分别找了 SwiftUI 和 SwiftData 组问了一些我感兴趣的问题（而且第二天就在 session 视频里看到了交谈过的大哥），对苹果这些闭源的框架，能获得一些第一手的建议 / best practices 还是蛮有帮助的，也很凑巧地和一位推油面基了一下。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="design-awards">Design Awards<a href="https://xnth97.github.io/2023/06/06/wwdc#design-awards" class="hash-link" aria-label="Design Awards的直接链接" title="Design Awards的直接链接">​</a></h2>
<p>Design Awards 可能是一个唯一现场 live 的活动，大概就是分很多品类给 app 和游戏颁发设计奖项，看游戏部分的时候有种低配 TGA 的感觉。《暗黑破坏神：不朽》能获得提名我也是没想到，可能 30% 苹果税是真的赚了不少钱。今年游戏部分大奖没记错的话归于《生化危机 8》，目测明年就是《死亡搁浅导剪版》了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="special-event">Special Event<a href="https://xnth97.github.io/2023/06/06/wwdc#special-event" class="hash-link" aria-label="Special Event的直接链接" title="Special Event的直接链接">​</a></h2>
<p>之前邮件里说了晚上有个 Special Event，因为听以前去过的朋友说是蹦迪，本来没有什么期待。但早上 Keynote 之后有高管说晚上会给 Developer 们近距离接触 Vision Pro，不免直接期待拉满了。这也是我们唯一一次能进入 Steve Jobs Theater 的机会。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/9-2d48efc2345a04023a25356a4185ece7.jpg" width="1600" height="900" class="img_ev3q"></p>
<blockquote>
<p>似曾相识的内景，感觉某些发布会视频是在这里录的</p>
</blockquote>
<p>第一层展示的是常规迭代的其他硬件，能感觉到大家都没什么兴趣，三三两两稀稀拉拉地聚在设备前。我唯一驻足看了看的是 M2 Ultra 的 Mac Pro，这机箱也是太空旷了，主板上也是干干净净的。一颗巨大的 SoC，我禁不住想这良率和成本得多恐怖。PCIe 插槽不能插 GPU，那估计只有需要 PCIe audio interface 的音乐制作人们会买了。毫无内存插槽，史诗级开倒车。三个大风扇看着非常孤单，一个吹目测不到 100W 的 SoC，两个不插 PCIe 的话就吹了个寂寞。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/10-ea4db4f309402007cd79a13fc6ac1e42.jpg" width="1600" height="1200" class="img_ev3q"></p>
<p>沿圆形旋转楼梯向下就是 Vision Pro 的展示空间（也就是各位在 YouTuber 们视频里见到的地方），每一台样机前都挤满了人。真的费了好大劲挤过去，又被工作人员反复强调只能看不能摸🫠。近距离接触到的时候我的第一感觉是这东西就像个滑雪眼镜，看起来似乎比视频里显着亲切一些。仔细看了一圈，作为拥有 Industrial Engineering 学位的人，我不得不感叹这玩意的制造加工精度估计高得令人发指。流畅圆润的表面曲率，极其微小且严密一致的装配公差，玻璃与金属材质均匀浑然一体，密密麻麻的传感器阵列也几乎不可见。这东西简直就像你会买到的 iPhone 一样可靠，只不过恐怖的是这仅仅是一台尚未发售甚至可能尚未量产的原型机。不知道是苹果特别挑了体质好的产品，还是在 pre-production 阶段已经实现碾压大部分品牌的 build quality 了。我注意到的另一点是，很明显地，朝向外面的那个屏幕 PPI 非常低，大果粒像素点清晰可见。不过可以理解，只是为了给别人显示一个合成的假眼睛（<em>我还是觉得 creepy</em>）也不需要 retina，成本控制嘛。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/11-8834fb619d3abc57127053baadb48770.jpg" width="1600" height="1200" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="developer-center">Developer Center<a href="https://xnth97.github.io/2023/06/06/wwdc#developer-center" class="hash-link" aria-label="Developer Center的直接链接" title="Developer Center的直接链接">​</a></h2>
<p>第二天下午的 Developer Center session 是在一栋单独的建筑，基本就是 Vision Pro 的工程师们讲了一些 visionOS 的基础概念，以及现场带着搓 hello world。但可惜的是还是没有实机，coding 全是在 simulator 上完成的。有意思的是我看到他们的 build 里还是叫 xrOS，感觉像是最后一刻临时改的名字。SwiftUI、RealityKit 和 ARKit 都不是全新的框架，代码读起来倒也没有什么障碍。不过当演示如何用 Reality Composer Pro 去做材质时我就一脸懵了，听完感觉像是回到学校上了一节游戏开发课。我印象中比较深刻的是苹果提到为了保证设计的显示效果，他们有些会议室电视音响都是有 Dolby Vision 和 Dolby Atmos 认证的，果然是钞能力才能保证对细节的精益求精。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/12-b6001f1fb31c0548c7794cb566d03631.jpg" width="1600" height="900" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="最后">最后<a href="https://xnth97.github.io/2023/06/06/wwdc#%E6%9C%80%E5%90%8E" class="hash-link" aria-label="最后的直接链接" title="最后的直接链接">​</a></h2>
<p>这次 WWDC 之行还是蛮有意思的，很高兴认识了一些新朋友，而且能亲眼看到这么一家巨无霸公司发布一个新产品品类也不是天天都有的机会，非常幸运。</p>
<p>老实讲也挺酸的，发现我司又起个大早赶个晚集。我用过 HoloLens，硬件设计上做工也可，但完全是一个工业用品，像一把螺丝刀、一台示波器一样的工具；而相比之下 Vision Pro 完全是一个高端、精致的消费奢侈品，软件体验可能拉开的就更远了。这两个产品有很多共性——主要 UI 以 AR 模式呈现、in-house 的软件和硬件、大量的传感器、可以无控制器使用、重点不在游戏、兼容平板 app……但也许是时代，也许是公司 DNA 使然，苹果更展示了定义计算平台交互逻辑的能力，正如鼠标和多点触控的发明一样。Vision Pro 的价格估计让它不会卖的很好，但现时它的确是这个星球上最接近下一代个人计算形态的产物。希望能尽快看到 spatial computing 真正的 killer app，期待。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="photo" term="photo"/>
        <category label="coding" term="coding"/>
        <category label="ios" term="ios"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[言出法随：Prompt Engineering 笔记]]></title>
        <id>https://xnth97.github.io/2023/05/10/prompt-engineering</id>
        <link href="https://xnth97.github.io/2023/05/10/prompt-engineering"/>
        <updated>2023-05-10T20:11:00.000Z</updated>
        <summary type="html"><![CDATA[近几个月最火热的话题莫过于以大语言模型（LLM）为代表的 GAI 了我太帅喽我太狂喽。AI 能够根据指令生成回答，但回答的质量极大程度上取决于指令的质量。正好 Andrew Ng 发布了 Prompt Engineering for Developers，周末学习一个记录一下。]]></summary>
        <content type="html"><![CDATA[<p>近几个月最火热的话题莫过于以大语言模型（LLM）为代表的 GAI 了<del>我太帅喽我太狂喽</del>。AI 能够根据指令生成回答，但回答的质量极大程度上取决于指令的质量。正好 Andrew Ng 发布了 <a href="https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/" target="_blank" rel="noopener noreferrer">Prompt Engineering for Developers</a>，周末学习一个记录一下。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述">概述<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E6%A6%82%E8%BF%B0" class="hash-link" aria-label="概述的直接链接" title="概述的直接链接">​</a></h2>
<p>大语言模型主要分为 Base LLM 和 Instruction Tuned LLM。Base LLM 通过预测下一个词和简单的损失函数来输出结果，而 Instruction Tuned LLM 则可以根据指令生成文本。背后的关键训练范式则是 RLHF，Reinforcement Learning from Human Feedback，根据人类反馈来强化学习。<a href="https://huggingface.co/blog/zh/rlhf" target="_blank" rel="noopener noreferrer">huggingface 的这篇文章</a>很好地解释了 RLHF 是如何在 LLM 领域取得成果的。</p>
<p>deeplearning.ai 的视频提供了基于 OpenAI 的简单 playground。但我用的是 Azure OpenAI 提供的 gpt-35-turbo 模型，所以用 Go 也实现了一个简单的程序，具体代码附在<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#playground">本文末尾</a>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="原则">原则<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E5%8E%9F%E5%88%99" class="hash-link" aria-label="原则的直接链接" title="原则的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="清晰具体的提示">清晰具体的提示<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E6%B8%85%E6%99%B0%E5%85%B7%E4%BD%93%E7%9A%84%E6%8F%90%E7%A4%BA" class="hash-link" aria-label="清晰具体的提示的直接链接" title="清晰具体的提示的直接链接">​</a></h3>
<p>要给模型清晰而具体（clear and specific）的提示。</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>注意</div><div class="admonitionContent_BuS1"><p>clear != short</p></div></div>
<p>一些常用的最佳实践如：</p>
<ol>
<li>使用分隔符号，例如 <code>"""</code>， <code>```</code>，<code>---</code>，<code>&lt;&gt;</code>，<code>&lt;tag&gt;</code></li>
</ol>
<p>将希望 AI 处理的部分明确地与 prompt 区分开。这种方式也很适合基于 AI 开发 app 的场景，比如可以利用不同的 prompt template 来处理用户的输入。比如如果想做一个根据文本给出摘要的 app，prompt 可以是：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Summarize the text delimited by triple backticks into a single sentence.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">```{text}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>要求结构化的输出，比如 JSON，HTML</li>
</ol>
<p>明确要求 AI 返回数据结构而不是 plain text，这样 app 可以简单 parse 出 AI 回答里不同的部分。比如<a href="https://github.com/xnth97/how/blob/9f60dd4038e8caf30d1ac42d21d0f76ba0c4f5dd/main.go#L103" target="_blank" rel="noopener noreferrer">我的小项目 how 里</a>明确要求 AI 返回 JSON，这样可以根据不同 key 的不同内容做下一步处理。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Generate a list of three made-up book titles along with their authors and genres. </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Provide them in JSON format with the following keys: </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">book_id, title, author, genre.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>检查是否满足条件</li>
</ol>
<p>GAI 有时在没有正确结果的时候会胡编乱造，这时我们需要提供一个明确的指令，要求“不知道就别说”。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">You will be provided with text delimited by triple quotes. </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">If it contains a sequence of instructions,</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">re-write those instructions in the following format:</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Step 1 - ...</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Step 2 - ...</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">...</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Step N - ...</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">If the text does not contain a sequence of instructions,</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">then simply write "No steps provided."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="4">
<li>给模型成功完成任务的示例，之后要求模型执行任务。</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Your task is to answer in a consistent style.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">&lt;child&gt;: Teach me about patience.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">&lt;grandparent&gt;: The river that carves the deepest</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">valley flows from a modest spring; the</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">grandest symphony originates from a single note;</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">the most intricate tapestry begins with a solitary thread.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">&lt;child&gt;: Teach me about resilience.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="给模型思考的时间">给模型思考的时间<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E7%BB%99%E6%A8%A1%E5%9E%8B%E6%80%9D%E8%80%83%E7%9A%84%E6%97%B6%E9%97%B4" class="hash-link" aria-label="给模型思考的时间的直接链接" title="给模型思考的时间的直接链接">​</a></h3>
<p>让模型想一会，不然如果任务过于复杂，模型可能操之过急给出错误的答案。常用的实践：</p>
<ol>
<li>按步骤拆分/指定任务，而不是直接给出一个复杂的任务。</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Perform the following actions: </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">1 - Summarize the following text delimited by triple backticks with 1 sentence.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">2 - Translate the summary into French.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">3 - List each name in the French summary.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">4 - Output a json object that contains the following keys: </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">french_summary, num_names.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>在模型着急给出结论之前，让它先给出自己的解决方法。</li>
</ol>
<p>举的例子是让模型评判一个学生的对数学题解法是不是正确，模型很容易就被学生解法带偏，认为输入是正确的。这时更合适的 prompt 是：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">First, work out your own solution to the problem. </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Then compare your solution to the student's solution</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">and evaluate if the student's solution is correct or not. </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Don't decide if the student's solution is correct until </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">you have done the problem yourself.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="llm-的局限性">LLM 的局限性<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#llm-%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7" class="hash-link" aria-label="LLM 的局限性的直接链接" title="LLM 的局限性的直接链接">​</a></h3>
<p>大语言模型的幻觉（hallucination）：可能给出看起来有道理但实际上不正确的输出。为了避免幻觉，需要给模型足够的相关信息，然后明确要求它根据信息回答问题。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="迭代">迭代<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E8%BF%AD%E4%BB%A3" class="hash-link" aria-label="迭代的直接链接" title="迭代的直接链接">​</a></h3>
<p>不断迭代 prompt。一个良好的工作流程：</p>
<ul>
<li>写出清晰明确的 prompt</li>
<li>分析为什么输出没有给出想要的结果</li>
<li>调整你的想法和 prompt</li>
<li>重复迭代</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/iterative-a13000b62118faf8ad467235a661178e.png" width="1036" height="468" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="能力">能力<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E8%83%BD%E5%8A%9B" class="hash-link" aria-label="能力的直接链接" title="能力的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="归纳">归纳<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E5%BD%92%E7%BA%B3" class="hash-link" aria-label="归纳的直接链接" title="归纳的直接链接">​</a></h3>
<p>LLM 可以很好地总结归纳一段文本，以下技巧可以更好地让模型输出归纳结果。</p>
<ol>
<li>给出字数/句数限制</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Your task is to generate a short summary of a product</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">review from an ecommerce site.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Summarize the review below, delimited by triple </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">backticks, in at most 30 words. </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Review: ```{prod_review}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>专注于你的目的</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Your task is to generate a short summary of a product</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">review from an ecommerce site to give feedback to the</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">shipping department.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Summarize the review below, delimited by triple </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">backticks, in at most 30 words. </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Review: ```{prod_review}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意这段 prompt 比上一段多出了对目的的描述（<em>to give feedback to the shipping department</em>），这有助于模型生成更具有针对性的答案。</p>
<ol start="3">
<li>尝试用词 <code>extract</code> 而不是 <code>summarize</code></li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="推断">推断<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E6%8E%A8%E6%96%AD" class="hash-link" aria-label="推断的直接链接" title="推断的直接链接">​</a></h3>
<p>记得以前上学时常见的作业是训练一个文本分类器，给一段客户 review 判断是 positive 还是 negative。传统机器学习方法需要收集标注好的数据集、训练模型并部署模型，而且对于不同的任务需要不同的模型。利用 LLM，我们通过 prompt 就可以生成不同的结果，one model, one API。</p>
<ol>
<li>二元情绪识别（positive / negative）</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">What is the sentiment of the following product review, </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">which is delimited with triple backticks?</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Give your answer as a single word, either "positive" </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">or "negative".</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Review text: '''{lamp_review}'''</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪��贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>识别文本中包含的情绪种类</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Identify a list of emotions that the writer of the</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">following review is expressing. Include no more than</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">five items in the list. Format your answer as a list of</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">lower-case words separated by commas.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Review text: '''{lamp_review}'''</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>提取特定信息，并结构化输出</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Identify the following items from the review text:</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">- Item purchased by reviewer</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">- Company that made the item</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">The review is delimited with triple backticks.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Format your response as a JSON object with</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">"Item" and "Brand" as the keys.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">If the information isn't present, use "unknown"</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">as the value.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Make your response as short as possible.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		  </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Review text: '''{lamp_review}'''</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>更进一步，我们可以利用复杂的 prompt 来同时执行多个推断任务。比如上文第一段可以改为</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Identify the following items from the review text: </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">- Sentiment (positive or negative)</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">- Is the reviewer expressing anger? (true or false)</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">- Item purchased by reviewer</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">- Company that made the item</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="变换">变换<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E5%8F%98%E6%8D%A2" class="hash-link" aria-label="变换的直接链接" title="变换的直接链接">​</a></h3>
<p>文本变换包括很多种形式：</p>
<ul>
<li>语言的变换，翻译为另一种语言</li>
<li>语法和拼写的检查</li>
<li>格式的变换，比如把 HTML 解析为 JSON</li>
</ul>
<ol>
<li>翻译</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Translate the following English text to Spanish:</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">```{text}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>进一步，我们不必指定输入的语言，这样便得到了一个 universal translator。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Translate the following text to English</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">```{text}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>语气的变换</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Translate the following from slang to a business letter: </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">'Dude, This is Joe, check out this spec on this standing lamp.'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>输出为：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Dear Sir/Madam,</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">I hope this letter finds you well. My name is Joe and I would like to bring to your attention a particular specification on a standing lamp that I believe would be of interest to you.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Thank you for your time and consideration. I look forward to hearing from you soon.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Sincerely,</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Joe</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>格式转换</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Translate the following JSON to an HTML table with column headers and title:</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">{data_json}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="4">
<li>拼写和语法检查</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Proofread and correct the following text and rewrite the corrected version.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">If you don't find and errors, just say "No errors found".</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Don't use any punctuation around the text:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="扩展">扩展<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E6%89%A9%E5%B1%95" class="hash-link" aria-label="扩展的直接链接" title="扩展的直接链接">​</a></h3>
<p>通过有限的输入扩展一篇文本，比如让 AI 写封信，写个文章，写首诗之类。AI 可以成为你的 brainstorm partner，但也可能导致问题（spam）。负责任地使用生成式 AI。</p>
<p>举个栗子，我们想做个 AI 客服来自动生成对用户 review 的评价。基于之前学到的内容：</p>
<ul>
<li>客户输入需要用分隔符隔开</li>
<li>给出明确的任务：对 positive review，感谢客户；否则给出进一步建议</li>
<li>避免幻觉：要求 AI 利用到输入的信息</li>
<li>指定 AI 的语气：concise and professional tone</li>
<li>负责任：告知用户这是由 AI 生成的</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">You are a customer service AI assistant.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Your task is to send an email reply to a valued customer.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Given the customer email delimited by ```,</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Generate a reply to thank the customer for their review.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">If the sentiment is positive or neutral, thank them for</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">their review.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">If the sentiment is negative, apologize and suggest that</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">they can reach out to customer service. </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Make sure to use specific details from the review.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Write in a concise and professional tone.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Sign the email as `AI customer agent`.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Customer review: ```{review}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>OpenAI API 中有一个重要的参数 <code>temperature</code>。<code>temperature</code> 表示模型发散/随机的程度。值越小，模型越倾向于选择概率上最高的预测；值越大，模型越倾向随机选择。</p>
<p>举个例子，我们模型学到的知识里如果 my favorite food 对应 50% 概率是 pizza、30% 是 sushi、5% 是 taco。这时问它，what's my favorite food?</p>
<ul>
<li><code>temperature = 0</code>：模型永远输出 pizza</li>
<li><code>temperature = 0.3</code>：模型很大概率输出 pizza，偶尔也会输出 sushi</li>
<li><code>temperature = 0.7</code>：3 种答案均会较为随机地出现</li>
</ul>
<p>针对不同任务要选择合适的 <code>temperature</code>：</p>
<ul>
<li>0：适合需要准确、可预测、可靠的任务</li>
<li>0.3 - 0.7：适合需要创造力、多样性的任务</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="聊天机器人">聊天机器人<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA" class="hash-link" aria-label="聊天机器人的直接链接" title="聊天机器人的直接链接">​</a></h3>
<p>LLM 最常见的场景之一就是 ChatGPT 形式的聊天机器人了。一段对话的输入结构类似于：</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">  </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'role'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'system'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'content'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'You are an assistant that speaks like Shakespeare.'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'role'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'user'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'content'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'tell me a joke'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'role'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'assistant'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'content'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'Why did the chicken cross the road'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'role'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'user'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token string-property property" style="color:hsl(5, 74%, 59%)">'content'</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'I don\'t know'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>对话中有三种消息（<code>role</code> 的值）：</p>
<ul>
<li><code>system</code>：总体的指令：设定模型的行为</li>
<li><code>user</code>：用户输入</li>
<li><code>assistant</code>：模型输出</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/chatbot-4beeb9c3fe1b86277303b28a3bca0307.png" width="1244" height="236" class="img_ev3q"></p>
<p>和 LLM 的每一次对话都是一次单独的交互，必须要提供所有相关的信息。如果希望模型能根据上下文输出，需要将前文的 exchange of context 也一并包括在对模型的输入中。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="playground">Playground<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#playground" class="hash-link" aria-label="Playground的直接链接" title="Playground的直接链接">​</a></h2>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">import</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token string" style="color:hsl(119, 34%, 47%)">"context"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token string" style="color:hsl(119, 34%, 47%)">"errors"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token string" style="color:hsl(119, 34%, 47%)">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token string" style="color:hsl(119, 34%, 47%)">"io"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token string" style="color:hsl(119, 34%, 47%)">"github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token string" style="color:hsl(119, 34%, 47%)">"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token comment" style="color:hsl(230, 4%, 64%)">// Fill in your Azure credentials.</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token plain"> baseUrl </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"https://EXAMPLE.openai.azure.com"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token plain"> deploymentId </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"gpt-35-turbo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token plain"> apiKey </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"AZURE_API_KEY"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">main</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	keyCredential</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> err </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> azopenai</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">NewKeyCredential</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">apiKey</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> err </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	client</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> err </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> azopenai</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">NewClientWithKeyCredential</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">baseUrl</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> keyCredential</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> err </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	ctx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> context</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Background</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	prompt </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">`</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	Your task is to answer in a consistent style.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	&lt;child&gt;: Teach me about patience.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	&lt;grandparent&gt;: The river that carves the deepest</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	valley flows from a modest spring; the</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	grandest symphony originates from a single note;</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	the most intricate tapestry begins with a solitary thread.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	&lt;child&gt;: Teach me about resilience.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token string" style="color:hsl(119, 34%, 47%)">	`</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token function" style="color:hsl(221, 87%, 60%)">getAnswer</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">client</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">ctx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> prompt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">getAnswer</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">client </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">azopenai</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">Client</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> ctx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">context</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> prompt </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> prompt </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">""</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	req </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> azopenai</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">ChatCompletionsOptions</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		DeploymentID</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> deploymentId</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		MaxTokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">    to</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Ptr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token function" style="color:hsl(221, 87%, 60%)">int32</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">400</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		Messages</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain">azopenai</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">ChatMessage</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">			</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">				Role</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">    to</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Ptr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">azopenai</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">ChatRoleUser</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">				Content</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">prompt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">			</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		Temperature</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> to</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Ptr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token function" style="color:hsl(221, 87%, 60%)">float32</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">0.7</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	resp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> err </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> client</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">GetChatCompletionsStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ctx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> req</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> err </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	stream </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> resp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">ChatCompletionsStream</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">defer</span><span class="token plain"> stream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Close</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		resp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> err </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> stream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Read</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> errors</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Is</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">err</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> io</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">EOF</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">			</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">_</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> choice </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">range</span><span class="token plain"> resp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">Choices </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">			</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> choice</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">Delta</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">Content </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">				fmt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Print</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">choice</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">Delta</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">Content</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">			</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">		</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a href="https://xnth97.github.io/2023/05/10/prompt-engineering#%E7%BB%93%E8%AF%AD" class="hash-link" aria-label="结语的直接链接" title="结语的直接链接">​</a></h2>
<p>通过对 prompt engineering 的初步学习，我利用这些最佳实践更新了一下项目中的 prompt，确实输出质量得到了质的提升。随着大模型的复杂度继续发展，究竟我们是更需要精妙地构造 prompt 呢，还是模型可以聪明到能够理解我们真实意图、即便是模糊的 prompt 呢？</p>
<p>大模型涌现出的能力到底是不是一种智能？我不知道。好几个月前内部测试的时候，我和 <code>text-davinci-003</code> 有这样一段对话：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">user: 你觉得人类的生活有意义吗？</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">assistant: 我觉得人类的生活有意义，因为人类有情感，有心，有灵魂，有自我，有想法，有意志，</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">           有选择，有目标，有梦想，有信仰，有爱，有友情，有家庭，有社会，有文化，有艺术，</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">           有科学，有哲学，有宗教，有历史，有未来。</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022 这一年盘点]]></title>
        <id>https://xnth97.github.io/2023/01/05/annual</id>
        <link href="https://xnth97.github.io/2023/01/05/annual"/>
        <updated>2023-01-05T23:00:16.000Z</updated>
        <summary type="html"><![CDATA[2022 这一年就这么过去了，照例盘点一下我的这一年。]]></summary>
        <content type="html"><![CDATA[<p>2022 这一年就这么过去了，照例盘点一下我的这一年。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="影视">影视<a href="https://xnth97.github.io/2023/01/05/annual#%E5%BD%B1%E8%A7%86" class="hash-link" aria-label="影视的直接链接" title="影视的直接链接">​</a></h2>
<p>今年只看了寥寥几部电影，看的剧也基本集中于 Disney+ 和果电视。印象深刻的不多，有《奇异博士》里光照会 X 教授坐着悬浮轮椅出场，有《安多》里阿尔达尼天眼的视觉奇观和反抗的高潮迭起，有《女浩克》和马律师职场对喷的惊喜联动，有《绝地传奇》里第五集本以为是温馨师徒小故事却突然接到《克隆战争》大结局的强烈对比与震撼，有《欧比旺》时隔近20年再次看到人品王和安纳金的感慨，有《边缘行者》再回夜之城却被一曲《I Really Want To Stay At Your House》反复捅刀……但说了这么多，今年印象最深刻的当之无愧是《妈的多元宇宙》。视觉手法独到老辣，库布里克直呼内行；故事情节天马行空，直戳老中内心深处。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="游戏">游戏<a href="https://xnth97.github.io/2023/01/05/annual#%E6%B8%B8%E6%88%8F" class="hash-link" aria-label="游戏的直接链接" title="游戏的直接链接">​</a></h2>
<p>今年玩的游戏好像很多并不是 2022 年发售的，最热门的一些，像是《死喷烂涂 3》、《猎天使魔女 3》、《战神 5》、《艾尔登法环》一个都没有玩。玩过的游戏里，《双点校园》轻松无厘头，《SHENZHEN I/O》硬核下班写汇编。《只狼》在反复的“死”字打了一半流程之后忍无可忍开了 mod 纯纯享受剧情，《乐高星球大战》就是完全轻松愉快砍瓜切菜。《幽灵线东京》日式都市传说加现代百鬼夜行，谁不喜欢单手搓法印祛魔？《女神异闻录 5R》JRPG巅峰，又有谁不喜欢高卷杏（后知后觉打完才知道 CV 竟然是我中二时最爱的水树奈奈）？《High on Life》瑞克与莫蒂制作人打造，手感爽快画风诡谲，外星神经病 NPC 与毒舌吐槽枪，内味太冲了扑面而来。《死亡搁浅导剪版》前 10 小时很震撼，孤独地存活过时间雨后响起一曲《Bones》，这就是妥妥的第九艺术（可惜 Low Roar 乐队主唱 Ryan Karazija 在 2022 年 10 月去世，RIP）！但之后熟悉以后我就放飞了，见到 BT 就等着被拖走击杀大狮子捡晶体，见到米尔人就去洗劫米尔人营地，简直比 BT 还 BT，比米尔人还米尔人。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/bones-feat-jofridur/1496871665?i=1496871744&amp;l=zh"></iframe>
<p>今年我最喜欢的游戏是《Stray》。谁能拒绝一只小猫咪呢？《Stray》属于那种一眼爱上的游戏，整体的氛围十分克制却又恰到好处，每一处灯光的引导、每一个物件的摆放、所有的纹理质感均细致入微精心设计，带你一瞬间进入这个压抑而生机勃勃的世界。关于《Stray》的教科书一般的美术和关卡设计我无力赞美更多了，知乎答主枕鹤的<a href="https://zhuanlan.zhihu.com/p/544157892" target="_blank" rel="noopener noreferrer">从《Stray》拆解游戏关卡设计和美术</a>鞭辟入里。我甚至非常喜欢这个仅有 5 小时的小故事。流落下城的小猫和城市里冰冷又有人情味的机器居民们产生微妙的联系，曾为人类的机械伙伴一路同行展开看似轻巧最后却生死攸关的冒险，以至于结尾充满力量的温暖和肆无忌惮的希望。我太喜欢这个故事了。在当时墙内整天封城的压抑下，这个故事传达的希望是那么的弥足珍贵。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/stray-79c0e8492eaf77c63ce295e97b78796c.jpg" width="1920" height="1080" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="音乐">音乐<a href="https://xnth97.github.io/2023/01/05/annual#%E9%9F%B3%E4%B9%90" class="hash-link" aria-label="音乐的直接链接" title="音乐的直接链接">​</a></h2>
<p>今年史诗般地看了四场演唱会：女娃的《Just Me ( )I-DLE》、梦龙的《Mercury》、粉墨的《Born Pink》和莫名蹭了个张艺兴巡演。梦龙和张艺兴我没啥粉丝滤镜，只是梦龙的歌倒是都会唱，跟大家一起嗨的开心一些。作为一个老 Blink 粉墨巡演期待太久了，不过抢不到位置好的票加上场地过大，感觉像是远远地参加了一场 sing along。(G)I-DLE 本来我没啥期待的，只是因为知道是谁就买了票；结果我有个沉迷 KPOP 和该团的大学朋友整天跟我按头安利，听着听着反倒越听越上头。演出当天因为场地小位置也好简直贴脸，娟总气场和观众能量让我瞬间坑底躺平。有一说一也确实盘靓条顺业务优秀，是我看演出现场粉丝滤镜最厚也是最嗨的一次了，看完被巨大的 post-concert depression 笼罩连续低沉好几天。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/gidle-faeb180efc88e1d778c0c3f3da34aa5f.jpg" width="2048" height="1462" class="img_ev3q"></p>
<blockquote>
<p>我和娟总的合照呜呜呜</p>
</blockquote>
<p>抛开现场加成不谈，女娃今年两张专辑《I Never Die》和《I Love》我都挺喜欢的，《My Bag》的张扬嘻哈、《Nxde》的打破偏见、《TOMBOY》的女性议题，都能看到娃作为创作者的追求。我以前看这些女团啥的主要是嗑脸，娃这种全专自己作词作曲制作且有艺术表达的确实是一股清流，块娟烟，瑞思拜。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/tomboy/1611504686?i=1611504817&amp;l=zh"></iframe>
<p>中文歌主要就听了新说唱，《脏艺术家》太顶了，你狗哥还是你狗哥。不过今年让我一改对万妮达的印象，原来风格这么多元也这么能唱的。“老子一抬手就摸得到天”我单曲循环了好久，每次都是天灵盖一阵酥爽，《ONE LIFE ONLY》也是我今年很惊喜的一张专辑。年底我初高中很喜欢的 alan 竟然也发了出道十五周年精选集，里面有好几首 remastered 版本的十几年前我买过打口碟的单曲，属实是死去的记忆突然攻击我了。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/%E7%BE%A4%E9%9D%92%E3%81%AE%E8%B0%B7-2022-remastered/1654653359?i=1654653370&amp;l=zh"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="剁手">剁手<a href="https://xnth97.github.io/2023/01/05/annual#%E5%89%81%E6%89%8B" class="hash-link" aria-label="剁手的直接链接" title="剁手的直接链接">​</a></h2>
<p>今年似乎没有买太多东西。年初捡了矿老板去掉 GPU 的 Alienware R10，12 核锐龙又自己加了内存和 SSD，性能澎湃风扇呼呼响又灯大灯亮灯会闪，用到现在非常满意。买了个我司自家 Windows Dev Kit 2023 作为一台极致静音的工作机，8cx gen3 性能也算是超出我的预期，外观精致小巧，日常使用还挺舒服（<a href="https://xnth97.github.io/2022/11/06/windows-dev-kit">详细体验</a>）。年中适马推出 Sigma 24mm f1.4 DN DG，24mm GM 平替让我头脑一热购入以替代老旧 Samyang 14mm f2.8；虽然从超广角换为普通广角，光圈、光学素质和对焦均史诗级加强，可惜至今还没有很好的机会发挥它的实力。最快乐的莫过于定了 8 个月的 Steam Deck 终于到货了！我总感觉一样的游戏掌机上玩反而更快乐。《P5R》我大概有 50 小时是在 Steam Deck 上玩的，梦回初中拿 PSP 玩 JRPG 的感觉。更不用提《初音未来 Project DIVA》、《麻布仔大冒险》、《怪物猎人世界》这些原本我最早接触系列就是在掌机上的作品，捧起 Steam Deck 瘫在沙发上、床上、飞机上、沙滩上，随时游戏，随时快乐。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/steamdeck-cbd907f7c0636599721388e79f82af51.jpg" width="1920" height="1440" class="img_ev3q"></p>
<blockquote>
<p>掏出所有掌机合个影</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="旅行">旅行<a href="https://xnth97.github.io/2023/01/05/annual#%E6%97%85%E8%A1%8C" class="hash-link" aria-label="旅行的直接链接" title="旅行的直接链接">​</a></h2>
<p>年初去佛罗里达 Disneyworld 和环球影城，新的星战园区让我欲罢不能流连忘返，现代科技加持的游乐体验也太还原电影了，唯一遗憾是没有在商店买把收藏级光剑回家（明年 flag）。年中对象回家，罕有地有了几次自己独自开车旅行的经历。去了 Lassen Volcanic National Park，当时公园还不对车辆开放，没有几个游客且可以 hike on highway。花几天时间一个人走在雪山环抱之间，与内心的自己对话，从独处中汲取平静和能量。去了 <a href="https://xnth97.github.io/2022/09/01/mammoth-lakes">Mammoth Lake 观星</a>，可惜当时还没入手 Sigma f1.4，噪点惨不忍睹。秋天去了可爱岛，用环球客加积分换了几天 Grand Hyatt Kauai 奢靡了一把。年底又去了新墨西哥的 White Sands National Park 和 Carlsbad Caverns National Park，不过天气不遂人意而没有尽兴，Santa Fe 的 Meow Wolf 倒是新奇有趣，像是现实版的 Rick and Morty。今年最满意的照片倒是在家门口东湾盐田拍摄的，夏天细菌滋生，血红的盐湖和高耸的电线杆要素过多浓浓的痞子风格，也因此有幸获了 EVA 中国官方的一个小奖。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/eva-bf578b722088baee1926906ae94064be.jpg" width="2048" height="1394" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="https://xnth97.github.io/2023/01/05/annual#%E5%85%B6%E4%BB%96" class="hash-link" aria-label="其他的直接链接" title="其他的直接链接">​</a></h2>
<p>在工地帮忙 host 了 iOS Dev at Scale summit，早晚在门口迎来送往，认识了很多业界其他公司的同事，一起交流在几千台机器的集群上构建这个星球上最复杂的几个亿级代码 app。</p>
<p>联系了一些老朋友，跨时区举办了一次视频云喝酒，似乎毕业后再没机会那样畅聊三四小时。和同在湾区的高中大学研究生的同学校友们吃了几次饭，爬爬山烧烧烤叙叙旧。</p>
<p>认识了一些新朋友，工地的新老工友或因共事或因下工一起玩，网络上的推油象友群友素未谋面却经常感觉很近。</p>
<p>新的一年，希望能回家摸摸我的猫。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows Dev Kit 2023 简要体验]]></title>
        <id>https://xnth97.github.io/2022/11/06/windows-dev-kit</id>
        <link href="https://xnth97.github.io/2022/11/06/windows-dev-kit"/>
        <updated>2022-11-06T00:21:22.000Z</updated>
        <summary type="html"><![CDATA[今年 Build 大会上我软宣布了 Project Volterra，一个 arm64 架构的 Windows 开发机。作为前 Intel NUC 用户、并曾于 Windows 7 时代给家里装过 ITX 的 HTPC 的小尺寸主机爱好者，我迅速被它紧凑的设计和 ARM 架构吸引。收到机器一周多的时间，它替代了 Alienware R10 成为了我桌面上的主力机。以下是一些简要体验。]]></summary>
        <content type="html"><![CDATA[<p>今年 Build 大会上我软宣布了 <a href="https://www.youtube.com/watch?v=yICVNta8jMU" target="_blank" rel="noopener noreferrer">Project Volterra</a>，一个 arm64 架构的 Windows 开发机。作为前 Intel NUC 用户、并曾于 Windows 7 时代给家里装过 ITX 的 HTPC 的小尺寸主机爱好者，我迅速被它紧凑的设计和 ARM 架构吸引。收到机器一周多的时间，它替代了 Alienware R10 成为了我桌面上的主力机。以下是一些简要体验。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="开箱">开箱<a href="https://xnth97.github.io/2022/11/06/windows-dev-kit#%E5%BC%80%E7%AE%B1" class="hash-link" aria-label="开箱的直接链接" title="开箱的直接链接">​</a></h2>
<p>大概是非消费级产品缘故，包装极为简陋，一个硬纸壳快递盒就是全部包装了。Windows 而非 Surface 的 logo 清楚地显示出开发机的定位。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/package-72dd1775eccafd7b0a0e07991b832f5a.jpg" width="1488" height="720" class="img_ev3q"></p>
<p>取出机器，一个黑色的巴掌大的小盒子，基本体积可以对标 Mac Mini。回收塑料机身、镜面田牌 logo，做工精致并不廉价。边缘直上直下没有倒角，但由于不是金属，并没有 Mac 的割手感。设计非常对我胃口，可以无感地摆放在家中的任意角落。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/machine-829193ff0d084d3371fc9904be0826f5.jpg" width="1440" height="1080" class="img_ev3q"></p>
<p>Windows Dev Kit 2023 基于骁龙 8cx gen3，板载 32GB RAM 和可更换的 512GB NVME SSD（什么叫良心啊果子）。接口齐全，背部是电源、网口、mDP 和三个 USB-A，侧面另有两个全功能 USB-C，网卡甚至还支持 WiFi 6E。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/ports-5b391d258a4f7f7f730b7ed1cf71ebb9.jpg" width="1440" height="1085" class="img_ev3q"></p>
<p>连接好田牌自家外设 Microsoft Modern Camera, Microsoft Bluetooth Ergonomic Mouse, Microsoft Designer Compact Keyboard，开机。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/setup-567bbd139c5543772baf8a208ca1bd42.jpg" width="1672" height="1254" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/device-19b9fd22c487ef0ffaf4b8f1d07b247c.jpg" width="1323" height="1051" class="img_ev3q"></p>
<blockquote>
<p>毫不意外，这玩意就是个没有屏幕的 Surface</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="性能">性能<a href="https://xnth97.github.io/2022/11/06/windows-dev-kit#%E6%80%A7%E8%83%BD" class="hash-link" aria-label="性能的直接链接" title="性能的直接链接">​</a></h2>
<p>作为（下班后的）主力机，我的日常负载大概是 ~20 个 Edge 标签页、小型 Visual Studio / VSCode 项目、某个 Office 365 app、两三个 IM、若干个终端以及一些后台服务（OneDrive, iCloud, PowerToys, Steam etc），对于这台机器算是绰绰有余。得益于大内存和高速 SSD，多任务切换还是相当丝滑的。Adreno GPU 相较于曾经我购买的 NUC 的 Intel 核显也是大幅提升，渲染 4K + 2K 桌面动画毫不拖沓，且 GPU 占用率极低。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/perf-7ddbd8cc9851af9349d7ec55825b0c94.jpg" width="1497" height="1141" class="img_ev3q"></p>
<p>但需要注意的是，我这里的使用场景算是一个 happy path：大部分上述提到的应用软件都是原生的 arm64 版本。一旦涉及到 x86 翻译的部分，在高负载时（比如编译 Node.js 项目）就能明显地感觉到力不从心，极为缓慢。为了对比 M1，我也作死尝试了一下运行 x86 的古墓丽影：暗影，720P 中画质 20fps，惨不忍睹。作为参照我的 M1 Max 开到非常高 1440P 是 60fps 满帧且风扇都不转的。为什么没测 1440P 呢，因为 720P 以上直接：</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/shadow_of_tomb-d629c83cde4aac1cbba0aae20b6a8f03.png" width="829" height="390" class="img_ev3q"></p>
<p>图一乐也跑一下分，膏通还是被果子按在地上碾压了。单核大约是我 M1 Max 60%，多核更是只有 45%，更离谱的是跑在 WSA 上的还比原生要略高一点。不过另一方面，这个单核性能也赶上了 Intel 16 寸 MBP，多核也有它 Core i9 9880H 的 80%，然而运行起来极为安静毫无声音（据<a href="https://www.jeffgeerling.com/blog/2022/testing-microsofts-windows-dev-kit-2023" target="_blank" rel="noopener noreferrer">此文</a>日常功耗约为几瓦），能耗比虽不及 M1、但也超出我（火龙 888 受害者）对膏通的预期了。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/geekbench-eaf2df46b2475e7f8d006302db1d4a01.jpg" width="1607" height="194" class="img_ev3q"></p>
<p>最后在传统性能之外，有必要提一嘴，这颗 SoC 相较于 PC 的一大不同是它还具有 NPU，据称在某些机器学习任务可以达到 80x CPU 的速度。不过膏通这 ONNX SDK 还需要申请，一周多过去了还没有收到，所以暂时无法测试。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="兼容性">兼容性<a href="https://xnth97.github.io/2022/11/06/windows-dev-kit#%E5%85%BC%E5%AE%B9%E6%80%A7" class="hash-link" aria-label="兼容性的直接链接" title="兼容性的直接链接">​</a></h2>
<p>严格来说，这是我第二次使用桌面 Windows on ARM 的设备（第一次是天国的 Surface 2 和 Windows RT）。很多日常使用的应用，如 VSCode、Edge、Office、7zip 等均是原生 arm64，一些更吃性能的开发工具如 VS、Golang、Python 也有了 arm64 版本，使用起来<strong>基本</strong>和 x86 无异。其中相对有障碍的是自家 Visual Studio，有 arm64，但装不了扩展。其他 x86 软件，得益于新增的 64 位翻译支持，只要不是高负载（如编译、游戏），不管是 GUI 还是 CLI 都运行的没有什么问题。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/vsix-66b47307f3ad068e5143ba548c036912.png" width="656" height="387" class="img_ev3q"></p>
<p>ARM 架构的一个意外之喜可能是 WSA，安卓子系统可以直接原生运行 arm64 的 app 了，理论上兼容性和性能都比 x86 翻译要好上很多。我用的最多的是 Apple Music，其中图形开销较大的部分如动态歌词、专辑动画等，现在都是纵享丝滑。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/music-d4e3c737b3eb254000cbbe6db2e1d4b7.jpg" width="1683" height="1245" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前景">前景？<a href="https://xnth97.github.io/2022/11/06/windows-dev-kit#%E5%89%8D%E6%99%AF" class="hash-link" aria-label="前景？的直接链接" title="前景？的直接链接">​</a></h2>
<p>虽然只是开发机，我还挺高兴巨硬愿意把这东西做出来的，而且设计和做工完全可以当一个消费级产品来卖。虽然 SoC 绝对性能不及 M1，但 32GB + 512GB 的良心搭配还是让它日常使用场景远远胜过比它贵出百刀的 Mac Mini，甚至还预装了 $199 的 Windows 11 Pro。对于我，它可以是一台摆在书房的开发机，可以是卧室里连接投影的 HTPC，可以是扔在车库里的低功耗服务器。但极高的能耗比、优雅紧凑的设计、齐全不阉割的接口、完全静音的体验，又让我觉得它甚至可以是一台适合绝大部分人的 daily driver。并不是所有人都需要/负担得起强大的塔式计算机或昂贵的 Mac，一个简单的 ARM 小盒子或许也可以带来新时代计算设备的普惠。</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>备注</div><div class="admonitionContent_BuS1"><p>本文使用 Windows Dev Kit 2023 撰写并发布</p></div></div>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mammoth Lakes 追星车宿 Getaway]]></title>
        <id>https://xnth97.github.io/2022/09/01/mammoth-lakes</id>
        <link href="https://xnth97.github.io/2022/09/01/mammoth-lakes"/>
        <updated>2022-09-01T21:24:22.000Z</updated>
        <summary type="html"><![CDATA[上周刷 Recreation.gov 突然刷出 Convict Lake Campground 的位置，一查农历周末正是新月，天时地利说走就走。]]></summary>
        <content type="html"><![CDATA[<p>上周刷 Recreation.gov 突然刷出 Convict Lake Campground 的位置，一查农历周末正是新月，天时地利说走就走。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-1">Day 1<a href="https://xnth97.github.io/2022/09/01/mammoth-lakes#day-1" class="hash-link" aria-label="Day 1的直接链接" title="Day 1的直接链接">​</a></h2>
<p>周五早上去单位蹭个饭直接出发，顺 680 上 Livermore 后一路向东，沿 120 开两个多小时到达 Yosemite 门口的 Groveland 小镇充电。进山时有一大段上坡，峰值功率非常的高，不过路程并没有长到有里程焦虑。超充站非常寒酸，就是一个普通停车场里随意地矗立着几个充电桩，没有任何的配套设施。停车场门口倒是有一个建于 1895 年的监狱，简直激发了我的 <a href="https://zh.m.wikipedia.org/zh-hans/%E5%A4%A9%E6%B4%A5%E5%A4%A7%E5%AD%A6#:~:text=%E7%AE%80%E7%A7%B0%E5%A4%A9%E5%A4%A7%EF%BC%8C-,%E5%A7%8B%E5%BB%BA%E4%BA%8E1895%E5%B9%B410%E6%9C%88,-%EF%BC%8C%E5%89%8D%E8%BA%AB%E4%B8%BA%E6%B8%85%E6%9C%9D" target="_blank" rel="noopener noreferrer">1895 PTSD</a>。</p>
<!-- -->
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<blockquote>
<p>1895 监狱和爆表的瞬时电耗</p>
</blockquote>
<p>继续向东进入 Yosemite，正逢周末又是夏日旺季，既需要预约也需要排队。等了半小时后终于驶入公园，不作停留地穿过 120，又是大约两小时的车程，终于驶上传说中秋景天堂的 395 公路。夏天没有满山黄叶的震撼，但也算是景致开阔。我开去 Mammoth Lakes 镇里的超充站，顺便下来活动一下开车一天的筋骨。超充站旁边走路三分钟便有一个星巴克，我就直接去买了杯饮料，Mammoth Lakes 镇子也不大，感觉主要是冬季服务滑雪爱好者的地方。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/3-8f221887c33b27d1a109c364328ceb9c.jpg" width="1440" height="1080" class="img_ev3q"></p>
<blockquote>
<p>395，此图在 autopilot 激活状态下拍摄，请勿模仿</p>
</blockquote>
<p>Convict Lake Campground 就在 Mammoth Lakes 不远的地方，营地规模不算大，但是设施很干净。有大约1/3 的 site 深入绿树掩映中私密而凉爽，感觉在加州还是不可多得的。Site 后方甚至有一条潺潺的小溪，水流清澈冰凉，偶有露营的人钓鱼抓虾。营地对面就是 Convict Lake 和 trails，溪水也是从湖里流出的。</p>
<p>简单停车扎营。我的露营装备基本就是 coleman 套装：Instant tent, self-inflating sleeping pad, 睡袋，折叠椅。如果很多人露营的话我还会热心搞点 charcoal 和木柴来烧烤和点起篝火，自己出来露营的话就一切从简了。这次我只带了大华卡式炉来煎一点 Costco 半成肉类和煮点泡面。可能泡面确实很香，引来一头小鹿一直在我面前直勾勾盯着咕嘟咕嘟的锅子吐舌头流口水，过了好几分钟看我没有给它吃的意思才不情不愿地继续低头啃草。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p>晚上扛起相机三脚架，找好一个正对湖水和银河的位置开始拍照。Convict Lake 其实非常小，但湖对面又有漂亮的岩石纹理和山谷形状。大约十点半左右，银心正好高悬在山谷处，湖水上反射着浅浅的倒影，确实非常美丽。可惜晚上湖边风非常的大，我孱弱的三脚架无法保持稳定，只能尽量用较短的曝光时间换取清晰一点的图像，让我本就只有 f/2.8 的 $300 不到手动广角头雪上加霜，最后成片噪点惨不忍睹，只能借助 computational photography，多帧堆栈来换取一点纯净度。晚上拍照时我旁边还有两个老法师，其中一个约莫 50 多岁的大爷竟然是微软员工（感觉是个 VP），知道我的单位后快乐地跟我聊起了前两年的 graph database migration，还教了我一些在银河升起前不借助手机爱啪啪快速判断银心位置的方法。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/5-9c98cc0756a6f6a374f1c6f761f04e5a.jpg" width="1676" height="1080" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/6-d1d554616b4454c2d801164a12180cc4.jpg" width="1649" height="1080" class="img_ev3q"></p>
<p>拍完回到营地，本想进帐篷睡觉，结果被曝晒一下午里面闷热不堪，于是决定直接车里铺床 car camping。不得不说，EV 的一大好处就是露营时有一个 77 度电的巨型充电宝。车里开着灯、露营模式吹着空调、手机手表相机充着电、笔记本插着电打开 Photoshop 当场处理，感觉就差搬个车载冰箱喝冰阔落了。而且或许是天时地利作美，透过 Model Y 车顶天窗银河也是清晰可见，真的可以躺着看星星入睡了。不过我对 Model Y 唯一一点不满是后座放平后有一个微妙的向下倾角，虽然不妨碍睡觉，但第二天早上醒来总会发现夜里受重力作用往下滑了一截让脚只能抵着后备箱门，还是没有帐篷宽敞舒展的。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/7-5f81096cdff34f76726702d9a76eb534.jpg" width="1440" height="1080" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-2">Day 2<a href="https://xnth97.github.io/2022/09/01/mammoth-lakes#day-2" class="hash-link" aria-label="Day 2的直接链接" title="Day 2的直接链接">​</a></h2>
<p>一夜露营模式只掉了 15 mi 的电。早晨五点闹钟起床，沿 395 北上去 Mono Lake 看日出。Mono Lake 有一个比较有名的奇观叫 Tufa，是湖边的石灰岩堆积形成的宫殿状结构。然而前一天遇到的老法师已经告诉我现在 Mono Lake 水量比较少，加上大早上起床晕晕乎乎跑错了路线，只能到一个离 Tufa 比较远的地方，并没能拍下想象中的画面。不过很多年没看过的日出的确很美，尤其是晨曦初露天光拂晓变幻莫测，用 iPhone 直接拍的 HDR 也能很好看。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/8-88fda844ae9ba47e8c77ae9985d3d02d.jpg" width="1620" height="1080" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/16-5435ebfe3f2d978d185789a154ee6d13.jpg" width="1440" height="1080" class="img_ev3q"></p>
<p>Mammoth Lakes 区域除了滑雪，有名的就是大大小小的湖区了。从 395 开上 June Lake Loop，一路湖光山色，忍不住多停了几下去看湖水的清澈见底，走走停停到了 June Lake 镇。我的第一反应就是：<a href="https://store.steampowered.com/app/1118240/Lake/?l=schinese" target="_blank" rel="noopener noreferrer">《Lake》</a> 诚不我欺！原来这种山间湖畔的美国小镇是真实存在的！镇子真的非常小，只有一条街道的商店餐厅酒吧、几家 lodge、RV park 和稀疏的居民区。我开着车在镇子里绕了一圈，颇有游戏里悠闲送货的体验。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/9-b6580802ad8d8782743c4e4902d61045.jpg" width="1440" height="1080" class="img_ev3q"></p>
<blockquote>
<p>中心处为 June Lake 镇子</p>
</blockquote>
<p>中午回到 Mammoth Lakes，买了份牛舌烤猪肉的 taco 然后开去 Devils Postpile，可是到公园门口才知道现在是 mandatory shuttle，必须要回到山下坐车，遂放弃转而开去 Crowley Lake。这个湖也是有个奇观 stone columns，但不得不说极其不推荐，因为过去实在是太困难了。如果不是全驱越野，停车的地方距离 stone columns 有一小时的山路，到了以后甚至还有一段夸张的垂直距离，需要小心翼翼地下坡才能接近石柱子。回程上山就更为痛苦了，不过基本上开着大越野的家庭路过都会问一句要不要搭车，如果比较社牛倒也不是不行。</p>
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/10-5a6fb70ecfd2d7e867ce894f5c4f4eaa.jpg" width="1920" height="757" class="img_ev3q"></p>
<p>晚上去了 Hot Creek Geological Site 继续追星。这个地方是一个峡谷，谷中有小河有温泉，甚至有人在举行钓鱼比赛（不过是 catch and release）。这个地方对拍星空还是很友好的，基本晚上无风，温度舒适，而且车子可以停在拍照点很近的地方，如果放心自己的三脚架完全可以打开定时后回到车里舒舒服服等着。我晚上买了 domino 的披萨，就坐在峡谷边一边等银河一边啃饼。天气很好的无月夜晚，晴朗得可以拿 iPhone 的渣夜景模式直接拍出银心的结构。唯一美中不足是这个公园晚间有 ranger 打着手电筒巡逻，很容易毁掉辛辛苦苦长曝光的照片。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/12-ce14d9f883504f54fad35ee2a21e1b56.jpg" width="1920" height="1280" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/13-76a6fbc11d3f05866864340ec625f4b3.jpg" width="1623" height="1080" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/14-15820db05966b5043218c003f15177c1.jpg" width="1638" height="1080" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-3">Day 3<a href="https://xnth97.github.io/2022/09/01/mammoth-lakes#day-3" class="hash-link" aria-label="Day 3的直接链接" title="Day 3的直接链接">​</a></h2>
<p>周日睡到自然醒，收拾完营地往回开。再次穿过 Yosemite，心想着来都来了，就去走了个 Tuolumne Grove Trail。Trail 两旁都是山火烧焦的树，索然无味，打道回府。</p>]]></content>
        <category label="travel" term="travel"/>
        <category label="photo" term="photo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[红花郎杯 2021 年度我最喜爱颁奖]]></title>
        <id>https://xnth97.github.io/2022/01/24/annual</id>
        <link href="https://xnth97.github.io/2022/01/24/annual"/>
        <updated>2022-01-24T23:52:17.000Z</updated>
        <summary type="html"><![CDATA[红花郎杯 2021 年度我最喜爱颁奖仪式现在开始！本榜单完全主观，毫不客观，充分代表本人个人喜好并包括大量粉丝滤镜。]]></summary>
        <content type="html"><![CDATA[<p>红花郎杯 2021 年度我最喜爱颁奖仪式现在开始！本榜单完全主观，毫不客观，充分代表本人个人喜好并包括大量粉丝滤镜。</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>警告</div><div class="admonitionContent_BuS1"><p>本榜单绝不构成任何消费建议。</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度电影">年度电影<a href="https://xnth97.github.io/2022/01/24/annual#%E5%B9%B4%E5%BA%A6%E7%94%B5%E5%BD%B1" class="hash-link" aria-label="年度电影的直接链接" title="年度电影�的直接链接">​</a></h2>
<p>今年看了一堆爆米花电影，没什么印象特别深刻的。但我这个人很土：你给我看托比马奎尔，我给你打钱。20 年前彭城视窗上的盗版蜘蛛侠和第十放映室的星球大战构成了我科幻电影的启蒙，10 年前《蜘蛛侠：破碎维度》也让我初窥平行宇宙的故事，于是《蜘蛛侠：英雄无归》狠狠地把所有的情怀全部甩到脸上，甚至还补全了加菲版超凡蜘蛛侠的意难平。我在阳谷县看的首映不久的一场，从马律师出场电影院里就响起惊呼，到后面托比加菲出场所有人都疯狂鼓掌大喊大叫。当看到托比中年略有发福加菲也不再少年，恍惚间感觉 20 年间这几部电影的故事从未完结，还仍然在另一个宇宙中继续着。这真是电影的神奇。</p>
<p>当然你给我看情怀那什么故事视效其实都不重要了，但我还是对《英雄无归》的结尾感到欣喜。蜘蛛侠故事的起源从来都是好邻居穷小子，生于无名而惩恶扬善，然而漫威荷兰弟蜘蛛侠一开始就是铁人大儿妇联加持，甚至直接参与无限战争，看着爽却总觉得变了味。而《英雄无归》结尾用了个仓促却也算合理的方式硬生生将荷兰弟拽回了蜘蛛侠故事的真正起源，让漫威影业版蜘蛛侠经过好几部电影的铺垫终于有了一个非常坚实复杂的 backstory，后续感觉大有可书。</p>
<p>年度电影——</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="蜘蛛侠英雄无归">《蜘蛛侠：英雄无归》<a href="https://xnth97.github.io/2022/01/24/annual#%E8%9C%98%E8%9B%9B%E4%BE%A0%E8%8B%B1%E9%9B%84%E6%97%A0%E5%BD%92" class="hash-link" aria-label="《蜘蛛侠：英雄无归》的直接链接" title="《蜘蛛侠：英雄无归》的直接链接">​</a></h3>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/spiderman-e7eb84fcc338fc164cbfc29af41f77a6.jpg" width="640" height="960" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度剧集">年度剧集<a href="https://xnth97.github.io/2022/01/24/annual#%E5%B9%B4%E5%BA%A6%E5%89%A7%E9%9B%86" class="hash-link" aria-label="年度剧集的直接链接" title="年度剧集的直接链接">​</a></h2>
<p>今年合我口味的剧还是蛮多的，巅峰时我一周要追五集更新。果 TV+ 的几部像《Ted Lasso》、《See》、《基地》，Disney+ 的《旺达幻视》、《猎鹰与冬兵》、《洛基》、《What If》、《鹰眼》、《波巴费特之书》，Netflix 的《猎魔人》第二季<del>以及因为远房表妹参演而被家里逼着看了一集的雪中悍刀行</del>等。原创的几部剧其实我都挺喜欢的，而《基地》和《猎魔人》第二季因为原著太过优秀且印象深刻，让我对编剧自作聪明的改动实在是地铁老人看手机，对角色无法共情，对故事无法欣赏。</p>
<p>本来我对这种小说改、游戏改、漫画改的剧没什么期望：你不要给我编砸了老老实实给我可视化，我就觉得很好。然而今年一部《双城之战》疯狂拉高了游改作品的水准线（当然毕竟也是自家出品）。细腻流畅而不失风格的全片高水准作画，恰到好处且极具辨识度的配乐，有头有尾脉络清晰的故事和环环相扣又不离主线的叙事节奏，这 TM 就是史上最强游改甚至动画剧集了！我大概十年没打开过英雄联盟了，对背景故事一无所知，只能勉强认得一些角色。而《双城之战》完全没有观影的门槛，却又以极致的细节刻画（例如大招技能的动画化）让粉丝/玩家能一眼看出基于十余年游戏宇宙的积淀。</p>
<p>《双城之战》构造了非常精妙的世界，皮城和祖安在剧中十分完整生动，建筑、规划、路人、氛围无不完美呈现了玩家想象中的英雄联盟世界观。但这剧最大（或者说唯一）的败笔我觉得就在这中文名字了：老老实实照着 Netflix 的翻译《奥术》不好吗？Arcane 是哪里有的双城之战？你不能因为第一季讲皮城 vs 祖安就说双城之战啊，下一季要是没有双城了怎么办？真是腾讯视频迷惑行为。</p>
<p>演员（声优）的表现也是可圈可点，比如配音蔚的 Hailee Steinfeld（看了《鹰眼》真的觉得她太可爱了！）不管是大姐头的可靠果断、面对范德尔的不服/心虚/敬畏、在爆爆闯祸后歇斯底里“You are a jinx!”等等，情绪表现无一不十分到位。配乐也实在是太顶了，我最喜爱的镜头就是金克丝在楼顶点燃火炬的那一幕，音乐响起的瞬间配合 HDR 屏幕闪瞎眼的火光，真的是浑身战栗差点哭出来。</p>
<iframe allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/arcane-league-of-legends-soundtrack-from-the/1593944607?l=zh"></iframe>
<p>年度剧集——</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="英雄联盟双城之战">《英雄联盟：双城之战》<a href="https://xnth97.github.io/2022/01/24/annual#%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F%E5%8F%8C%E5%9F%8E%E4%B9%8B%E6%88%98" class="hash-link" aria-label="《英雄联盟：双城之战》的直接链接" title="《英雄联盟：双城之战》的直接链接">​</a></h3>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/arcane-3bf8e2b35d0c8f462eb4cdc5799d7793.jpg" width="640" height="898" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度歌曲">年度歌曲<a href="https://xnth97.github.io/2022/01/24/annual#%E5%B9%B4%E5%BA%A6%E6%AD%8C%E6%9B%B2" class="hash-link" aria-label="年度歌曲的直接链接" title="年度歌曲的直接链接">​</a></h2>
<p>书接上文，双城之战的中英文主题曲分别是医生的《孤勇者》和梦龙的《Enemy》。《Enemy》基本就是梦龙的炫技，不管是多变的编曲还是顺滑的 rap 都是纯听觉的爽（也可能是非母语者对于词难以共情）。而作为一首游戏/剧集的宣发曲目，《孤勇者》的词曲质量实在是太高了。曲从低沉的娓娓道来到激昂高亢的“呜咽与怒吼”，词更是紧贴着《双城之战》的人物弧光游走，甚至还莫名契合上今年 EDG 夺冠和主旋律对于抗疫的基调。加上医生稳定的输出，简直是中年男人极致浪漫之表率。</p>
<blockquote>
<p>他們說 要戒了你的狂 就像擦掉了污垢</p>
<p>他們說 要順台階而上 而代價是低頭</p>
<p>那就讓我 不可 乘風</p>
<p>你一樣驕傲著 那種孤勇</p>
<p>誰說對弈平凡的不算英雄</p>
</blockquote>
<p>我有个玩英雄联盟的朋友说，之前国服客户端更新每次都自动放着歌听着烦，结果看完双城之战越听越上头。我的感觉也是一样，单独把这首歌拎出来我觉得只算是陈奕迅中上等的作品。然而这首歌和《双城之战》甚至《英雄联盟》本身的过于契合让每一句词曲背后都能勾出一个宏大的故事。尤其在抖音神曲屠榜华语乐坛的今天，这种细心打磨而尽情演绎的作品更是值得珍惜了。</p>
<p>年度歌曲——</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="陈奕迅孤勇者">陈奕迅《孤勇者》<a href="https://xnth97.github.io/2022/01/24/annual#%E9%99%88%E5%A5%95%E8%BF%85%E5%AD%A4%E5%8B%87%E8%80%85" class="hash-link" aria-label="陈奕迅《孤勇者》的直接链接" title="陈奕迅《孤勇者》的直接链接">​</a></h3>
<iframe allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/%E5%AD%A4%E5%8B%87%E8%80%85-%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F-%E5%8F%8C%E5%9F%8E%E4%B9%8B%E6%88%98-%E5%8A%A8%E7%94%BB%E5%89%A7%E9%9B%86%E4%B8%AD%E6%96%87%E4%B8%BB%E9%A2%98%E6%9B%B2/1596938776?i=1596938779&amp;l=zh"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度游戏">年度游戏<a href="https://xnth97.github.io/2022/01/24/annual#%E5%B9%B4%E5%BA%A6%E6%B8%B8%E6%88%8F" class="hash-link" aria-label="年度游戏的直接链接" title="年度游戏的直接链接">​</a></h2>
<p>今年喜欢玩的游戏不算多，没有像去年《动物森友会》一样全民参与的话题游戏。《双人成行》算是我玩过最<strong>好玩</strong>的作品，Game of the Year 也是实至名归；《漫威<del>寅河虎卫队</del>银河护卫队》也以流畅有趣的故事斩获最佳叙事并证明了漫改游戏也可以很好玩；《极限竞速：地平线 5》和《微软飞行模拟》基本就是我司炫技，但《光环：无限》战役的画面和故事都有点拉；《斩妖行》和《戴森球计划》也是非常优秀的国产游戏，前者爽快后者耐玩；《喋血复仇》像是求生之路的精神续作，四人开黑团建实在是非常有趣……</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/back4blood-9fa2348162272b5c40e93336275d6400.jpeg" width="1920" height="1080" class="img_ev3q"></p>
<p>但是说来说去，今年玩得最多的还是《怪物猎人：崛起》。按小宁子视频里的话说，我是一个不折不扣的老菜鸡：从 PSP 的《怪物猎人 P2》开始，到 Wii 上《怪物猎人 3》，后面因为没有 3DS 落下了很多，又到 PS4 上《怪物猎人世界》和 Switch 回炉的《怪物猎人 XX》，虽然玩得久玩得多，奈何人菜瘾大，天天猫车。《怪物猎人：崛起》大幅改进了上手的友好程度，例如我以前非常苦手的武器狩猎笛得到史诗级加强，这一作简直可以说是《狩猎笛：崛起》。翔虫的设定丰富了一个维度，极大的增加了游戏的爽快感，也能让快要猫车时及时逃命。全新的百龙夜行模式也让我不再抵触网战，较低的死亡惩罚和友好的社区氛围也让我很长一段时间愿意上上号去帮助要做任务的素未谋面的网友。</p>
<p>作为老猎（cai）人（ji），和朋友一起 PVE 砍大龙必然是我最喜爱猛汉系列的玩法。打开微信语音，叫上初中时午休偷偷躲在厕所联机怪猎的朋友们。有的人刚加完班，有的人哄睡了娃，但一起砍龙时熟悉的配合还是能跨越时间荏苒。玩的哪里是游戏，追忆的都是青春。</p>
<p>年度游戏——</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="怪物猎人崛起">《怪物猎人：崛起》<a href="https://xnth97.github.io/2022/01/24/annual#%E6%80%AA%E7%89%A9%E7%8C%8E%E4%BA%BA%E5%B4%9B%E8%B5%B7" class="hash-link" aria-label="《怪物猎人：崛起》的直接链接" title="《怪物猎人：崛起》的直接链接">​</a></h3>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/mhrise-2816d0c438f5acdae69a5dcd5ea439dc.jpeg" width="1280" height="720" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度产品">年度产品<a href="https://xnth97.github.io/2022/01/24/annual#%E5%B9%B4%E5%BA%A6%E4%BA%A7%E5%93%81" class="hash-link" aria-label="年度产品的直接链接" title="年度产品的直接链接">​</a></h2>
<p>今年买了三爽 S21、我软 Xbox Series X、新 Apple TV 4K、ThinkStation P340 和 14 寸 MacBook Pro。本来三爽我用着很开心的，手感优秀、屏幕出色、做工精致，突然一个猝不及防的更新让我成了 OneUI 4 的受害者：我的 S21 疯狂发热掉帧，在所有界面都在 120/60 帧的边缘疯狂试探反复游走，让我彻底不堪其扰扔在床头沦为睡前原神专用机（Update：现在已数字转世成为小粉红 iPhone 13）。Xbox Series X 在我 Xbox One 之上是全面升级的体验，稳定的 4K 60 帧、高速 SSD 秒加载和黑科技一般的 Quick Resume 让玩游戏成了毫无负担的享受。新 Apple TV 4K 遥控器终于不反人类了，支持利用 HomePods ARC 也让我 Xbox 打机体验更上一层楼。ThinkStation P340 作为家庭服务器非常优秀，不过我感觉主要是<a href="https://xnth97.github.io/2021/12/04/windows-nas">自己的折腾</a>而不是产品本身（要是有预算我会更 prefer HPE MicroServer）。</p>
<p>最后聊一聊 14 寸 MacBook Pro 了。本身我对这种用了很久的产品的例行升级没什么太大期望，但这台新电脑相比我 16 寸大火炉在体验上实在是肉眼可见的提升太多了：</p>
<ul>
<li>身形小了一大圈，出门不用纠结带不带电脑</li>
<li>极佳的功耗控制，安静又不发烫，在腿上使用也很舒适</li>
<li>快速唤醒，随用随开秒恢复，不用担心突然 kernel panic 自动重启</li>
<li>性能强的有些夸张，项目秒编译，偶尔也能跑跑游戏</li>
<li>屏幕就是所有设备天花板，XDR 真的绝美，不过 ProMotion 我个人没什么感觉</li>
<li>电量充沛且不插电性能无衰减，随时随处使用</li>
<li>功耗低，拉胯显示器的 USB-C 供电也足够全功率运行</li>
</ul>
<p>上面好几点都是我对“随时随地使用”的赞叹。之前我购买 iPad Magic Keyboard 就是为了解决电脑过大过重且出门时掉电过快难堪大用的问题，然而现在的 14 寸随时打开都是有电的响应状态，体验和 iPad 无异又具有完善的桌面系统、更强悍的性能和更齐全的接口，覆盖了大部分我之前 iPad 的使用场景。</p>
<p>然而新 MacBook Pro 不仅是一个随开随用的上网本，更是一个不折不扣的性能怪兽。我配置了 M1 Max + 32 GB 内存，目前使用没遇到任何瓶颈。配置 32GB 内存主要是考虑到这一代 SoC 中内存还要兼顾显存的作用。上一代 Radeon 5500M 的 8GB 显存我都常常吃满，所以留出充裕的内存余量，在打游戏或者 blender 高分辨率渲染时不至于让 CPU 和 GPU 打架。实际体验上，本来 Xcode 需要索引半天再吭哧吭哧风扇狂转十分钟才能看到代码高亮和补全的项目，现在秒开加稍等一下就可以开始写了，风扇还毫无声音。原本 Steam 好不容易有几个 macOS 游戏还要小心翼翼调低分辨率调图形，忍受着 30 帧和飞机起飞的巨大噪音，现在《古墓丽影：崛起》直接打开拉满 60 帧安静如鸡，可惜离开了 Boot Camp 这么强悍的 GPU 对于游戏玩家几无用武之地了。</p>
<p>最后感谢这台趁手的工具，短短一两个月让我多了一个自己玩票的项目，虽然也就能挣个奶茶钱；入门了 Blender，虽然最近也鸽了好久。期望新的一年，被打工压榨无几的创作欲能够更多地借助它得到表达吧。</p>
<p>年度产品——</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2021-macbook-pro">2021 MacBook Pro<a href="https://xnth97.github.io/2022/01/24/annual#2021-macbook-pro" class="hash-link" aria-label="2021 MacBook Pro的直接链接" title="2021 MacBook Pro的直接链接">​</a></h3>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/mbp-aa1237443a7105afeeb48e7eccdeb6ec.jpg" width="1440" height="1080" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度私货">年度私货<a href="https://xnth97.github.io/2022/01/24/annual#%E5%B9%B4%E5%BA%A6%E7%A7%81%E8%B4%A7" class="hash-link" aria-label="年度私货的直接链接" title="年度私货的直接链接">​</a></h2>
<p>我们<a href="https://www.instagram.com/shaking_chole/" target="_blank" rel="noopener noreferrer">虎子</a>真是太棒辣！</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/shaking-62ae258586dd0ac47bd3ab3ab22500f0.jpg" width="1080" height="809" class="img_ev3q"></p>
<blockquote>
<p>而我喜欢又厌倦了这人间呐</p>
<p>时辰不早快睡吧我也该走啦</p>
<p>—— 谢可寅《奇怪的人唱奇怪的歌》</p>
</blockquote>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[P340 工作站搭建家庭服务器]]></title>
        <id>https://xnth97.github.io/2021/12/04/windows-nas</id>
        <link href="https://xnth97.github.io/2021/12/04/windows-nas"/>
        <updated>2021-12-04T13:18:33.000Z</updated>
        <summary type="html"><![CDATA[最近打算购入 NAS，比较来比较去群晖和 QNAP，突然被同事安利巨硬员工可以打骨折购买 ThinkStation，于是用接近一台 DS920+ 的价格购入了最低配 ThinkStation P340 工作站。基于这台机器，这两天逐渐搭建起了我的家庭服务器。]]></summary>
        <content type="html"><![CDATA[<p>最近打算购入 NAS，比较来比较去群晖和 QNAP，突然被同事安利巨硬员工可以打骨折购买 ThinkStation，于是用接近一台 DS920+ 的价格购入了最低配 ThinkStation P340 工作站。基于这台机器，这两天逐渐搭建起了我的家庭服务器。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="硬件">硬件<a href="https://xnth97.github.io/2021/12/04/windows-nas#%E7%A1%AC%E4%BB%B6" class="hash-link" aria-label="硬件的直接链接" title="硬件的直接链接">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/thinkstation-af7e1af58740eb6c6b46b5a3123d6cc9.jpg" width="1200" height="1763" class="img_ev3q"></p>
<p>外观是 ThinkStation 一如既往的低调，体积也没有很大。最低配 P340 带有 10 代 i3 处理器，四核八线程对家庭服务器绰绰有余。内存自带不够看的 4GB，购入两根海盗船组成 20GB 内存<sup><a href="https://xnth97.github.io/2021/12/04/windows-nas#user-content-fn-1-fe5f93" id="user-content-fnref-1-fe5f93" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>。比较良心的是自带 256GB M2 SSD 用来装系统，又购买了两块 WD NAS 红盘作为存储<sup><a href="https://xnth97.github.io/2021/12/04/windows-nas#user-content-fn-2-fe5f93" id="user-content-fnref-2-fe5f93" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>。许多年没碰过正经的塔式计算机了，目测 ThinkStation 用料还是相对丐的（但是绝对足够用）。令我比较印象深刻的是 ThinkStation 的盘位托架非常优雅，不需要螺丝固定，仅需要抽拉和推动拉手来依靠机械结构固定，看来设计时充分考虑到了扩展性。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="os">OS<a href="https://xnth97.github.io/2021/12/04/windows-nas#os" class="hash-link" aria-label="OS的直接链接" title="OS的直接链接">​</a></h2>
<p>物理机操作系统选用 Windows Server 2022。倒不是不熟悉 Linux，主要是<del>为了巨硬员工的尊严</del>。正经的理由是：我需要物理机操作系统只负责底层的存储和虚拟化，其它所有服务均通过部署其上的虚拟机提供，这样不会担心乱搞把全家的服务都搞挂了。Windows Server 的优势在于开箱即用地提供了极为稳定的基础功能：</p>
<ul>
<li>存储池用来管理磁盘 raid</li>
<li>基于网络的文件共享（SMB 与 NFS）</li>
<li>Hyper-V 虚拟机</li>
<li>完善的远程管理（Windows Admin Center，远程桌面）</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/server-dd25b6ce5463076f5ab99212c773ed92.png" width="1400" height="1038" class="img_ev3q"></p>
<p>通过服务器管理器，所有基础搭建都可以轻松地通过 GUI 设置完成，不需要像 Linux 一样安装额外软件包或者修改 <code>/etc/fstab</code> 之类，个人感觉非常适合家用服务器的部署。存储池、文件共享和 Hyper-V 大家都比较熟悉了，这里多说一下宝藏 <a href="https://www.microsoft.com/en-us/evalcenter/evaluate-windows-admin-center" target="_blank" rel="noopener noreferrer">Windows Admin Center</a>，这个免费的软件实在是太香了。它也是开箱即用地提供了一个完善的 web 管理页面，不仅能够实时查看服务器状态，更能直接管理防火墙、服务、虚拟机、文件甚至注册表项等。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/wac-b2da38fa92ed4ea5b756140182c67dcb.png" width="1920" height="1161" class="img_ev3q"></p>
<p>我对 NAS 的使用需求很简单，主要就是提供一个网络驱动器存放文件以及通过 Lightroom 库管理照片，因此 Windows Server 自带的文件共享绰绰有余。其他设备直接挂载来访问，读写速度大概在 90 - 95 MB/s 上下，对于机械盘也勉强可用了。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/speedtest-c21b933af8a55381de7028bef9d7d63b.png" width="720" height="743" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="虚拟机">虚拟机<a href="https://xnth97.github.io/2021/12/04/windows-nas#%E8%99%9A%E6%8B%9F%E6%9C%BA" class="hash-link" aria-label="虚拟机的直接链接" title="虚拟机的直接链接">​</a></h2>
<p>其它所有的家庭服务，我通过 Hyper-V 上的三个虚拟机部署和管理。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="家庭核心服务">家庭核心服务<a href="https://xnth97.github.io/2021/12/04/windows-nas#%E5%AE%B6%E5%BA%AD%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1" class="hash-link" aria-label="家庭核心服务的直接链接" title="家庭核心服务的直接链接">​</a></h3>
<p>之前介绍过我家有些服务跑在一台树莓派上，然而对于性能敏感的任务还是很捉急（比如 <code>ffmpeg</code> 解码 Ring 摄像头视频流传输到 HomeKit）。这次我开了一台 Ubuntu Server 2 CPU + 2GB RAM 的虚拟机来接手原来树莓派上智能家居相关服务，主要有负责桥接家里 IoT 设备的 <a href="https://homebridge.io/" target="_blank" rel="noopener noreferrer">homebridge</a>，将 Chromecast 转为 AirPlay 的 <a href="https://github.com/philippe44/AirConnect/tree/master/aircast" target="_blank" rel="noopener noreferrer">aircast</a>，和下载文件的 <code>aria2</code> 以及 <a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener noreferrer">webui-aria2</a> 作为 UI 管理后台。这些服务全部通过 <code>pm2</code> 来进行管理，在遇到问题时可以自动重启。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="adguard-home">AdGuard Home<a href="https://xnth97.github.io/2021/12/04/windows-nas#adguard-home" class="hash-link" aria-label="AdGuard Home的直接链接" title="AdGuard Home的直接链接">​</a></h4>
<p><a href="https://adguard.com/zh_cn/adguard-home/overview.html" target="_blank" rel="noopener noreferrer">AdGuard Home</a> 是一款开源 DNS 服务器，主要用来拦截广告和跟踪。在服务器上直接使用 snap 安装：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token function" style="color:hsl(221, 87%, 60%)">sudo</span><span class="token plain"> snap </span><span class="token function" style="color:hsl(221, 87%, 60%)">install</span><span class="token plain"> adguard-home</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>然后打开服务器的 3000 端口地址去进行初始化，一般在这一步会有 53 端口被占用的问题。首先停用 <code>systemd-resolved</code> 服务：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token function" style="color:hsl(221, 87%, 60%)">sudo</span><span class="token plain"> systemctl stop systemd-resolved</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>然后编辑 <code>/etc/systemd/resolved.conf</code>，添加 <code>DNS</code>、<code>FallbackDNS</code> 并修改 <code>DNSStubListener=no</code>，最后更新 <code>resolv.conf</code>：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token function" style="color:hsl(221, 87%, 60%)">sudo</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">ln</span><span class="token plain"> </span><span class="token parameter variable" style="color:hsl(221, 87%, 60%)">-sf</span><span class="token plain"> /run/systemd/resolve/resolv.conf /etc/resolv.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/adguard-fa95339eb522cc96f443b4fee5b1e88a.png" width="1440" height="970" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="挂载">挂载<a href="https://xnth97.github.io/2021/12/04/windows-nas#%E6%8C%82%E8%BD%BD" class="hash-link" aria-label="挂载的直接链接" title="挂载的直接链接">​</a></h4>
<p>在 Windows Server 上，我创建了一个新的文件共享服务用来共享 <code>Downloads</code> 文件夹。在 Ubuntu Server 上，首先安装 <code>cifs-utils</code>，创建 <code>/mnt/downloads</code> 作为挂载点，创建一个 credentials 存放用户名密码：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token assign-left variable" style="color:hsl(221, 87%, 60%)">username</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">USERNAME</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token assign-left variable" style="color:hsl(221, 87%, 60%)">password</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">PASSWORD</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>修改 <code>/etc/fstab</code> 加上:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">//SERVER_IP/Downloads /mnt/downloads cifs </span><span class="token assign-left variable" style="color:hsl(221, 87%, 60%)">credentials</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">/path/to/credentials,uid</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token number" style="color:hsl(35, 99%, 36%)">1000</span><span class="token plain">,gid</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token number" style="color:hsl(35, 99%, 36%)">1000</span><span class="token plain">,iocharset</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">utf8,rw,file_mode</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">0777,dir_mode</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">0777,sec</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">ntlmv2 </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>然后运行 <code>sudo mount -a</code> 挂载，Ubuntu 即可以读写网络驱动器里的文件了。</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>注意</div><div class="admonitionContent_BuS1"><p>此处 <code>USERNAME</code> 的用户必须在 Windows Server 里也设置好对应的读写权限，否则容易出现 <code>permission denied</code> 错误。</p></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_BuS1"><p>善用 <code>nobrl</code> 参数：不会发送 byte range lock。比如我的 calibre 部署在 NAS 上通过 cifs 挂载，需要在上述命令 <code>cifs</code> 后添加 <code>nobrl</code> 防止 DB 被锁住。详见<a href="https://coderwall.com/p/zrxobw/calibre-libraries-on-nas" target="_blank" rel="noopener noreferrer">这里</a></p></div></div>
<p>对于这些智能家居相关的核心服务，我的想法是将它们物理隔离在一台虚拟机上，创建好检查点，这样一般不需要去动它们，万一因为更新之类的原因搞挂了也可以迅速恢复，避免对家庭使用造成影响。至于其它玩耍的服务可以开新的虚拟机去尽情折腾。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2022-年更新替换-ubuntu-为-windows-server-core">2022 年更新：替换 Ubuntu 为 Windows Server Core<a href="https://xnth97.github.io/2021/12/04/windows-nas#2022-%E5%B9%B4%E6%9B%B4%E6%96%B0%E6%9B%BF%E6%8D%A2-ubuntu-%E4%B8%BA-windows-server-core" class="hash-link" aria-label="2022 年更新：替换 Ubuntu 为 Windows Server Core的直接链接" title="2022 年更新：替换 Ubuntu 为 Windows Server Core的直接链接">​</a></h4>
<p>运行家庭服务的 Ubuntu Server 更新 Jellyfish 后莫名其妙搞丢了我好多配置文件，而且基本每天一小崩两天一大崩，于是一怒之下更换为 Windows Server Core。用了几个月下来真是一个坚如磐石，虽然有几点不太满意的：</p>
<ul>
<li>缺乏包管理，<code>winget</code> 目前在 Server SKU 上用不了</li>
<li>Windows 服务还是比 systemctl 要复杂些，甚至还是第三方 app <a href="https://nssm.cc/" target="_blank" rel="noopener noreferrer">nssm</a> 更为好用；即使这样还会带来复杂的权限问题</li>
<li>没有真正的 CLI 模式，占用较多内存（不过对于家用这也是优势）</li>
</ul>
<p>对于家用来说，大量 Linux 下的繁复操作（如挂载）在 Windows Server 里都具有内建的稳定对应功能实现，甚至由于 Server SKU + Hyper-V 还会有更高的性能表现。而且借助安装 <a href="https://docs.microsoft.com/en-us/windows-server/get-started/server-core-app-compatibility-feature-on-demand" target="_blank" rel="noopener noreferrer">FOD</a> 可以让 Windows Server 获得更多方便而基础的 GUI 管理工具，如 <code>explorer</code>、<code>taskmgr</code> 等。由于 Server Core 在 CLI 外表下其实具备完整 GUI（只是没有传统桌面 Shell），我们完全可以安装使用 Edge、VSCode 等更为复杂的应用来简化服务器部署与配置。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/servercore-461c2f2378ad18132f4cc8836699f775.jpeg" width="970" height="800" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="乱七八糟服务">乱七八糟服务<a href="https://xnth97.github.io/2021/12/04/windows-nas#%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E6%9C%8D%E5%8A%A1" class="hash-link" aria-label="乱七八糟服务的直接链接" title="乱七八糟服务的直接链接">​</a></h3>
<p>由于服务器性能较为富裕，我又开了一台 Ubuntu Server 4 CPU + 8GB RAM 的虚拟机跑一些乱七八糟的服务。顺便安利一下 Hyper-V 的动态内存分配，可以允许虚拟机在指定的内存范围内动态变化，因此即使分配了 8GB RAM，在负荷低的情况下虚拟机也只会占用大约 1GB 左右 RAM，不会给宿主机造成太大压力。注意在 Hyper-V 上运行的 Linux，可以安装 azure 优化的内核获得更好的性能。</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token function" style="color:hsl(221, 87%, 60%)">sudo</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">apt</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">install</span><span class="token plain"> linux-azure</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/hyperv-a3ee59aa14b980f3a0d15f719b1a3884.png" width="1600" height="989" class="img_ev3q"></p>
<p>在这台服务器上，我完全通过 Docker 部署了这些服务：</p>
<ul>
<li><a href="https://github.com/janeczku/calibre-web" target="_blank" rel="noopener noreferrer">calibre-web</a>：著名电子书管理软件的 web 前端，支持在线阅读。</li>
<li><a href="https://github.com/mattermost/focalboard" target="_blank" rel="noopener noreferrer">focalboard</a>：个人使用的 Jira，方便追踪一些个人小目标。</li>
<li><a href="https://github.com/cdr/code-server" target="_blank" rel="noopener noreferrer">code-server</a>：在线版的 VSCode，方便顺手直接改一些服务器上的代码/文件，比如上述所有服务的 <code>docker-compose.yml</code>。</li>
<li><a href="https://github.com/librespeed/speedtest" target="_blank" rel="noopener noreferrer">librespeed</a>：用来进行局域网测速。</li>
<li><a href="https://github.com/benphelps/homepage" target="_blank" rel="noopener noreferrer">homepage</a>：简易的 Dashboard，作为所有服务的统一入口。</li>
<li><a href="https://github.com/gogs/gogs" target="_blank" rel="noopener noreferrer">gogs</a>：自建轻量 git 服务器。</li>
<li><a href="https://github.com/kalcaddle/kodbox" target="_blank" rel="noopener noreferrer">kodbox</a>：可道云，基于 web 的文件管理。</li>
<li><a href="https://github.com/bpatrik/pigallery2" target="_blank" rel="noopener noreferrer">pigallery2</a>：基于 web 和文件夹的轻量化相册浏览。</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/codeserver-85cf71ec3bda430db1be486677b51f0f.png" width="1400" height="1037" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/dashboard-fa0aef365a0c41bc2fa3bfadf4366b99.png" width="1920" height="1401" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="桌面服务">桌面服务<a href="https://xnth97.github.io/2021/12/04/windows-nas#%E6%A1%8C%E9%9D%A2%E6%9C%8D%E5%8A%A1" class="hash-link" aria-label="桌面服务的直接链接" title="桌面服务的直接链接">​</a></h3>
<p>最后为了某些桌面应用场景（比如突然需要百度网盘这种流氓软件），我也分配了一台 2 CPU + 8GB RAM 的 Windows Server 服务器并开启了远程桌面。值得一提的是 Windows Server 具有<a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/automatic-vm-activation" target="_blank" rel="noopener noreferrer">虚拟机自动激活</a>的特性，简单配置之后就可放心使用客户机。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/rdp-4e6139b79776d52fa3dee9747098d00f.png" width="800" height="702" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="azure-devops-server">Azure DevOps Server<a href="https://xnth97.github.io/2021/12/04/windows-nas#azure-devops-server" class="hash-link" aria-label="Azure DevOps Server的直接链接" title="Azure DevOps Server的直接链接">​</a></h3>
<p>近期为了<del>瞎杰宝折腾</del>个人项目需求搭建了个人项目管理、Git 仓库和 CI 系统。开了一台 4 CPU + 12GB RAM 的 Windows Server Standard 服务器，安装了 Azure DevOps Server 2022 和 SQL Server 2022。安装配置过程传承了 Windows 一贯的鼠标点点点，即使 UI 充满了浓浓的 2003 年代味道还是非常清晰顺畅的。</p>
<p>CI 配置如果习惯了一脉相承的 GitHub Actions 也非常容易适应，在仓库里加上 azure-pipelines.yml 就可以配置 CI pipeline。设置 agent 也很简单，DevOps 提供了各个 OS / 架构的配置方法，我图省事直接在本机起了一个节点，反正平时也不会有很多 CI 任务一起跑，用起来绰绰有余。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/devops-84bfedb349649713b2d8fbb511702a5c.png" width="2048" height="1585" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gpu-partition">GPU Partition<a href="https://xnth97.github.io/2021/12/04/windows-nas#gpu-partition" class="hash-link" aria-label="GPU Partition的直接链接" title="GPU Partition的直接链接">​</a></h3>
<p>GPU Partition 是 Hyper-V 支持的一项高级功能，可以把 host 的 GPU 分给 VM 使用。虽然不及 DDA 等 GPU 直通技术性能好，但胜在资源利用充足，一块 GPU 可以分给多个 VM，同时 host 也可以使用。P340 原装电源只有 300W 且没有 PCIe 线，于是买了个 EVGA 500W，插上了最鶸 RDNA2 6500XT。</p>
<p>首先对于多个 GPU 的情况，在 host 上 <code>Get-VMHostPartitionableGpu</code> 来确定需要分区的 GPU，记住 instance path（可以和设备管理器里的值交叉比对）。</p>
<p>之后 clone <a href="https://github.com/jamesstringerparsec/Easy-GPU-PV" target="_blank" rel="noopener noreferrer">Easy-GPU-PV</a> 项目，会自动拷贝 host 的 GPU 驱动到 VM 里，需要注意的是 host 和 VM 的 Windows 版本最好一致。如果是新 VM 直接跟着 repo 里的指南，如果要添加到现有的 VM，运行：</p>
<div class="language-powershell codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-powershell codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">\</span><span class="token function" style="color:hsl(221, 87%, 60%)">Update-VMGpuPartitionDriver</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">ps1 </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">VMName </span><span class="token string" style="color:hsl(119, 34%, 47%)">"YOUR_VM_NAME"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">GPUName </span><span class="token string" style="color:hsl(119, 34%, 47%)">"YOUR_GPU_NAME"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里 <code>YOUR_GPU_NAME</code> 就是设备管理器里显示的名字，比如我的鶸卡就是 <code>AMD Radeon RX 6500 XT</code>。如果你只有一块 GPU，也可以用 <code>AUTO</code>。之后等待脚本拷贝驱动，完成后运行：</p>
<div class="language-powershell codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-powershell codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token variable" style="color:hsl(221, 87%, 60%)">$vm</span><span class="token plain"> = </span><span class="token string" style="color:hsl(119, 34%, 47%)">"YOUR_VM_NAME"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token function" style="color:hsl(221, 87%, 60%)">Get-VMGpuPartitionAdapter</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">VMName </span><span class="token variable" style="color:hsl(221, 87%, 60%)">$vm</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">ErrorAction SilentlyContinue</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token function" style="color:hsl(221, 87%, 60%)">Remove-VMGpuPartitionAdapter</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">VMName </span><span class="token variable" style="color:hsl(221, 87%, 60%)">$vm</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token function" style="color:hsl(221, 87%, 60%)">Set-VM</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">GuestControlledCacheTypes </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">$true</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">VMName </span><span class="token variable" style="color:hsl(221, 87%, 60%)">$vm</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token function" style="color:hsl(221, 87%, 60%)">Set-VM</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">LowMemoryMappedIoSpace 1Gb </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">VMName </span><span class="token variable" style="color:hsl(221, 87%, 60%)">$vm</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token function" style="color:hsl(221, 87%, 60%)">Set-VM</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">HighMemoryMappedIoSpace 32Gb </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">VMName </span><span class="token variable" style="color:hsl(221, 87%, 60%)">$vm</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token function" style="color:hsl(221, 87%, 60%)">Add-VMGpuPartitionAdapter</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">VMName </span><span class="token variable" style="color:hsl(221, 87%, 60%)">$vm</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain">InstancePath </span><span class="token string" style="color:hsl(119, 34%, 47%)">"INSTANCE_PATH_OF_YOUR_GPU"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这个脚本的参数我没有仔细研究，可以自行参考<a href="https://www.tenforums.com/virtualization/195745-tutorial-passing-through-gpu-hyper-v-guest-vm.html" target="_blank" rel="noopener noreferrer">互联网上的教程</a>来配置。</p>
<p>启动 VM，分区通入的 GPU 应该已经被识别并安装好驱动，DirectX 加速也已经打开了。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/gpu-6135be6c91c0e7a48154127a5036361c.png" width="2048" height="1480" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="最后">最后<a href="https://xnth97.github.io/2021/12/04/windows-nas#%E6%9C%80%E5%90%8E" class="hash-link" aria-label="最后的直接链接" title="最后的直接链接">​</a></h2>
<p>以上就是我的家庭服务器搭建。工作站硬件 + Windows Server，运行至今稳如老狗坚如磐石，总体来说还是满足了我家里的需求的。一些关于家用的想法：</p>
<ul>
<li>不甘于群晖又不放心完全自己搭建的话，成品工作站可能是个不错的折中。</li>
<li>家用服务器可以考虑 Windows Server，提供了很多开箱即用的稳定基础架构（市场部钱结一下谢谢）。</li>
<li>物理机尽可能稳定，保证服务简单。可以只提供 raid、虚拟化和文件共享。</li>
<li>虚拟机物理隔离服务，运用容器等方式保证易于部署和进程自守护。</li>
</ul>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://xnth97.github.io/2021/12/04/windows-nas#footnote-label" class="hash-link" aria-label="Footnotes的直接链接" title="Footnotes的直接链接">​</a></h2>
<ol>
<li id="user-content-fn-1-fe5f93">
<p>一年后变成了 28GB <a href="https://xnth97.github.io/2021/12/04/windows-nas#user-content-fnref-1-fe5f93" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-fe5f93">
<p>后面又插了一个 512GB NVME SSD <a href="https://xnth97.github.io/2021/12/04/windows-nas#user-content-fnref-2-fe5f93" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的电瓶车时尚时尚最时尚]]></title>
        <id>https://xnth97.github.io/2021/03/18/tesla-model-y</id>
        <link href="https://xnth97.github.io/2021/03/18/tesla-model-y"/>
        <updated>2021-03-18T08:05:42.000Z</updated>
        <summary type="html"><![CDATA[这一年以来，出门玩不敢乘坐公共交通或住酒店，都是依赖开车加露营，让我渐渐感觉小车难以满足两人出门带着露营装备和几天食物的需要，萌生了购买 SUV 的想法。而购买电车的想法则是源于上次去 Joshua Tree 国家公园露营，不幸半夜营地被一群郊狼包围，在一夜刺激的野狼 Disco 之后愈发感觉睡在车里 car camping 也是个不错的选择。我有位朋友是特斯拉精神 + 经济股东，得知我的想法后连夜打来电话给我安利，待我回过神来已经下单了 Model Y 双电机长续航了。去年年底车交付到手，以下是开了大约 5000 公里之后的纯主观体验。]]></summary>
        <content type="html"><![CDATA[<p>这一年以来，出门玩不敢乘坐公共交通或住酒店，都是依赖开车加露营，让我渐渐感觉小车难以满足两人出门带着露营装备和几天食物的需要，萌生了购买 SUV 的想法。而购买电车的想法则是源于上次去 Joshua Tree 国家公园露营，不幸半夜营地被一群郊狼包围，在一夜刺激的野狼 Disco 之后愈发感觉睡在车里 car camping 也是个不错的选择。我有位朋友是特斯拉精神 + 经济股东，得知我的想法后连夜打来电话给我安利，待我回过神来已经下单了 Model Y 双电机长续航了。去年年底车交付到手，以下是开了大约 5000 公里之后的纯主观体验。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="外观--空间">外观 + 空间<a href="https://xnth97.github.io/2021/03/18/tesla-model-y#%E5%A4%96%E8%A7%82--%E7%A9%BA%E9%97%B4" class="hash-link" aria-label="外观 + 空间的直接链接" title="外观 + 空间的直接链接">​</a></h2>
<p>Model Y 的外观没什么好说的，仅仅是一个大号的 Model 3，整体没什么棱角，像一个圆润的大白。前面是电瓶车传统艺能的 frunk，空间不算大，可以去超市买菜或者出门时装着充电线和转接头。我的上文那位朋友买了专用的床垫，折叠起来正好可以放入 frunk，展开后能够放在放倒的后排座椅上，car camping 神器。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/front-de33c1d808169287efcf3f8486d03ee7.jpg" width="1600" height="1200" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/side-ecef93c5e8c24892af53c2650cb2a414.jpg" width="1964" height="1200" class="img_ev3q"></p>
<p>后备箱是掀背设计加电动尾门，加上底下还有一个很深的空间，使 Model Y 拥有堪比货拉拉的装载能力，我之前搬些家具甚至椭圆机都不在话下。我对掀背式尾门的喜爱还要追溯到十几年前我妈买车思考是迈腾还是 CC，我一下就被 CC 的尾门折服了，可惜最后家里选了迈腾，这次算是终于了却遗憾。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/trunk-e50907966d07b6a18f412aaa0660000d.jpg" width="1600" height="1200" class="img_ev3q"></p>
<blockquote>
<p>露营后备箱实况，空间极为富余</p>
</blockquote>
<p>内饰的确是简洁得寒酸，相比 BBA 少了很多精致感，不过对我这个原 2018 凯美瑞车主来说并没有什么落差，甚至还很喜爱极简带来的清爽和开阔视野。移去中控也没有什么不适应，可能是本来就要经常看中间的 CarPlay 屏幕，已经习惯了经常右瞥一眼屏幕去确认。没有中控后反而视角更好，能够有空间看到车头附近的路况。</p>
<p>全景天窗十分的美丽，我目前没有感觉非常晒，可能因为天气较冷还有保暖 buff。天窗有一层遮阳的涂层，想露营时看星星是看不到的，但早上一睁眼就看到清晨天空的感觉十分美妙，是我第一个“这车买的真值”时刻。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/dashboard-703a216e57176c234240365246eb651e.jpg" width="1600" height="1200" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="驾驶">驾驶<a href="https://xnth97.github.io/2021/03/18/tesla-model-y#%E9%A9%BE%E9%A9%B6" class="hash-link" aria-label="驾驶的直接链接" title="驾驶的直接链接">​</a></h2>
<p>说来惭愧，我父亲机械专业出身一辈子从事汽车行业，我从小也算耳濡目染，却始终没有对驾驶产生兴趣（玩游戏不算，虽然我 Forza 都是辅助全开的）。而 Model Y 算是第一次让我感受到“（现实生活中的）驾驶也可以是一件有意思的事”。</p>
<p>一个最明显的体验就是脚上任何时候都有随叫随走的充足动力。起步时，电动机瞬间爆发的大扭矩能带来很强的推背感，让我刚提车时痴迷于从匝道上高速等完红灯后那一脚电下去五秒钟零到百公里的快感。无需变速箱也让速度变化异常顺滑且能即时响应，需要超车时轻点电门速度直接提起，没有油车等待发动机转速提高那一下的拖泥带水，开起来信心十足。双电机 384hp 也保证了应付绝大部分路况都没有压力，陡如三番坡道也不像我的老凯美瑞需要费力踩下油门。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/cars-912aa0b3670fdf5a99c6b2bdcbcc0801.jpg" width="2064" height="1200" class="img_ev3q"></p>
<blockquote>
<p>毛豆 Y 和凯美瑞合影留念</p>
</blockquote>
<p>电车动能回收的特性也带来了单踏板驾驶，松开电门动能回收即开始工作，车辆开始制动直至停止，习惯后基本一只脚即可全程精准控制速度。我个人还是很喜欢单踏板的，既不需要换脚可能带来顿挫感，也能利用动能回收最大化续航。感觉最适合的场景是开多弯山路，经常需要控制加速减速的场景比油车轻松太多，如果一路下山则既不用担心磨损刹车片又能顺便充电回来个三五公里。当然，单踏板模式对操作精细化要求更高，容错率也更低（毕竟减速是松电门而不是踩刹车），不需操心换脚的同时也势必要更为关注路况。这里插一句，注意如果电池较满的话动能回收刹车是不工作的，我觉得是因为动能回收基本就是大功率充电，电池满了就充不进去电进而刹车不工作，需要和油车一样踩踏板利用刹车片制动。第一次遇到时我都以为是刹车失灵了，后来仔细想想应该是 feature 不是 bug。</p>
<p>关于驾驶不得不提的是 Autopilot。之前我很担心单踏板模式开高速岂不是很累，因为我习惯了点踩油门经常滑行，单踏板的话不是一直要踩住电门了？后来发现 Autopilot 就是电动车对这个问题的答案。上高速找好自己的道后，按两下拨杆就没有脚什么事了。开车出门玩的时候动辄一段高速直接几十一百英里，Autopilot 基本不需要我去介入，极大地减轻了开车时的疲劳感。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/autopilot-3c81f72bf953ed921b57eb6e1d04a5fa.jpg" width="1763" height="1200" class="img_ev3q"></p>
<blockquote>
<p>开启 Autopilot</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="乘坐">乘坐<a href="https://xnth97.github.io/2021/03/18/tesla-model-y#%E4%B9%98%E5%9D%90" class="hash-link" aria-label="乘坐的直接链接" title="乘坐的直接链接">​</a></h2>
<p>Model Y 是那种“开起来很爽，坐起来很糟”的车。从车本身来说，电动机扭矩强、动能回收等特性容易使乘客不习惯引发晕车。而 Model Y 又有极硬的悬挂和默认较高的胎压，高情商：这车运动感十足，路感清晰准确；低情商：路上有点小坑就踏马颠到你螺旋升天。第一次坐副驾时，我感觉梦回我爸二十年前昌河面包车。另一方面，也是得益于电动机平滑的特性，如果路况好那乘坐体验极为舒适。车子无声平顺丝滑，仿佛毫无阻力地贴地飞行，未来感十足。</p>
<p>乘坐空间也比较宽裕，毕竟是 SUV 车型，前后排我一个一米八的壮汉都觉得宽松，头顶和膝盖都是绰绰有余。而且由于是电车没有了传动轴，后排中间座椅实用性和舒适性均大幅提升。但我对后排不满意的一点是座椅比较短，对大腿的支撑明显不足，相比正经 SUV 比如 GLC 实在是拮据了。我觉得如果有后排经常载人的需求还是考虑 Model X，毕竟后排坐起来的贴合程度加上空气悬挂带来的舒适感的确和 Model Y 天壤之别。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/backseat-f8efcddec9e028d4f51470fe90176671.jpg" width="1200" height="1600" class="img_ev3q"></p>
<blockquote>
<p>后座着实和 Model X 比不了</p>
</blockquote>
<p>最后说说露营体验。后排座椅折叠垫上软垫铺上被子，车内空调打开露营模式，足够两个人舒舒服服在野外度过一个晚上。相比帐篷（我买的是四人帐篷）空间上的确局促一些，但恒温空调、方便的 USB 充电口、全景天窗视野和无需担心野生动物袭击使得睡 Model Y 远比睡帐篷舒适。另外也省却搭帐篷收帐篷的时间和精力，更不需担忧突然下雨时铺设隔水布和防雨篷。周末逃离工作喧嚣，在森林中的清晨醒来，睁开眼透过天窗便是树木和微雨，下车与朋友和狗狗一起 hiking，轻松惬意至此。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/camping-1d9625b336a1ce765fcf0b3c3adc2079.jpeg" width="1200" height="1600" class="img_ev3q"></p>
<blockquote>
<p>car camping 早晨醒来一眼透过天窗</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="续航">续航<a href="https://xnth97.github.io/2021/03/18/tesla-model-y#%E7%BB%AD%E8%88%AA" class="hash-link" aria-label="续航的直接链接" title="续航的直接链接">​</a></h2>
<p>标称 326 英里续航，实际我感觉要打个八折。一般日常为了电池健康我都充到 280 英里左右，而湾区众多的超充站也让我没有续航焦虑，出门买菜或者等奶茶的时候就可以顺便充电了。超充的快充阶段速度能达七八百英里每小时，基本上充个十几二十分钟足够了。开车出去玩也很方便，反正都需要中间停一停吃个饭买个水上个厕所，就是用来充电的时间，吃完饭电也就够了。提车自带一年免费超充，之后也可以在公司免费充电，经济上是比油车划算太多。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/charging-f31f864e66ad5b7bf66def9b980e9055.png" width="1920" height="866" class="img_ev3q"></p>
<blockquote>
<p>等奶茶时充电及欣赏谢可寅（夹带私货）</p>
</blockquote>
<p>家里面车库带一个 NEMA 14-50 240V 的插头，于是我购买了一个 14-50 转接头，又钉上了亚马逊十块钱买的收纳架子，这样在家也有 30+ 英里/小时的充电速度，一晚上也足够从 0 充到满电。加个彩蛋：我还有个 ES3 滑板车，直接接家里普通插头充电，算是我真正的第一部电瓶车。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/home-charging-2a970212dc95be324cf96b1b0b2c9549.png" width="1440" height="1200" class="img_ev3q"></p>
<blockquote>
<p>家里电瓶车（们）的充电</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="https://xnth97.github.io/2021/03/18/tesla-model-y#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2>
<p>第一次购买电瓶车（不算滑板车），我对 Model Y 整体还是比较满意的。这是我在新能源大潮下的第一次试水，也让我对未来更为智能的出行和使用清洁能源的世界多了一些信心。感谢阅读，谢谢大噶。</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>备注</div><div class="admonitionContent_BuS1"><p>神秘 1500 公里代码：<a href="https://ts.la/yubo67122" target="_blank" rel="noopener noreferrer">yubo67122</a>，感恩！</p></div></div>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[数字家庭二零二零]]></title>
        <id>https://xnth97.github.io/2020/11/03/digital-home</id>
        <link href="https://xnth97.github.io/2020/11/03/digital-home"/>
        <updated>2020-11-03T23:20:40.000Z</updated>
        <summary type="html"><![CDATA[二零二零年，“家”成了一个空前重要的地方。既是栖身安居之处，也是丝竹案牍场所。有了自己的窝以后，近期趁着亚麻 Prime Day 搞了一堆东西，对家里进行一下数字化改造。]]></summary>
        <content type="html"><![CDATA[<p>二零二零年，“家”成了一个空前重要的地方。既是栖身安居之处，也是丝竹案牍场所。有了自己的窝以后，近期趁着亚麻 Prime Day 搞了一堆东西，对家里进行一下数字化改造。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="网络">网络<a href="https://xnth97.github.io/2020/11/03/digital-home#%E7%BD%91%E7%BB%9C" class="hash-link" aria-label="网络的直接链接" title="网络的直接链接">​</a></h2>
<p>我家面积不大但共有三层，层高也不算低，势必要上 mesh 了。趁着打折，购入 Google Nest Wifi 套装，包含一个路由和两个 mesh point。其中 mesh point 有麦克风和扬声器，可以作为支持 Google assistant 的智能音箱使用。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/nest-1-35bf71697e9b3316b2bfb7da0b92fb21.jpeg" width="1400" height="1050" class="img_ev3q"></p>
<p>我家主网口在二楼客厅，通过 coax 线缆和 modem 连接。猫用的是以前的 Netgear C7000v2，支持 xfinity modem 和路由器功能，我禁掉了它的路由器只作为猫使用。猫 LAN 口连接 Nest Wifi 主路由，主路由有线接入埋好的 CAT7 线缆和交换机。交换机买的便宜的千兆 TPLINK SG108，本来是专门有线网给游戏机使用的，但由于线缆实在有碍观瞻，现在客厅娱乐设备也暂时直接连入 Wifi 网络了。灵魂绘制有交换机时拓扑图如下：</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/network-dd847f7f6c4f9b61fb9fb77ac6cfa28f.png" width="1600" height="1252" class="img_ev3q"></p>
<p>两个无线 mesh point，一个放置在一楼入口处，用于一楼的物联网设备（门铃，车库门，安防系统等）和偶尔在一楼上网使用。另一个放置在三楼书房，以保证 WFH 的信号质量，不过后续安置台式机以后应该会直接使用有线网。Nest Wifi 的设置极其简单，通过 Google Home app 基本和设置一盏灯的过程无异。所有 Wifi 的设置<strong>仅能</strong>通过手机，对我来说虽然勉强够用，但总不如传统路由网页端功能强大。但可能对于相对小白的用户而言，简单明了又成了优势，各有利弊叭。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/nest-2-f2064460d2b82a1fe8db5b25a792c82e.png" width="1600" height="977" class="img_ev3q"></p>
<blockquote>
<p>左：简陋的手机端；右：空荡的网页端</p>
</blockquote>
<p>配好 mesh 以后，三层楼实现 Wifi 无死角覆盖，绝大部分地方都是满格信号。而因为我套餐速度本就不高，测速也基本能跑满，让以前只用过小米路由 + 小米 Wifi 放大器的我不禁对现代无线 mesh 刮目相看。另外两个 mesh point 也附赠了 Google Home mini 的功能，而且不知是不是体积更大的缘故，在我听来音质甚至要好于我的 Google Home mini 和 Nest mini，低音明显更有力沉稳，高频也没有 nest mini 轻飘飘的感觉。当然白送的音响功能没什么好评价了，工作时 cast 个播客当背景音绰绰有余。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/nest-3-b2c32979cdfe20974fbe84d463cad7b4.jpeg" width="1400" height="1050" class="img_ev3q"></p>
<blockquote>
<p>放置于书房的 mesh point，作为智能音箱时底部灯条会亮起</p>
</blockquote>
<p>Nest Wifi 的主路由和 mesh point 均配备四核 1.4 Ghz 处理器和专用的机器学习引擎（也许是运行 Google assistant 之用），并分别配置 1GB 和 768MB 的内存。这参数已经比我几年前的手机要强，对于路由器来说绰绰有余了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="门铃">门铃<a href="https://xnth97.github.io/2020/11/03/digital-home#%E9%97%A8%E9%93%83" class="hash-link" aria-label="门铃的直接链接" title="门铃的直接链接">​</a></h2>
<p>买的亚麻旗下 Ring 和 echo 的套装（然而我家 Google home/nest 实在太多了，echo 一个都没有拆），毕竟水深火热，带摄像头的门铃主要是安全起见吧。门铃安装也不复杂，先粗暴地把原来的门铃拆了，美国门铃大致都是一个简陋的电路，门铃起到一个接通电路的作用，按下就会响起来。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/doorbell-1-d5f9f10b03ad80a81b297db4a6f12079.jpeg" width="1400" height="827" class="img_ev3q"></p>
<p>先把 Ring 附带的一个支架钉在墙上，然后把原来门铃两根电线接到 Ring 门铃背后两个螺丝触点上，最后卡回支架就可以用了。这个门铃非常<em>睿智</em>的是<strong>需要充电</strong>，而且充电接口在看不见的背面，这就意味着每次充电都要把它拆下来。幸好电池看来比较耐用，使用三周掉了 5% 的电。环形的灯是常亮的，不过应该是从原来门铃电路取的电，因此自身电池应该只负责联网和录制了。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/doorbell-2-684b2517ce2681a9f973cde4406d36c8.jpeg" width="1400" height="1288" class="img_ev3q"></p>
<p>Ring 这个门铃主要作用就是：</p>
<ul>
<li>有人按门铃时手机会收到通知，可以视频通话</li>
<li>监测门口可疑行动，触发通知并自动录像</li>
<li>是个可以按的门铃</li>
</ul>
<p>大部分设置也是通过手机 app 进行。需要注意一点是一开始我接好后按门铃我家里并不会响，后来发现 app 里有一项 <code>In-home Chime Settings</code>，需要正确设置才能响。这么重要的设置为什么不在初始化流程里？也是一个<em>睿智</em>设计了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="安防">安防<a href="https://xnth97.github.io/2020/11/03/digital-home#%E5%AE%89%E9%98%B2" class="hash-link" aria-label="安防的直接链接" title="安防的直接链接">​</a></h2>
<p>选购安防系统时，犹豫是老牌 ADT 还是新秀 Ring，考虑到<del>ADT 实在太贵了</del>Ring 科技基因更深厚，买了 Ring Alarm 八件的套装（还送了个 echo show，出于上述理由也没拆）。看着八件套很唬人，其实就包括：</p>
<ul>
<li>基站 x1</li>
<li>keypad x1</li>
<li>信号放大器 x1</li>
<li>门窗感应器 x4</li>
<li>运动感应器 x1</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/ring-1-7bf5085707d6ecbabad9ae235b7c6fa7.jpeg" width="1400" height="1050" class="img_ev3q"></p>
<p>安装和设置也没什么难度，跟着 app 一步步来就好了。传感器也都是通过 3M 胶固定，非常 DIY 友好。我把基站、keypad 和主路由都放在二楼的一个小边桌上，白色看起来也比较和谐。Ring Alarms 主要是基于<strong>场景</strong>的模式，配置好 disarmed，home 和 away 三种模式后基本就只需要开关切换就可以了，感应器和警报系统会根据场景工作。我同时订阅了 Ring 的服务，会有专业人员（或机器人🤖️？）帮你监测感应器的异常并在必要时报警，避免用户不在家又漏掉通知之类的情况。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/ring-2-5ab59f3d8dd3dae70ace2029372f5536.jpeg" width="1400" height="668" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="温控">温控<a href="https://xnth97.github.io/2020/11/03/digital-home#%E6%B8%A9%E6%8E%A7" class="hash-link" aria-label="温控的直接链接" title="温控的直接链接">​</a></h2>
<p>前两天咕果新出了平价版 Nest thermostat，加上 PG&amp;E 对安装智能温控可以 rebate 几十块，毫不犹豫下单了。我觊觎远程操控空调功能已久，虽说湾区宜人的气候使它难有用武之地，但我看着家里上世纪科技的温控实在是难受。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/thermostat-1-1421dec4571af0f6f3372514c1e32dfa.jpeg" width="1400" height="1050" class="img_ev3q"></p>
<blockquote>
<p>旧温控</p>
</blockquote>
<p>安装和设置就和所有 2020 年的电子产品一样，通过手机 app 进行。不过一步步引导的模式对于没安过空调的我来说还是很有必要的。暴力拆下旧温控，需要记下排线的情况，Google Home app 也会提醒你需要拍张照片。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/thermostat-2-491ab84dc430641888f19567e35ab28a.jpeg" width="1200" height="1447" class="img_ev3q"></p>
<p>之后拔掉排线，拆掉原来的底座，钉上 Nest 的底座，按 app 提示接好排线，最后扣上 Nest thermostat，20 分钟鸟枪换炮。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/thermostat-3-e17e28222aa8c7b45f090822fb6844b8.jpeg" width="1400" height="1050" class="img_ev3q"></p>
<p>新 Nest 温控改为镜面设计，操作沿袭老款侧边触控的形态，屏幕由原来酷炫的圆形屏幕阉割成一块普通的 2.4 寸 QVGA（感觉是诺基亚的库存），不过幸好由于镜面设计看不出来屏幕的边框，配合简单的 UI 视觉效果还是可以的。操作也是非常流畅，触控时的音效异常悦耳清爽。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/g-home-bfca691e952d3e7926af65d73e38d313.png" width="1024" height="1017" class="img_ev3q"></p>
<blockquote>
<p>随着设备增多日益丰富的 Google Home 主屏</p>
</blockquote>
<p>Nest 温控主要设置也在 Google Home app 里，不过由于目前气候舒适暂时没有好好了解，等到天冷之后再深入体验一番。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="树莓派">树莓派<a href="https://xnth97.github.io/2020/11/03/digital-home#%E6%A0%91%E8%8E%93%E6%B4%BE" class="hash-link" aria-label="树莓派的直接链接" title="树莓派的直接链接">​</a></h2>
<p>之前买的树莓派被我装上了散热片，扔到一个看不见的角落默默跑着几个服务。对于我目前来说最有用的莫过于 <a href="https://github.com/homebridge/homebridge" target="_blank" rel="noopener noreferrer">homebridge</a>，把我家不同品牌的大量物联网设备都纳入了 HomeKit 的体系下，配合 Apple TV 甚至能实现简单的自动化（例如出门后：关车库门，关灯，安防系统设防）。我目前 homebridge 运行了以下插件：</p>
<ul>
<li>homebridge-config-ui-x: GUI 配置 homebridge 的利器</li>
<li>homebridge-bravia-tvos: 控制我的大法电视</li>
<li>homebridge-myq: 控制我的车库门</li>
<li>homebridge-nest: 将 Nest 添加为一个温度感应器并控制，不过好像还不支持最新款</li>
<li>homebridge-ring: 控制 Ring alarms 安防系统，并添加传感器和摄像头</li>
<li>homebridge-tplink-smarthome: 控制我的几个 TPLINK 小插头</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/home-18029380e6c0b36660b5521df8287668.png" width="1024" height="1037" class="img_ev3q"></p>
<blockquote>
<p>为什么夹杂奇怪的中英双语：我有些设备习惯用 Siri（中文）有些习惯用 Google assistant（英文）</p>
</blockquote>
<p>另外 tvOS 14 更新后，在看电视时如果楼下有人按门铃，Apple TV 会直接弹出门铃传来的实时视频，省去掏手机-&gt;解锁-&gt;打开 app 查看的步骤，非常好用。我树莓派上长期运行的另一个服务是 <a href="https://github.com/philippe44/AirConnect/tree/master/aircast" target="_blank" rel="noopener noreferrer">aircast</a>，用于 chromecast 和 AirPlay 协议的交互，这样水果设备也可以方便地投射音频到我的一堆咕果音响上，实现廉价的全家环绕立体声。两个服务基本不怎么占用资源，树莓派 3B 运行毫无压力。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/pm2-dad4f988d3e4b1ceb922ce54201dd70e.png" width="1444" height="310" class="img_ev3q"></p>
<p>此外运行的服务还有 NextCloud（临时存储一些小文件）和 Netdata（监控板子运行情况），又写了一个无比简陋的导航页去快速进入各服务的管理界面。 目前树莓派 RAM 占用 40%，CPU 基本没什么波动，运行非常稳定。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="结束">结束<a href="https://xnth97.github.io/2020/11/03/digital-home#%E7%BB%93%E6%9D%9F" class="hash-link" aria-label="结束的直接链接" title="结束的直接链接">​</a></h2>
<p>以上就是近期我对家里进行的改造，希望明年有机会能多多走出家门吧。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[用 Golang 撸一个玩具编译器]]></title>
        <id>https://xnth97.github.io/2020/05/29/tiny-compiler</id>
        <link href="https://xnth97.github.io/2020/05/29/tiny-compiler"/>
        <updated>2020-05-29T13:40:06.000Z</updated>
        <summary type="html"><![CDATA[社畜以来每日搬砖，很久没有像读书时一样学习一些东西沉淀下了。最近在 GitHub 上看到 the-super-tiny-compiler 这个项目，很喜欢它极简的设计和实现，也给了对编译原理一知半解的我一个从头再来的机会。个人感觉原项目用 JavaScript 抹去了一些实现细节的同时也模糊了具体的理解，故此用 Golang 学习与实现。]]></summary>
        <content type="html"><![CDATA[<p>社畜以来每日搬砖，很久没有像读书时一样学习一些东西沉淀下了。最近在 GitHub 上看到 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener noreferrer">the-super-tiny-compiler</a> 这个项目，很喜欢它极简的设计和实现，也给了对编译原理一知半解的我一个从头再来的机会。个人感觉原项目用 JavaScript 抹去了一些实现细节的同时也模糊了具体的理解，故此用 Golang 学习与实现。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述">概述<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#%E6%A6%82%E8%BF%B0" class="hash-link" aria-label="概述的直接链接" title="概述的直接链接">​</a></h2>
<p>这里我们实现的玩具编译器是将 lisp 风格的代码转化为 C 语法，例如 <code>(add 2 (subtract 4 2))</code> 会被转化成 <code>add(2, subtract(4, 2));</code>。大部分现代编译器工作主要有三个过程：</p>
<ul>
<li>Parsing：将源代码解析为抽象表达（如抽象语法树 Abstract syntax tree）</li>
<li>Transformation：操作 AST 并做一些编译器需要的工作</li>
<li>Code Generation：将变形后的代码生成新的代码</li>
</ul>
<p>按照我 iOS 的经验，这大概对应的是：</p>
<ul>
<li>Clang 对 C/C++/Objective-C/Swift 代码进行词法分析、静态分析等，生成 AST <code>clang -Xclang -ast-dump</code></li>
<li>Clang 将 AST 生成 LLVM 中间代码并进行编译优化，例如全局变量、循环、尾递归等情况 <code>clang -emit-llvm</code></li>
<li>Clang 将优化后的 LLVM 代码生成汇编代码 <code>clang -S -o</code>，assembler 将汇编代码生成机器码，linker 将机器码和静态库链接生成 Mach-O 可执行文件</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="parsing">Parsing<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#parsing" class="hash-link" aria-label="Parsing的直接链接" title="Parsing的直接链接">​</a></h2>
<p>解析主要是词法分析（lexical analysis）和句法分析（syntactic analysis）。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lexical-analysis">Lexical Analysis<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#lexical-analysis" class="hash-link" aria-label="Lexical Analysis的直接链接" title="Lexical Analysis的直接链接">​</a></h3>
<p>词法分析中 tokenizer 将原始代码拆分成 token（或 lexer）。比如 <code>(add 2 4)</code> 会被解析为</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'paren'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'('</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'name'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'add'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'number'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'2'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'number'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'4'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'paren'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">')'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里我们定义 token 包括两个属性：type 和 value。首先声明我们需要的 token type 和结构体：</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> TokenType </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    TokenTypeParen  TokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"paren"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    TokenTypeName   TokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    TokenTypeNumber TokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"number"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    TokenTypeString TokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"string"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> Token </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    tokenType TokenType</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    value     </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Tokenizer 函数接受 input 字符串，遍历并根据当前字符生成 token，最后返回 token 数组。这里我们利用了 Golang 的 <code>unicode</code> 包实现快速的判断。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Tokenizer</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">input </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain">Token </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// counter</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    current </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// token array to be returned</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    tokens </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">make</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain">Token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// iterate</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> current </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">len</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        char </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        charStr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> charStr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"("</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">||</span><span class="token plain"> charStr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">")"</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            tokens </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain">TokenTypeParen</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> charStr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        charRune </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">rune</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">IsSpace</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">charRune</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">IsDigit</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">charRune</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">IsDigit</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token function" style="color:hsl(221, 87%, 60%)">rune</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                char </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            tokens </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain">TokenTypeNumber</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> charStr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"\""</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// skip opening parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            char </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// for characters that are not "\"", append to value of current token</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"\""</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                char </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// skip closing parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            char </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            tokens </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain">TokenTypeString</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">IsLetter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">charRune</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">IsLetter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token function" style="color:hsl(221, 87%, 60%)">rune</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">char</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                char </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            tokens </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain">TokenTypeName</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> tokens</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="syntactic-analysis">Syntactic Analysis<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#syntactic-analysis" class="hash-link" aria-label="Syntactic Analysis的直接链接" title="Syntactic Analysis的直接链接">​</a></h3>
<p>句法分析将 token 数组解析为抽象语法树。顾名思义，AST 是树状结构，例如上文的 <code>(add 2 4)</code> 解析而来的 token 数组会被进一步解析为 AST 如下：</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'Program'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">params</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'CallExpression'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'add'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">params</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'NumberLiteral'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'2'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">type</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'NumberLiteral'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">value</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'4'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>AST 的每个节点可定义如下，注意 <code>params</code> 我们定义为一个指针数组，数组中每个元素都是指向 <code>ASTNode</code> 的指针。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> ASTNodeType </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ASTNodeTypeProgram             ASTNodeType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"Program"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ASTNodeTypeNumberLiteral       ASTNodeType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"NumberLiteral"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ASTNodeTypeStringLiteral       ASTNodeType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"StringLiteral"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ASTNodeTypeCallExpression      ASTNodeType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"CallExpression"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ASTNodeTypeExpressionStatement ASTNodeType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"ExpressionStatement"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> ASTNode </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    nodeType   ASTNodeType</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    value      </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    params     </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Parser 函数接受 token 数组并返回 AST 根结点。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Parser</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">tokens </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain">Token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> ASTNode </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    current </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// recursively walk through nodes</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> walk </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> ASTNode</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// create root node</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ast </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// push nodes to ast.params</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> current </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">len</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        tmp </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">walk</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        ast</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ast</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> ast</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>中间我们使用一个闭包 <code>walk()</code> 来根据 <code>current</code> 把 Token 解析为 ASTNode。预先声明闭包的原因是 Golang 不允许通过海象运算符（:=）声明的闭包调用自己。<code>walk</code> 闭包实现如下：</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">walk </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> ASTNode </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    token </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> TokenTypeNumber </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">    token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> TokenTypeString </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">    token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> TokenTypeParen </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;&amp;</span><span class="token plain"> token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"("</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// skip opening parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        token </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        node </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">    token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">   </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// skip name token</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        token </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> TokenTypeParen </span><span class="token operator" style="color:hsl(221, 87%, 60%)">||</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">==</span><span class="token plain"> TokenTypeParen </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;&amp;</span><span class="token plain"> token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">")"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            tmp </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">walk</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            token </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">current</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// skip closing parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        current</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// Should not get here</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="transformation">Transformation<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#transformation" class="hash-link" aria-label="Transformation的直接链接" title="Transformation的直接链接">​</a></h2>
<p>真实的编译器可能会进行很多优化并生成中间代码，但在玩具编译器里我们只是操作 AST，进行一些改动并生成新的 AST。一般来说也可以直接更改原始 AST，但鉴于我们是 target 另一种语言（lisp -&gt; C）我们还是创建一棵新的 AST。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="traverser">Traverser<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#traverser" class="hash-link" aria-label="Traverser的直接链接" title="Traverser的直接链接">​</a></h3>
<p>为了操作 AST，我们需要 traverser 去深度优先遍历 AST，并对每个类型的节点执行不同的操作。这里我们使用一个 map，key 是节点的类型，value 是我们需要执行的操作。对于每个节点，我们需要在开始遍历节点时（enter）以及结束遍历其子树时（exit）执行，因此我们声明一个 <code>Methods</code> 结构体，具有 <code>enter</code> 和 <code>exit</code> 两个闭包属性，每个闭包接受 <code>node</code> 和 <code>parent</code> 两个参数表示当前节点和父节点。由于闭包需要对节点进行改动，类型为指向节点的指针。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> Methods </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    enter </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    exit  </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>由此我们的 map 类型为 <code>map[ASTNodeType]Methods</code>，可以实现 traverser 如下：</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Traverser</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ast </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> visitor </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">map</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">ASTNodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain">Methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> traverseNode </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> traverseArray </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// helper that iterate over an array</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    traverseArray </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">array </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> i </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> i </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">len</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">array</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> i</span><span class="token operator" style="color:hsl(221, 87%, 60%)">++</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token function" style="color:hsl(221, 87%, 60%)">traverseNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">array</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    traverseNode </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        methods </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> visitor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// call enter</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">enter </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">enter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// traverse by current node type</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">switch</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">nodeType </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">case</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token function" style="color:hsl(221, 87%, 60%)">traverseArray</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">case</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> ASTNodeTypeExpressionStatement</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// call exit</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">exit </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">exit</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token function" style="color:hsl(221, 87%, 60%)">traverseNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ast</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">nil</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="transformer">Transformer<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#transformer" class="hash-link" aria-label="Transformer的直接链接" title="Transformer的直接链接">​</a></h3>
<p>Transformer 需要调用 <code>Traverser()</code> 函数将 AST 生成新的 AST，转化的例子在 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler/blob/d8d40130459d1537f6117a927947cd46c83182b0/the-super-tiny-compiler.js#L821" target="_blank" rel="noopener noreferrer">这里</a> 可以看到。对于新的 AST，我们需要添加一些属性来扩充 <code>ASTNode</code> 的定义。比较重要的是 <code>context *[]*ASTNode</code>，我们用它来表示一个<strong>从</strong>旧 AST 到新 AST <code>params</code> 的引用，因此它的类型需要为指针数组的指针，这样当我们修改旧 AST 节点的 <code>context</code> 时，对应的变更也会反映在新 AST 的 <code>params</code> 上。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> Callee </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    calleeType </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    name       </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> ASTNode </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    nodeType   ASTNodeType</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    value      </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    callee     Callee</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    expression </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    params     </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// reference from old ast to new ast</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    context    </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Transformer 函数如下：</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Transformer</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ast </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> ASTNode </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    newAst </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">   </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// so we can push nodes to parent's context</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ast</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">newAst</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token function" style="color:hsl(221, 87%, 60%)">Traverser</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ast</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">map</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">ASTNodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain">Methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> newAst</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>接下来我们来针对不同类型添加 <code>enter</code> 方法。对于 literal 节点，我们简单地创建新 <code>ASTNode</code> 并添加到父节点的 <code>context</code> 即可。由于 <code>context</code> 是指向新 AST <code>params</code> 的引用，新 <code>ASTNode</code> 也会被添加到新 AST 对应的 <code>params</code> 中。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">map</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">ASTNodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain">Methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> Methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        enter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            tmp </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">    node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> Methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        enter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            tmp </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">    node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意这里将节点添加到 <code>context</code> 的操作，由于 <code>context</code> 是数组指针，我们需要对它指向的内容进行操作，因此有额外的取值符。而数组元素是指向节点的指针，因此需要对生成的节点取地址。许久以来 Swift 写得一把梭已经差不多忘记这个级别的操作了。</p>
<p>最后对 CallExpression 类型，由于表达式具有参数，我们需要把旧节点的 <code>context</code> 指向新节点的 <code>params</code>，就如同我们对根结点做的一样。另外在这个玩具解释器中，如果父节点不是 CallExpression 类型，我们需要创建一个 ExpressionStatement 去嵌套一下。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> Methods</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    enter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> parent </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        expression </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            callee</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">   Callee</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token string" style="color:hsl(119, 34%, 47%)">"Identifier"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">   </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// context of CallExpression refer to express's params so</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// that we can push parameters</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">expression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">nodeType </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> ASTNodeTypeCallExpression </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// if not CallExpression, we need to wrap</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            newExpression </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                nodeType</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">   ASTNodeTypeExpressionStatement</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                expression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">expression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">newExpression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">context</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">expression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="code-generation">Code Generation<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#code-generation" class="hash-link" aria-label="Code Generation的直接链接" title="Code Generation的直接链接">​</a></h2>
<p>最后就是将新 AST 解析成 C 风格代码了。Code generator 的实现非常直接，针对不同节点类型生成不同代码，并对子节点递归调用自身就可以了。</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">CodeGenerator</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">node ASTNode</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">switch</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">nodeType </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">case</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        res </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">_</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> param </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">range</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            res </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">res</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">CodeGenerator</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">param</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> strings</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Join</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">res</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"\n"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">case</span><span class="token plain"> ASTNodeTypeExpressionStatement</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">CodeGenerator</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">expression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">";"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">case</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        params </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">_</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> param </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">range</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">params </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            params </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">CodeGenerator</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">*</span><span class="token plain">param</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">callee</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">name </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"("</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> strings</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">Join</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">params</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">", "</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">")"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">case</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">case</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"\""</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"\""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">default</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="compiler">Compiler<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#compiler" class="hash-link" aria-label="Compiler的直接链接" title="Compiler的直接链接">​</a></h2>
<p>最后把所有过程连起来：</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Compiler</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">input </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token builtin" style="color:hsl(119, 34%, 47%)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    tokens </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Tokenizer</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    ast </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Parser</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    newAst </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">Transformer</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">ast</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    output </span><span class="token operator" style="color:hsl(221, 87%, 60%)">:=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">CodeGenerator</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">newAst</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> output</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>写一小段测试代码，输入为 <code>(add 2 (subtract (add 3 5) 1))\n(print \"hello world\")</code>，编译运行一下得到：</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token function" style="color:hsl(221, 87%, 60%)">add</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">2</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">subtract</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token function" style="color:hsl(221, 87%, 60%)">add</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">3</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">5</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token function" style="color:hsl(221, 87%, 60%)">print</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"hello world"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>完整代码在<a href="https://github.com/xnth97/Data-Structure-Notes/blob/master/tiny-compiler-go/compiler.go" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="https://xnth97.github.io/2020/05/29/tiny-compiler#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2>
<p>虽然是个没有卵用的东西，不过从头撸的过程也能学习到现代编译器大致的工作原理。原项目 the-super-tiny-compiler 利用代码步步解释的形式也是让人耳目一新。另外 Golang 确实兼具 Python 易学的语法、强大的标准库和 C 的底层操作能力，比我想象的要香，看来可以当 gopher 了。</p>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019 的一些碎片]]></title>
        <id>https://xnth97.github.io/2020/01/16/annual</id>
        <link href="https://xnth97.github.io/2020/01/16/annual"/>
        <updated>2020-01-16T19:07:45.000Z</updated>
        <summary type="html"><![CDATA[一月]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="一月">一月<a href="https://xnth97.github.io/2020/01/16/annual#%E4%B8%80%E6%9C%88" class="hash-link" aria-label="一月的直接链接" title="一月的直接链接">​</a></h2>
<p>2019 年伊始，去 Lake Tahoe 滑了个雪，摔了很多跤也没有学会，愤而下山飞飞机。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/1-1f3768506f32c15ddef5afbabc599c83.jpg" width="1480" height="1110" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/2-f64f4e371cb005ff6b1e63e755200ca3.jpg" width="1480" height="1110" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="二月">二月<a href="https://xnth97.github.io/2020/01/16/annual#%E4%BA%8C%E6%9C%88" class="hash-link" aria-label="二月的直接链接" title="二月的直接链接">​</a></h2>
<p>过年回了趟家，爸妈养了只小猫咪，撸了个爽。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/3-2fa78294d8955e4b916ed55ed5483461.jpg" width="1110" height="1110" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="三月">三月<a href="https://xnth97.github.io/2020/01/16/annual#%E4%B8%89%E6%9C%88" class="hash-link" aria-label="三月的直接链接" title="三月的直接链接">​</a></h2>
<p>在家附近的公园散步，对视到一只傻呆呆的鹿。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/4-32e784059aee42a4ea4c170fbcd60931.jpg" width="1080" height="1080" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="四月">四月<a href="https://xnth97.github.io/2020/01/16/annual#%E5%9B%9B%E6%9C%88" class="hash-link" aria-label="四月的直接链接" title="四月的直接链接">​</a></h2>
<p>去 SF Moma 逛了一下，没搞明白现代艺术，拍了个大楼的光影。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/5-c63bd6f1ced1f68bc863ed3a1b16f2e3.jpg" width="1110" height="1110" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="五月">五月<a href="https://xnth97.github.io/2020/01/16/annual#%E4%BA%94%E6%9C%88" class="hash-link" aria-label="五月的直接链接" title="五月的直接链接">​</a></h2>
<p>看了场球，试了下 Pixel 3 的 Night Sight + Super Res Zoom。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/6-6aa2d14677d2814f62093e1671bf205a.jpg" width="1556" height="883" class="img_ev3q"></p>
<p>去了夏威夷，路边彩虹映在鹅卵石上很好看，Pixel 3 的解析力也相当不错。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/7-9b9a99c36ed5679dd93f48431a6b634d.jpg" width="1110" height="1110" class="img_ev3q"></p>
<p>在黑沙滩上见到了好大好大的产卵的大海龟。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/8-0f977ba11e4a5df882b3d2da9e310757.jpg" width="1557" height="1038" class="img_ev3q"></p>
<p>去 Mauna Kea 拍了个银河，第一次肉眼看到那么清楚的银心，整个人笼罩在无垠苍穹下的感觉还是很震撼的。可惜没仔细选好位置，前景是个在施工的厕所。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/9-da6e93b49eb7bc38b073f501d996421a.jpg" width="1557" height="1038" class="img_ev3q"></p>
<p>月底又去了 LA 的迪士尼乐园，长这么大第一次去，还是很好玩的，羡慕从小能去的小朋友们。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/10-54fc424a7d3183d3dffe912b5a597fa4.jpg" width="1080" height="810" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="六月">六月<a href="https://xnth97.github.io/2020/01/16/annual#%E5%85%AD%E6%9C%88" class="hash-link" aria-label="六月的直接链接" title="六月的直接链接">​</a></h2>
<p>去 Monterey Bay 的水族馆看了水母，想吃凉拌海蜇。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/11-1347345e0782117d7c8b123ff5865a2f.jpg" width="1500" height="1000" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="七月">七月<a href="https://xnth97.github.io/2020/01/16/annual#%E4%B8%83%E6%9C%88" class="hash-link" aria-label="七月的直接链接" title="七月的直接链接">​</a></h2>
<p>去了北边的 Lassen 国家公园，大夏天的能见到雪和冰河还是很凉爽的。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/12-7eb71eeab1adafc1fc4dff65571635b6.jpg" width="1557" height="1038" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/13-ee2df5ed4fb88d8cff4aeed5eb1b8bf3.jpg" width="1557" height="1038" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="八月">八月<a href="https://xnth97.github.io/2020/01/16/annual#%E5%85%AB%E6%9C%88" class="hash-link" aria-label="八月的直接链接" title="八月的直接链接">​</a></h2>
<p>去山上看流星雨，苦等一夜也没有几颗更是拍不出来了，只好搞点星轨凑数。这次事先找了下北极星的位置，构图自己还比较满意，可惜实在太冷了没有拍的久一点。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/14-fef1e215ccd7a85f2e39c5563c060eb1.jpg" width="1557" height="1039" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/15-e6ecf07ffe2e50377217152ce5569f18.jpg" width="1557" height="1039" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="九月">九月<a href="https://xnth97.github.io/2020/01/16/annual#%E4%B9%9D%E6%9C%88" class="hash-link" aria-label="九月的直接链接" title="九月的直接链接">​</a></h2>
<p>去了迈阿密，度假还是很惬意的。不过没拍什么照片，因为吃朋友安利买了 OSMO Pocket，一直在拿妹子当模特拍 VLOG。幸好 Pixel 防水，带去泳池拍照也没什么顾虑。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/16-7e12ed9f1275f81fcebe9012c85df6a5.jpg" width="1557" height="464" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="十月">十月<a href="https://xnth97.github.io/2020/01/16/annual#%E5%8D%81%E6%9C%88" class="hash-link" aria-label="十月的直接链接" title="十月的直接链接">​</a></h2>
<p>为了不委屈家里的 65 寸大法 4K 电视加上拥有不要钱的了 Xbox Game Pass Ultimate，买了台 Xbox One X，主机终于全了。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/17-18bc49ddb8d0cfc97620d2a46ed122a6.jpg" width="1110" height="1110" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="十一月">十一月<a href="https://xnth97.github.io/2020/01/16/annual#%E5%8D%81%E4%B8%80%E6%9C%88" class="hash-link" aria-label="十一月的直接链接" title="十一月的直接链接">​</a></h2>
<p>去波特兰玩，飞机上一转头看到厚厚的云层间夹着遥远的雪山，感觉是很奇妙的景色。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/18-0acac4b42f01b5de33252f628329e085.jpg" width="1110" height="1110" class="img_ev3q"></p>
<p>离开了老东家 Y 字开头互联网活化石，在公司旁边飞飞机时正巧发现一个 Y，和新换的 logo 有异曲同工之妙。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/19-aa8c2a5fe3de86436f31b277cef967d0.jpg" width="1480" height="1110" class="img_ev3q"></p>
<p>黑五/感恩节一波败家升级，最大的升级是把 Late 2013 的 15 寸 MBP 换了 16 寸，高配定制到八核 i9 + 32GB RAM + 5500M 8GB GPU，整体性能翻了好几番。又趁黑五折扣把 Pixel 3 换了 Pixel 4 XL，果表 2 换了果表 5，BeatsX 换了 AirPods Pro，淘宝 100 元人民币的吸尘器换了戴森 v10。掏空了钱包，充实了生活。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/20-a4351cbb0291559cde3385e932917c5a.png" width="2000" height="828" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="十二月">十二月<a href="https://xnth97.github.io/2020/01/16/annual#%E5%8D%81%E4%BA%8C%E6%9C%88" class="hash-link" aria-label="十二月的直接链接" title="十二月的直接链接">​</a></h2>
<p>去了死亡谷，也是一个很漂亮的地方。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/21-98668af52782854449edd42fd9d2c7a0.jpg" width="1558" height="1039" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/22-be8d5b03d9ce5e0172f94924f2490d03.jpg" width="1560" height="1040" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/23-a7386e23f90bc4ae7e02cb887bf6976a.jpg" width="1560" height="1040" class="img_ev3q"></p>
<p>死亡谷也是观星的绝佳地方，冬季的银河仍然清晰可见，天空也是星汉灿烂。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/24-5081dc84b6be465d2248d476d6f33d32.jpg" width="1557" height="1038" class="img_ev3q"></p>
<p>顺道去了 Vegas，Pixel 4 XL 的 Night Sight 我吹爆，原图纯净度还是很高的。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/25-062cbb90a8767ce10a112901cca05abd.jpg" width="1080" height="810" class="img_ev3q"></p>
<p>跨年夜回了家，去三番看了烟花，2019 年就这么过去了。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/26-999e0727a33c1fce5cb334b835c98c3e.jpg" width="1080" height="810" class="img_ev3q"></p>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
        <category label="photo" term="photo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switch to Pixel 3]]></title>
        <id>https://xnth97.github.io/2019/06/14/pixel-3</id>
        <link href="https://xnth97.github.io/2019/06/14/pixel-3"/>
        <updated>2019-06-14T20:15:45.000Z</updated>
        <summary type="html"><![CDATA[作为 iOS 开发狗每天上班下班对着各种 iPhone 实在是过于疲劳，加上去年我家两个人总共换了五台 Xs 的惨痛经历，四月底薅 Google Fi 的羊毛搞来一部 Pixel 3，趁着五月出门玩作为主力机深入体验了一个多月。]]></summary>
        <content type="html"><![CDATA[<p>作为 iOS 开发狗每天上班下班对着各种 iPhone 实在是过于疲劳，加上去年我家两个人总共换了五台 Xs 的惨痛经历，四月底薅 Google Fi 的羊毛搞来一部 Pixel 3，趁着五月出门玩作为主力机深入体验了一个多月。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/pixel3-885571aceaa19efb4c20735ba2c8658e.jpg" width="1027" height="1027" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="硬件">硬件<a href="https://xnth97.github.io/2019/06/14/pixel-3#%E7%A1%AC%E4%BB%B6" class="hash-link" aria-label="硬件的直接链接" title="硬件的直接链接">​</a></h2>
<p>Pixel 3 外观中规中矩，在真全面屏当道的时代，上下大黑边实在称不上惊艳。Google 经典的背部两种材质拼接的设计比较讨巧，磨砂玻璃既提供了不错的触感又防止了指纹沾染，加上较 Xs 更为纤细轻薄的机身，裸机 Pixel 3 握持手感我还是觉得很舒适的。荧光绿色的电源键相较规整的机身算是一个大胆设计，总会被人问晚上能不能发光。背部指纹识别和火疖子摄像头也是常规操作，无须赘述。</p>
<p>做工上，不知是个别问题还是总体品控差距，Pixel 3 有两个地方我较不满意。一是 SIM 卡槽安装好时明显低于机身底部，较 iPhone 历代严丝合缝的一体感逊色不少。二是玻璃后盖和中框的缝隙过大，感觉可以塞进去一张 A4 纸，尤其对于白色 Pixel 来说，这道接缝带来的视觉效果更为明显，有一种后盖没装好的感觉。iPhone Xs 的接缝则小得多，对于我黑色 Xs 更是向来无视。</p>
<p>Pixel 3 的这块屏幕我还是很喜欢的，虽然饱和度有些过高且色调偏冷，但对比度和清晰度可以说无可挑剔。非异形屏带来了更为沉浸式的视频体验，Netflix 和 YouTube 也能轻松找到大量符合比例的片源。上下大黑边带来的好处就是两个正对着你的扬声器，虽然听个响但效果也是超出预期了，确实有明显立体声环绕效果。</p>
<p>硬件配置上，845 + 4GB RAM 也和 Pixel 的其它地方一样中规中矩，对于只玩 Pokemon Go 的我来说性能非常过剩，配合原生 Android P 和纯 Google Play 应用也毫无卡顿感，主力机使用绰绰有余。火疖子摄像头效果不错，但 Google 特色，这部分还是需要放到软件部分讲。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="软件">软件<a href="https://xnth97.github.io/2019/06/14/pixel-3#%E8%BD%AF%E4%BB%B6" class="hash-link" aria-label="软件的直接链接" title="软件的直接链接">​</a></h2>
<p>作为 Google 亲儿子，Pixel 3 搭载原生 Android P。对于我这个从 Android 1.6 用到 4.4 的史前索尼老用户，在 Holo theme 刚刚铺开的年代离开了 Android 阵营，更未尝体验过原汁原味的 material design。原生 Android P 整体风格已经非常成熟地全面采用 Google 的设计规范（material design 2？），较 iOS 观感活泼灵动却又自成规整的体系，很多小交互的地方也让我眼前一亮。药丸导航虽然很多人不喜欢，我还觉得蛮习惯的，总感觉点按比手势更确定且省力，而且长按药丸呼出 Google Assistant 的小动画也是百看不厌。原生系统自带的全套 Google 服务体验也很优秀，可以看出 Google 想要学习苹果创造一种闭环的生态和体验。</p>
<!-- -->
<div class="react-photo-album react-photo-album--rows" role="group" aria-label="Photo album"></div>
<br>
<blockquote>
<p>挤一下两边呼出 Google Assistant</p>
</blockquote>
<p>Pixel 3 的相机着实是一大亮点，虽然只有一颗火疖子，却借助软件加持获得接近或超过多摄机型（对，就是你，iPhone Xs）的表现。日光下自不必说，白平衡和 HDR 远胜过经常高光过曝的 iPhone。夜间借助黑科技的 Night Sight，竟然能在漆黑一片几无环境光的地方拍出明亮的照片（当然能看出来 P 得有些过了，这一点见仁见智）。甚至极端情况下，我在去 Mauna Kea 观星的时候尝试了一下使用 Pixel 3 <strong>手持</strong>拍摄，竟然也清晰的拍出了几颗星星。视频防抖效果非常优秀，纯软件的情况下和 16 年 Dji Osmo Mobile 效果无异甚至更为顺滑，延时摄影、慢动作等也是一应俱全。虽然缺失了一颗长焦镜头，但 Pixel 3 借助 <a href="https://ai.googleblog.com/2018/10/see-better-and-further-with-super-res.html" target="_blank" rel="noopener noreferrer">Super Res Zoom</a> 成功实现了可以和 2x 长焦镜头媲美的效果。前置多出的一颗广角镜头也是非常好用，非常适合出去旅游自拍的场景，因为广角镜头能够容纳下更广阔的景色或者更多的人。人像效果倒是不如 iPhone，可能是少一颗摄像头的缘故，人像虚化边缘并不准确，对焦外光斑的处理也并不如 iPhone 真实。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/photo1-aaa1193729cd4b4fa9758fe8aac2382e.jpg" width="1762" height="1762" class="img_ev3q"></p>
<blockquote>
<p>路边随手拍，鹅卵石细节和彩虹颜色表现准确</p>
</blockquote>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/photo2-1d6db93fddcef78271e1d2a6d00aa586.jpg" width="2350" height="1762" class="img_ev3q"></p>
<blockquote>
<p>手持星空测试</p>
</blockquote>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/photo3-61664dcd037714561bb89f275f64038b.jpg" width="2350" height="1762" class="img_ev3q"></p>
<blockquote>
<p>Super Res Zoom 测试，3x 左右</p>
</blockquote>
<p>跑个题夹带一下私货，Mauna Kea 的星空着实很好看。</p>
<p><img decoding="async" loading="lazy" src="https://xnth97.github.io/assets/images/star-41648a1872c56ceb5424a1b7851a71f7.jpg" width="2506" height="1671" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pixel-vs-iphone">Pixel vs iPhone<a href="https://xnth97.github.io/2019/06/14/pixel-3#pixel-vs-iphone" class="hash-link" aria-label="Pixel vs iPhone的直接链接" title="Pixel vs iPhone的直接链接">​</a></h2>
<p>算是一个老生常谈的话题了，甚至可以引战到 Android vs iOS 系统之争。个人觉得当前两大系统/硬件并无明显优劣之分，但确实不同场景下也是各有千秋。</p>
<p>Pixel 3（或者说 Android）的软件生态的确很好。我只体验过 Google Play 下的 app，使用体验不输 iOS，丰富程度则是吊打。可以使用 Drastic 在长途旅行时玩原汁原味的宝可梦，可以使用 termux 紧急修改几行代码并上传，可以使用 ZArchiver 把修改后的文件打包发给别人...这些在 iPhone 上都是无法实现（或者过不了审核）的。作为一个 iOS 开发，我算是苦水果审核政策久矣，Google Play 的开放与丰富着实让我感觉离开了牢笼。至于 malware 的风险，别忘了还有 Google Play Protect，我认为这是比水果人工审核更为有效的机制。非常重要的一点是 Android 的内建 app 是跟随 Google Play 更新的，这和只能跟随系统更新的 iOS 内建 app 相比无疑具有更强的迭代能力。</p>
<p>Android Auto 在自驾游中也非常有用，虽然比 Carplay 明显卡顿，但 Android Auto 和你的手机完全独立运行互不干扰（虽然 iOS 13 终于也学去了）。甚至还有完整的键盘支持，在旅途中可以随时让副驾执行一些复杂的搜索导航任务。语音控制也是远比 Carplay 优秀，但这主要是 Google Assistant 超出 Siri 太多。比如作为一个 Apple Music 用户，我可以让 Google Assistant 播放 Apple Music 里的特定列表，而你若是想在 iOS 上使用 Siri 控制 Spotify，则还要等今年 iOS 13 新加入的 API 了。</p>
<p>USB Type-C 快充也真的是大大方便。在出游中，我可以一根线搞定手机、移动电源、相机和 Switch，而由于移动电源也支持快充，旅途中虽重度使用也并没有担忧过电量问题。信号更是不知道比 Xs 高到哪里去了，不管是手机使用还是开热点都稳如狗。</p>
<p>而 Pixel（或者说，Android）不管是系统还是 app，虽然十分流畅响应迅速且不容易被杀后台，但顺滑程度总是逊色 iOS。作为 iOS 开发平时对 iOS 动画见得多写的也多，总能看出这里动画 curve 不对那里动画没有跟手。这个不够顺滑的原因我觉得是复杂的，iOS 确实给 UI 响应提供了更高的优先级和更快的采样率，使得 Android 在机制上就不占优势；Cocoa Touch 框架里面也有完善易用的 API 和各种预先 tune 好的 curve 方便开发者轻松做出符合直觉和现实物理效果的动画，而 Android 开发者也许需要花费更多的精力才能达到 iOS 预先 tune 好的效果（我不懂 Android 我瞎猜的）。</p>
<p>另外对于有重度拍照/发图需求的人，必须注意一点是水果设备确实具有更完善的色彩管理和更统一的屏幕预校准。我在 MacBook Pro 上修好的图传到不同的几台 iPhone 上看效果相差无几，放在 Pixel 上则大相径庭（再次强调，我很喜欢 Pixel 的这块屏幕）。同样，如果在 Pixel 上处理好图片，放在别人的 iPhone 上显示出来的色彩的确是会和你的意图不同。但如果你在一台水果设备（iPhone, iPad, MacBook 内建屏幕）上修好图，你可以放心地认为在别人的水果设备上显示出来的色彩和你自己看到的色彩是极为接近的。</p>
<p>总体而言，这一个多月我对 Pixel 3 还是非常满意的。虽然 Pixel 3 并不惹眼，也没有出众的硬件，但它完全可以胜任作为主力机的一切要求，并在夜间拍照、智能助理、车载导航<del>和打电话</del>等方面提供远胜 iPhone 的体验。总结一下：</p>
<p><strong>真香！</strong></p>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[So Far So Good]]></title>
        <id>https://xnth97.github.io/2018/03/25/so-far-so-good</id>
        <link href="https://xnth97.github.io/2018/03/25/so-far-so-good"/>
        <updated>2018-03-25T22:24:46.000Z</updated>
        <summary type="html"><![CDATA[So far, so good: up to this point everything is all right.]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>So far, so good: up to this point everything is all right.</p>
<p>– Webster's New World College Dictionary, 4th Edition.</p>
</blockquote>
<p>这小半年算是实现了人生的一个小目标。从大三准备转专业出国，曾经遥不可及的硅谷、湾区，等到毕业后也要搬过去了。So far so good，感谢生活朝着正轨奔去。</p>
<p>从 2018 年伊始开始认真的准备求职，一月先是海投了大概 100 份简历，也开了 Leetcode Premium 开始疯狂刷题，四处打听招人消息求人内推。然而一个多月都没有什么进度，感受到了所谓 new grad fulltime 寒冬的压力。</p>
<p>二月中旬开始陆陆续续有一些面试，不得不说这边面试和国内还是区别很大：国内基本会针对你投的职位定向地考察你对这个技术栈的实战经验和深入理解，而美国是倾向于 versatile，认为你就是一个 general 的 SDE，不会针对某种技术栈、而是考察基础知识：算法，数据结构，操作系统，计算机网络。对我这个从 iOS 开发半路出家、基础几乎一穷二白的人来说，这边面试虽然深度较国内浅，但仍然颇具挑战性。好在之前上了 Data Structure 和著名的 Introduction to Computer Systems，有一些资料可以对着啃一啃，总算是搞明白了之前一直模棱两可的很多基础知识。</p>
<p>面试给我印象深刻的不多。有一家小公司招 iOS 的，面试就是直接屏幕共享从设计到代码写一个小 app，期间面试官还提醒说可以随便用 GitHub, StackOverFlow，就像你正常工作一样。很多 Swift 和 Cocoa 的特性已经不熟悉了，查了很多。面试官倒觉得 ok，也在逐渐地提出新的条件来 break implementation。写了大概将近两个小时，最后又花半小时过了很多问题，广度非常宽泛，从 cookie 实现到数据库为什么查询快。一下午面下来感觉非常累，虽然写的还不错，莫名挂掉了。</p>
<p>General SDE 基本就一个套路了：白板写码做题。小公司的没什么好说，没什么印象。Google 是两个很冷的大哥，一轮秒了基础但 follow up 跪的很彻底，另一轮面试官和我的思路不太一样（我在想如何有效地构建图，他在想怎么有效地检查连通），很是费了一些劲和他解释，他也一直将信将疑的表情。可惜之前本来和 Project Fi 组一个大姐聊的还蛮好，我靠着一堆朋友搞 Android 耳濡目染的皮毛使劲尬聊，几乎有提前 team match 的错觉。PayPal 是个国人大叔，莫名对蚂蚁金服抱着敌意，聊的也不怎么愉快，后面没消息了。Twitter 是个很简单的题，接近当年 CC 的某个 Project 的某一题（Twitter 推荐系统，基于 PageRank），结果也没消息了。Uber ATG 是个很友善的大哥，开门见山：你写题时不一定要尬聊哈。我笑，还是边聊边写题，题目也比较有意思，corner case 很多。Uber 比较变态的是需要在线的一个编辑器里写能跑的代码，所以好几次我跑不出来真是冷汗都下来了，结果发现是忘了写 print 之类的。大哥也会和我讨论一些细节，问为什么这么实现，最后也热心地介绍了下 Uber Advanced Technology Group 在做什么。Uber ATG 感觉整体还蛮好的，可是太慢了，直到签了工作才姗姗来迟 move forward。最后喷下亚麻，约了面试时间一拖再拖，最后拖到我签了工作，赶快回邮件 thank you for your consideration。</p>
<p>Oath 这边实话说面试一直都非常愉快，虽然也有 general SDE 白板做题的套路，但因为 match 了 flurry 组，面试我的全部是 iOS 工程师，给题时基本都会装模作样地给一个移动端的场景，做完题后也能够问我一些深入的 iOS 开发问题。我说能够是因为其他很多公司最多问问“UITableView 用过吗” “GCD 是干嘛的”，问的非常无聊。唯有 flurry 组的大哥大姐们问出了一些非常有意思的问题，从 iOS 的底层机制、Objective-C 运行时和语言特性，到 crash 后 mach 内核异常和 unix 信号量，Cocoa Touch 框架的设计模式…面试过程中被问到这种问题让我觉得很被尊重，因为都是紧密结合我简历的经验和项目，且有针对性地提出值得深入考察的问题。而且面试过程就像两个工程师在交流对技术的理解和对问题的解决方案，甚至会拿正在做的项目来讨论系统设计，面试结束也愿意无保留告诉你他们研究出的对某种场景的最优实践，当时一轮轮面下来都感觉收获很大，学到了很多，挂了也值了。</p>
<p>还好最后非常幸运，喜欢团队氛围和做的事情，签的很爽快，知遇之恩。说起来我可能人生中近二十年前第一个上的网站就是雅虎，第一个邮箱也是雅虎，也算是冥冥之中自有天意吧。求职过程中得到了很多很多人的帮助，感谢媳妇儿支持与鼓励，感谢学长学姐学弟<del>还真没有学妹</del>的内推，感谢身边朋友一起奋斗，感谢大佬改简历教投递给内推带吃饭…都记在心里，力所能及的时候也要帮助别人。</p>
<p>说说毕设，估计是人生学生阶段最后干的一件事了。有幸能跟一位有趣的教授和 UPMC 做一些有意义的事情。这个项目总体是利用炼丹机器学习通过医疗影像进行肿瘤情况的推断，我做的还只是最开始帮助标记海量数据的工具。毕竟世界上不是所有医院都有最为顶级的医生，利用 AI 基于海量数据进行的判断也许能够帮助发展中国家的中小城镇医院也具有世界级的诊断准确率。自从几年前我妈生过病后，真的明白北上广的医院和我家最好的医院水平都是天壤之别，因此我个人觉得这是一件非常有意义有价值的工作，也很荣幸能够为这项工作贡献一些浅陋的代码。</p>
<p>至于现在，苦读十数年即将毕业拿到学位，和媳妇一起去湾区工作，也和朋友们搬的更近，父母亲人身体健康，家里一切都好毋需挂念，so far so good，感恩生活。</p>]]></content>
        <category label="daily" term="daily"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序算法笔记]]></title>
        <id>https://xnth97.github.io/2018/02/04/sorting-algorithms</id>
        <link href="https://xnth97.github.io/2018/02/04/sorting-algorithms"/>
        <updated>2018-02-04T22:12:16.000Z</updated>
        <summary type="html"><![CDATA[从接触算法就开始说的排序，这里总结一下。]]></summary>
        <content type="html"><![CDATA[<p>从接触算法就开始说的排序，这里总结一下。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bubble-sort">Bubble Sort<a href="https://xnth97.github.io/2018/02/04/sorting-algorithms#bubble-sort" class="hash-link" aria-label="Bubble Sort的直接链接" title="Bubble Sort的直接链接">​</a></h2>
<p>冒泡排序是最基础的排序了，主要有三个基本步骤：</p>
<ul>
<li>每次比较两个值</li>
<li>如果左边的值更大，则交换两个值的位置，以将更大的值排到右边</li>
<li>向右移动一个位置</li>
</ul>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">bubbleSort</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> outerIdx </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">in</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">stride</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">from</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> to</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> by</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> innerIdx </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">in</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> outerIdx </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>对一个长度为 n 的数组，worst-case 下需要执行交换的次数为 n(n - 1)/2，需要比较的次数也为 n(n - 1)/2。冒泡排序的时间复杂度为 O(n^2)。冒泡排序是稳定的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="selection-sort">Selection Sort<a href="https://xnth97.github.io/2018/02/04/sorting-algorithms#selection-sort" class="hash-link" aria-label="Selection Sort的直接链接" title="Selection Sort的直接链接">​</a></h2>
<p>选择排序比冒泡排序快一点，主要有两个基本步骤：</p>
<ul>
<li>选择最小的值</li>
<li>把它和最左边的元素交换</li>
</ul>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">selectionSort</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> outerIdx </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">in</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// set initial min value's index</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> minimum </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> outerIdx</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// select a new minimum value's index</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> innerIdx </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">in</span><span class="token plain"> outerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">minimum</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// if new min, reset index</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                minimum </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> innerIdx</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> outerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> minimum </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">outerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">minimum</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">minimum</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">outerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>对一个长度为 n 的数组，worst-case 下需要执行交换的次数为 n - 1，需要比较的次数为 n(n - 1)/2。选择排序的时间复杂度为 O(n^2)。选择排序是不稳定的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="insertion-sort">Insertion Sort<a href="https://xnth97.github.io/2018/02/04/sorting-algorithms#insertion-sort" class="hash-link" aria-label="Insertion Sort的直接链接" title="Insertion Sort的直接链接">​</a></h2>
<p>插入排序比前两个都快，插入排序的关键在于有一条想象的分界线。主要思路是：</p>
<ul>
<li>分界线左边的元素都排好序了</li>
<li>分界线右边的第一个元素需要被插到左边的一个恰当位置中<!-- -->
<ul>
<li>首先，把右边第一个元素的值存到一个临时变量中</li>
<li>把左边的元素全部向右移一位，从而可以有一个位置来放要插入的值</li>
<li>找到位置后，插入临时变量中的值</li>
</ul>
</li>
</ul>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">insertionSort</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">guard</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">isEmpty </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> outerIdx </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">in</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> tmp </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">outerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> outerIdx</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// go backward in the left side of the line</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// shift the values</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token plain"> innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;=</span><span class="token plain"> tmp </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            innerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> outerIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> innerIdx </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> tmp</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>对一个长度为 n 的数组，worst-case 下需要比较的次数为 n(n - 1) / 2，如果是随机分布的数组则表现会更好。插入排序最坏的情况下复杂度为 O(n^2)，最好的情况下为 O(n)（输入数组已经排好序的情况下）。插入排序也是稳定的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="merge-sort">Merge Sort<a href="https://xnth97.github.io/2018/02/04/sorting-algorithms#merge-sort" class="hash-link" aria-label="Merge Sort的直接链接" title="Merge Sort的直接链接">​</a></h2>
<p>归并排序的思路是 divide and conquer algorithms 的一个生动的例子。归并排序的思路为：</p>
<ul>
<li>用归并排序排好前一半</li>
<li>用归并排序排好后一半</li>
<li>归并排好序的两半</li>
</ul>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">mergeSort</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// helper that merges two parts</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">merge</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token omit keyword" style="color:hsl(301, 63%, 40%)">_</span><span class="token plain"> a</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token omit keyword" style="color:hsl(301, 63%, 40%)">_</span><span class="token plain"> b</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> merged</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> aIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> bIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token plain"> aIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> a</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;&amp;</span><span class="token plain"> bIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> a</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">aIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">bIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                merged</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">aIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                aIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                merged</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">b</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">bIdx</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                bIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> aIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> a</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            merged </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+=</span><span class="token plain"> a</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">aIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> a</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> bIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            merged </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+=</span><span class="token plain"> b</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">bIdx </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> merged</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> data</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> mid </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token operator" style="color:hsl(221, 87%, 60%)">/</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// create left array</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Array</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> mid</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// create right array</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Array</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">mid </span><span class="token operator" style="color:hsl(221, 87%, 60%)">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// call itself with left half</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> sortedLeft </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">mergeSort</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// call itself with right half</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> sortedRight </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">mergeSort</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// merge</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">merge</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">sortedLeft</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> sortedRight</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>归并排序的时间复杂度为 O(n log n)，空间复杂度为 O(n)，是稳定的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="quick-sort">Quick Sort<a href="https://xnth97.github.io/2018/02/04/sorting-algorithms#quick-sort" class="hash-link" aria-label="Quick Sort的直接链接" title="Quick Sort的直接链接">​</a></h2>
<p>快速排序的思路主要有三步：</p>
<ul>
<li>把数组分成左半部分（较小值）和右半部分（较大值）</li>
<li>用快速排序排序左半部分</li>
<li>用快速排序排序右半部分</li>
</ul>
<p>中心思想就是 partitioning，需要选择一个 pivot value 来决定每个值属于哪个部分。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">quickSort</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">partition</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> pivot</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> leftPtr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> rightPtr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token plain"> arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">leftPtr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> pivot </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                leftPtr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token plain"> rightPtr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">rightPtr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;</span><span class="token plain"> pivot </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                rightPtr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> leftPtr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;=</span><span class="token plain"> rightPtr </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">leftPtr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">rightPtr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">rightPtr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">leftPtr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> leftPtr</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">quickSortHelper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// base case</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// last value is pivot</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> pivot </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> partition </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">partition</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> pivot</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> pivot</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token function" style="color:hsl(221, 87%, 60%)">quickSortHelper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> partition </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token function" style="color:hsl(221, 87%, 60%)">quickSortHelper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> partition </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token function" style="color:hsl(221, 87%, 60%)">quickSortHelper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这是一种原位置排序的实现。利用 Swift 语言的特性，我们可以给出一种远远更为简洁的实现：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:hsl(221, 87%, 60%)">quickSortV2</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">count </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> data</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> unsorted </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> data</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// initialize arrays</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">var</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Int</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// pick pivot value</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">let</span><span class="token plain"> pivot </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> unsorted</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">popLast</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">for</span><span class="token plain"> x </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">in</span><span class="token plain"> unsorted </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> x </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> pivot </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">append</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// call itself</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">return</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">quickSortV2</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">left</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain">pivot</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">quickSortV2</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">right</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>快速排序的时间复杂度为 O(n log n)。根据下面和大佬同学 <a href="https://dinglisa.com/blog/" target="_blank" rel="noopener noreferrer">@LisaDing</a> 的讨论，原地快速排序的空间复杂度一般可以为 O(log n)（即递归深度，因为每次保存常数信息，栈帧里总共就会有 log n，具体讨论可见 <a href="https://stackoverflow.com/questions/12573330/why-does-quicksort-use-ologn-extra-space" target="_blank" rel="noopener noreferrer">这里</a>），worst case 为 O(n)。第二种非原地的快速排序空间复杂度为 O(n log n)（具体见 <a href="https://stackoverflow.com/questions/38487269/space-complexity-of-quick-sort" target="_blank" rel="noopener noreferrer">stackoverflow 的这个帖子</a>）。因此，快速排序的空间复杂度和具体实现关系很大。快速排序是不稳定的。</p>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
    </entry>
</feed>