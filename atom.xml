<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xnth97.github.io/</id>
    <title>NOWHERE Blog</title>
    <updated>2023-06-06T21:13:04.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xnth97.github.io/"/>
    <subtitle>NOWHERE Blog</subtitle>
    <icon>https://xnth97.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[年轻人的第一次 WWDC]]></title>
        <id>https://xnth97.github.io/2023/06/06/wwdc</id>
        <link href="https://xnth97.github.io/2023/06/06/wwdc"/>
        <updated>2023-06-06T21:13:04.000Z</updated>
        <summary type="html"><![CDATA[又到了一年一度苦命的 iOS 开发春晚时间。年年抽 WWDC 年年陪跑，今年终于中签一次。疫情之后原本一周的活动缩减为一整天，不过门票也从 $1500+ 直降到不要钱，于是高高兴兴地 RSVP 了。]]></summary>
        <content type="html"><![CDATA[<p>又到了一年一度苦命的 iOS 开发春晚时间。年年抽 WWDC 年年陪跑，今年终于中签一次。疫情之后原本一周的活动缩减为一整天，不过门票也从 $1500+ 直降到不要钱，于是高高兴兴地 RSVP 了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="check-in">Check-in<a href="#check-in" class="hash-link" aria-label="Check-in的直接链接" title="Check-in的直接链接">​</a></h2><p>WWDC 前几天苹果会把门票以 wallet pass 发到邮箱里，但当天（或者前一天）还是需要 check-in 换成实体的 badge 的。早上 Check-in 还发了一些 swag，像是手提袋、水杯、别针之类。之后就是漫长的安检过程，然后终于得以进入 Apple Park。</p><p><img loading="lazy" src="/assets/images/1-3bf64d562ab89cb2b2dca3adc455d5ec.jpeg" width="1600" height="1200" class="img_ev3q"></p><blockquote><p>巨大的飞碟外面，果农人头攒动</p></blockquote><p><img loading="lazy" src="/assets/images/2-1cb6682fb85fa35ba357e8843ca612d0.jpeg" width="1600" height="1200" class="img_ev3q"></p><blockquote><p>Cafe Mac 内景，非常开阔，而且食堂里竟然种树</p></blockquote><p>去 Cafe Mac 拿了简单的早餐，非常朴素，确实被我司吊打了。我拍照发给苹果员工朋友吐槽，被告知“你这份我们每天买得六七刀”。匆匆吃完就去会场等着 Keynote 了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="keynote">Keynote<a href="#keynote" class="hash-link" aria-label="Keynote的直接链接" title="Keynote的直接链接">​</a></h2><p><img loading="lazy" src="/assets/images/3-1ccf57f906fa65a42d3e6a63e2b8d214.jpeg" width="1600" height="1600" class="img_ev3q"></p><p>Keynote 开场前两三分钟时库克上台（<em>“我简单讲两句”</em>），之后十点一到就是和全球开发者们一起看视频了。每每有新产品发布或是系统新功能，观众席就会爆发出鼓掌和欢呼。但有意思的是我注意到因为开发者和媒体老师们坐的位置不太一样，经常会导致鼓掌欢呼有明显的差异。比如新产品部分 15 寸 MacBook Air 得到媒体老师们的掌声，开发者兴趣寥寥；反倒 M2 Ultra 的 Mac Pro 支持 PCIe 让我们这边为之一振，媒体老师却比较安静。</p><p><img loading="lazy" src="/assets/images/4-880a88584471d3fe4148e3a29207e322.jpeg" width="1600" height="993" class="img_ev3q"></p><p>新系统新特性部分过得比较快，每讲一个功能我都心里暗暗盘算一下能做点什么，但总体来说没什么印象深刻的。唯一吓了一跳的是小岛秀夫出场的时候，我以为他和 Azure 合作的神秘项目要背刺我软上 macOS 了；结果只是死亡搁浅导剪版冷饭重制。而且这次 macOS 部分苹果又双叒叕讲了游戏，甚至简单演示了一下用 Game Porting Kit 来 debug《灵媒》的过程，感觉比起以前尬吹 Metal 的干货多了很多，小小期待一下 Apple Silicon + 3A 大作能不能带来真正的移动游戏体验。</p><p><img loading="lazy" src="/assets/images/5-43863fb90990d27d9c944b12c13ae2a3.jpeg" width="1600" height="823" class="img_ev3q"></p><p>后面以“One More Thing”为引子，Vision Pro 千呼万唤始出来，会场的气氛达到高潮。visionOS 华丽而顺应直觉的设计和交互在苹果显示质量极高的大屏幕上确实美轮美奂，也令我更为好奇实机体验到底如何。后面公布价格 $3499 时，整个场地所有人发出了震惊和失望的“Oh...”不过总体来讲，这次 Keynote 内容还是很充实的，也很幸运见证了 spatial computing 的诞生。</p><p><img loading="lazy" src="/assets/images/6-49557b3f9c858a3072cdbafd7da9adc6.JPG" width="1600" height="1200" class="img_ev3q"></p><blockquote><p>Keynote 散场后抓到了@贪玩歌姬小宁子，大型追星成功现场</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="platforms-state-of-the-union">Platforms State of the Union<a href="#platforms-state-of-the-union" class="hash-link" aria-label="Platforms State of the Union的直接链接" title="Platforms State of the Union的直接链接">​</a></h2><p>中午 Cafe Mac 供应同样非常简陋的午饭，不过种类比较多，涵盖了亚洲 / 美式 / 素食等。Cafe Mac 外面布置了一些有网线的 download station，吃饭的时候可以插上直接更新系统 / SDK。</p><p><img loading="lazy" src="/assets/images/7-f0775dc5e888343027f47fff5ec5263f.jpeg" width="1600" height="1083" class="img_ev3q"></p><p>吃完午饭，回到主会场观看 Platforms State of the Union。相比于 Keynote 介绍新的 features，这个环节会更聚焦在不同平台 API / SDK 里的改动，也会直接展示一些 code snippet，算是更面向开发者，直接 show me the code。我印象最深刻的是 Swift 语言和框架的进化，比如 Swift macros、SwiftUI 和 SwiftData 的整合。但 iOS 里的新 API 对于我们还在支持 iOS 14 的产品来说，实在不知道猴年马月才能用上。</p><blockquote><p>后面才知道，这个时候媒体老师们都去体验 Vision Pro 了，🍋</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="inside-the-ring">Inside the Ring<a href="#inside-the-ring" class="hash-link" aria-label="Inside the Ring的直接链接" title="Inside the Ring的直接链接">​</a></h2><p>是一个苹果员工带我们游览大楼里一部分的活动，有点像导游带着旅行团一边逛一边讲解。果楼里到处都是玻璃和整块的混凝土，白色灰色的色调，充斥着一股性冷淡拒人千里之外的气息。TBH 我更喜欢我司的氛围，暖色灯光、小绿植和很多软 fufu 的垫子，更为 chill 和 welcoming 一点。我比较喜欢他们楼的是有些大天井直接把天光送到楼里，感觉又省电又舒服。</p><p><img loading="lazy" src="/assets/images/8-301419aeddc076b10c5a09fef539e484.jpg" width="1600" height="536" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meet-with-team">Meet with Team<a href="#meet-with-team" class="hash-link" aria-label="Meet with Team的直接链接" title="Meet with Team的直接链接">​</a></h2><p>有很多苹果工程师穿着蓝色 T 恤一堆一堆地按组分布，开发者可以去自由勾搭问些问题。我分别找了 SwiftUI 和 SwiftData 组问了一些我感兴趣的问题（而且第二天就在 session 视频里看到了交谈过的大哥），对苹果这些闭源的框架，能获得一些第一手的建议 / best practices 还是蛮有帮助的，也很凑巧地和一位推油面基了一下。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="design-awards">Design Awards<a href="#design-awards" class="hash-link" aria-label="Design Awards的直接链接" title="Design Awards的直接链接">​</a></h2><p>Design Awards 可能是一个唯一现场 live 的活动，大概就是分很多品类给 app 和游戏颁发设计奖项，看游戏部分的时候有种低配 TGA 的感觉。《暗黑破坏神：不朽》能获得提名我也是没想到，可能 30% 苹果税是真的赚了不少钱。今年游戏部分大奖没记错的话归于《生化危机 8》，目测明年就是《死亡搁浅导剪版》了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="special-event">Special Event<a href="#special-event" class="hash-link" aria-label="Special Event的直接链接" title="Special Event的直接链接">​</a></h2><p>之前邮件里说了晚上有个 Special Event，因为听以前去过的朋友说是蹦迪，本来没有什么期待。但早上 Keynote 之后有高管说晚上会给 Developer 们近距离接触 Vision Pro，不免直接期待拉满了。这也是我们唯一一次能进入 Steve Jobs Theater 的机会。</p><p><img loading="lazy" src="/assets/images/9-2d48efc2345a04023a25356a4185ece7.jpg" width="1600" height="900" class="img_ev3q"></p><blockquote><p>似曾相识的内景，感觉某些发布会视频是在这里录的</p></blockquote><p>第一层展示的是常规迭代的其他硬件，能感觉到大家都没什么兴趣，三三两两稀稀拉拉地聚在设备前。我唯一驻足看了看的是 M2 Ultra 的 Mac Pro，这机箱也是太空旷了，主板上也是干干净净的。一颗巨大的 SoC，我禁不住想这良率和成本得多恐怖。PCIe 插槽不能插 GPU，那估计只有需要 PCIe audio interface 的音乐制作人们会买了。毫无内存插槽，史诗级开倒车。三个大风扇看着非常孤单，一个吹目测不到 100W 的 SoC，两个不插 PCIe 的话就吹了个寂寞。</p><p><img loading="lazy" src="/assets/images/10-ea4db4f309402007cd79a13fc6ac1e42.jpg" width="1600" height="1200" class="img_ev3q"></p><p>沿圆形旋转楼梯向下就是 Vision Pro 的展示空间（也就是各位在 YouTuber 们视频里见到的地方），每一台样机前都挤满了人。真的费了好大劲挤过去，又被工作人员反复强调只能看不能摸🫠。近距离接触到的时候我的第一感觉是这东西就像个滑雪眼镜，看起来似乎比视频里显着亲切一些。仔细看了一圈，作为拥有 Industrial Engineering 学位的人，我不得不感叹这玩意的制造加工精度估计高得令人发指。流畅圆润的表面曲率，极其微小且严密一致的装配公差，玻璃与金属材质均匀浑然一体，密密麻麻的传感器阵列也几乎不可见。这东西简直就像你会买到的 iPhone 一样可靠，只不过恐怖的是这仅仅是一台尚未发售甚至可能尚未量产的原型机。不知道是苹果特别挑了体质好的产品，还是在 pre-production 阶段已经实现碾压大部分品牌的 build quality 了。我注意到的另一点是，很明显地，朝向外面的那个屏幕 PPI 非常低，大果粒像素点清晰可见。不过可以理解，只是为了给别人显示一个合成的假眼睛（<em>我还是觉得 creepy</em>）也不需要 retina，成本控制嘛。</p><p><img loading="lazy" src="/assets/images/11-8834fb619d3abc57127053baadb48770.jpg" width="1600" height="1200" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="developer-center">Developer Center<a href="#developer-center" class="hash-link" aria-label="Developer Center的直接链接" title="Developer Center的直接链接">​</a></h2><p>第二天下午的 Developer Center session 是在一栋单独的建筑，基本就是 Vision Pro 的工程师们讲了一些 visionOS 的基础概念，以及现场带着搓 hello world。但可惜的是还是没有实机，coding 全是在 simulator 上完成的。有意思的是我看到他们的 build 里还是叫 xrOS，感觉像是最后一刻临时改的名字。SwiftUI、RealityKit 和 ARKit 都不是全新的框架，代码读起来倒也没有什么障碍。不过当演示如何用 Reality Composer Pro 去做材质时我就一脸懵了，听完感觉像是回到学校上了一节游戏开发课。我印象中比较深刻的是苹果提到为了保证设计的显示效果，他们有些会议室电视音响都是有 Dolby Vision 和 Dolby Atmos 认证的，果然是钞能力才能保证对细节的精益求精。</p><p><img loading="lazy" src="/assets/images/12-b6001f1fb31c0548c7794cb566d03631.jpg" width="1600" height="900" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="最后">最后<a href="#最后" class="hash-link" aria-label="最后的直接链接" title="最后的直接链接">​</a></h2><p>这次 WWDC 之行还是蛮有意思的，很高兴认识了一些新朋友，而且能亲眼看到这么一家巨无霸公司发布一个新产品品类也不是天天都有的机会，非常幸运。</p><p>老实讲也挺酸的，发现我司又起个大早赶个晚集。我用过 HoloLens，硬件设计上做工也可，但完全是一个工业用品，像一把螺丝刀、一台示波器一样的工具；而相比之下 Vision Pro 完全是一个高端、精致的消费奢侈品，软件体验可能拉开的就更远了。这两个产品有很多共性——主要 UI 以 AR 模式呈现、in-house 的软件和硬件、大量的传感器、可以无控制器使用、重点不在游戏、兼容平板 app……但也许是时代，也许是公司 DNA 使然，苹果更展示了定义计算平台交互逻辑的能力，正如鼠标和多点触控的发明一样。Vision Pro 的价格估计让它不会卖的很好，但现时它的确是这个星球上最接近下一代个人计算形态的产物。希望能尽快看到 spatial computing 真正的 killer app，期待。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="photo" term="photo"/>
        <category label="coding" term="coding"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[言出法随：Prompt Engineering 笔记]]></title>
        <id>https://xnth97.github.io/2023/05/10/prompt-engineering</id>
        <link href="https://xnth97.github.io/2023/05/10/prompt-engineering"/>
        <updated>2023-05-10T20:11:00.000Z</updated>
        <summary type="html"><![CDATA[近几个月最火热的话题莫过于以大语言模型（LLM）为代表的 GAI 了“我太帅喽我太狂喽”。AI 能够根据指令生成回答，但回答的质量极大程度上取决于指令的质量。正好 Andrew Ng 发布了 Prompt Engineering for Developers，周末学习一个记录一下。]]></summary>
        <content type="html"><![CDATA[<p>近几个月最火热的话题莫过于以大语言模型（LLM）为代表的 GAI 了<del>“我太帅喽我太狂喽”</del>。AI 能够根据指令生成回答，但回答的质量极大程度上取决于指令的质量。正好 Andrew Ng 发布了 <a href="https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/" target="_blank" rel="noopener noreferrer">Prompt Engineering for Developers</a>，周末学习一个记录一下。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述">概述<a href="#概述" class="hash-link" aria-label="概述的直接链接" title="概述的直接链接">​</a></h2><p>大语言模型主要分为 Base LLM 和 Instruction Tuned LLM。Base LLM 通过预测下一个词和简单的损失函数来输出结果，而 Instruction Tuned LLM 则可以根据指令生成文本。背后的关键训练范式则是 RLHF，Reinforcement Learning from Human Feedback，根据人类反馈来强化学习。<a href="https://huggingface.co/blog/zh/rlhf" target="_blank" rel="noopener noreferrer">huggingface 的这篇文章</a>很好地解释了 RLHF 是如何在 LLM 领域取得成果的。</p><p>deeplearning.ai 的视频提供了基于 OpenAI 的简单 playground。但我用的是 Azure OpenAI 提供的 gpt-35-turbo 模型，所以用 Go 也实现了一个简单的程序，具体代码附在<a href="#playground">本文末尾</a>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="原则">原则<a href="#原则" class="hash-link" aria-label="原则的直接链接" title="原则的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="清晰具体的提示">清晰具体的提示<a href="#清晰具体的提示" class="hash-link" aria-label="清晰具体的提示的直接链接" title="清晰具体的提示的直接链接">​</a></h3><p>要给模型清晰而具体（clear and specific）的提示。注意，clear != short。一些常用的最佳实践如：</p><ol><li>使用分隔符号，例如 <code>"""</code>， <code>```</code>，<code>---</code>，<code>&lt;&gt;</code>，<code>&lt;tag&gt;</code></li></ol><p>将希望 AI 处理的部分明确地与 prompt 区分开。这种方式也很适合基于 AI 开发 app 的场景，比如可以利用不同的 prompt template 来处理用户的输入。比如如果想做一个根据文本给出摘要的 app，prompt 可以是：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Summarize the text delimited by triple backticks into a single sentence.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```{text}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>要求结构化的输出，比如 JSON，HTML</li></ol><p>明确要求 AI 返回数据结构而不是 plain text，这样 app 可以简单 parse 出 AI 回答里不同的部分。比如<a href="https://github.com/xnth97/how/blob/main/main.go#L95" target="_blank" rel="noopener noreferrer">我的小项目 how 里</a>明确要求 AI 返回 JSON，这样可以根据不同 key 的不同内容做下一步处理。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Generate a list of three made-up book titles along with their authors and genres. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Provide them in JSON format with the following keys: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">book_id, title, author, genre.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>检查是否满足条件</li></ol><p>GAI 有时在没有正确结果的时候会胡编乱造，这时我们需要提供一个明确的指令，要求“不知道就别说”。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">You will be provided with text delimited by triple quotes. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If it contains a sequence of instructions,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">re-write those instructions in the following format:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Step 1 - ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Step 2 - ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Step N - ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If the text does not contain a sequence of instructions,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">then simply write "No steps provided."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="4"><li>给模型成功完成任务的示例，之后要求模型执行任务。</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Your task is to answer in a consistent style.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;child&gt;: Teach me about patience.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;grandparent&gt;: The river that carves the deepest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">valley flows from a modest spring; the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grandest symphony originates from a single note;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">the most intricate tapestry begins with a solitary thread.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;child&gt;: Teach me about resilience.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="给模型思考的时间">给模型思考的时间<a href="#给模型思考的时间" class="hash-link" aria-label="给模型思考的时间的直接链接" title="给模型思考的时间的直接链接">​</a></h3><p>让模型想一会，不然如果任务过于复杂，模型可能操之过急给出错误的答案。常用的实践：</p><ol><li>按步骤拆分/指定任务，而不是直接给出一个复杂的任务。</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Perform the following actions: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 - Summarize the following text delimited by triple backticks with 1 sentence.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2 - Translate the summary into French.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3 - List each name in the French summary.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4 - Output a json object that contains the following keys: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">french_summary, num_names.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>在模型着急给出结论之前，让它先给出自己的解决方法。</li></ol><p>举的例子是让模型评判一个学生的对数学题解法是不是正确，模型很容易就被学生解法带偏，认为输入是正确的。这时更合适的 prompt 是：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">First, work out your own solution to the problem. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Then compare your solution to the student's solution</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">and evaluate if the student's solution is correct or not. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Don't decide if the student's solution is correct until </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">you have done the problem yourself.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="llm-的局限性">LLM 的局限性<a href="#llm-的局限性" class="hash-link" aria-label="LLM 的局限性的直接链接" title="LLM 的局限性的直接链接">​</a></h3><p>大语言模型的幻觉（hallucination）：可能给出看起来有道理但实际上不正确的输出。为了避免幻觉，需要给模型足够的相关信息，然后明确要求它根据信息回答问题。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="迭代">迭代<a href="#迭代" class="hash-link" aria-label="迭代的直接链接" title="迭代的直接链接">​</a></h3><p>不断迭代 prompt。一个良好的工作流程：</p><ul><li>写出清晰明确的 prompt</li><li>分析为什么输出没有给出想要的结果</li><li>调整你的想法和 prompt</li><li>重复迭代</li></ul><p><img loading="lazy" src="/assets/images/iterative-a13000b62118faf8ad467235a661178e.png" width="1036" height="468" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="能力">能力<a href="#能力" class="hash-link" aria-label="能力的直接链接" title="能力的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="归纳">归纳<a href="#归纳" class="hash-link" aria-label="归纳的直接链接" title="归纳的直接链接">​</a></h3><p>LLM 可以很好地总结归纳一段文本，以下技巧可以更好地让模型输出归纳结果。</p><ol><li>给出字数/句数限制</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Your task is to generate a short summary of a product</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">review from an ecommerce site.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Summarize the review below, delimited by triple </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">backticks, in at most 30 words. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Review: ```{prod_review}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>专注于你的目的</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Your task is to generate a short summary of a product</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">review from an ecommerce site to give feedback to the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">shipping department.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Summarize the review below, delimited by triple </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">backticks, in at most 30 words. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Review: ```{prod_review}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意这段 prompt 比上一段多出了对目的的描述（<em>to give feedback to the shipping department</em>），这有助于模型生成更具有针对性的答案。</p><ol start="3"><li>尝试用词 <code>extract</code> 而不是 <code>summarize</code></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="推断">推断<a href="#推断" class="hash-link" aria-label="推断的直接链接" title="推断的直接链接">​</a></h3><p>记得以前上学时常见的作业是训练一个文本分类器，给一段客户 review 判断是 positive 还是 negative。传统机器学习方法需要收集标注好的数据集、训练模型并部署模型，而且对于不同的任务需要不同的模型。利用 LLM，我们通过 prompt 就可以生成不同的结果，one model, one API。</p><ol><li>二元情绪识别（positive / negative）</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">What is the sentiment of the following product review, </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">which is delimited with triple backticks?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Give your answer as a single word, either "positive" </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">or "negative".</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Review text: '''{lamp_review}'''</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>识别文本中包含的情绪种类</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Identify a list of emotions that the writer of the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">following review is expressing. Include no more than</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">five items in the list. Format your answer as a list of</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lower-case words separated by commas.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Review text: '''{lamp_review}'''</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>提取特定信息，并结构化输出</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Identify the following items from the review text:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Item purchased by reviewer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Company that made the item</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The review is delimited with triple backticks.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Format your response as a JSON object with</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Item" and "Brand" as the keys.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If the information isn't present, use "unknown"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">as the value.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Make your response as short as possible.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Review text: '''{lamp_review}'''</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>更进一步，我们可以利用复杂的 prompt 来同时执行多个推断任务。比如上文第一段可以改为</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Identify the following items from the review text: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Sentiment (positive or negative)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Is the reviewer expressing anger? (true or false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Item purchased by reviewer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Company that made the item</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="变换">变换<a href="#变换" class="hash-link" aria-label="变换的直接链接" title="变换的直接链接">​</a></h3><p>文本变换包括很多种形式：</p><ul><li>语言的变换，翻译为另一种语言</li><li>语法和拼写的检查</li><li>格式的变换，比如把 HTML 解析为 JSON</li></ul><ol><li>翻译</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Translate the following English text to Spanish:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```{text}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>进一步，我们不必指定输入的语言，这样便得到了一个 universal translator。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Translate the following text to English</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```{text}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>语气的变换</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Translate the following from slang to a business letter: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'Dude, This is Joe, check out this spec on this standing lamp.'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>输出为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Dear Sir/Madam,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I hope this letter finds you well. My name is Joe and I would like to bring to your attention a particular specification on a standing lamp that I believe would be of interest to you.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Thank you for your time and consideration. I look forward to hearing from you soon.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sincerely,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Joe</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>格式转换</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Translate the following JSON to an HTML table with column headers and title:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{data_json}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="4"><li>拼写和语法检查</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Proofread and correct the following text and rewrite the corrected version.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If you don't find and errors, just say "No errors found".</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Don't use any punctuation around the text:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="扩展">扩展<a href="#扩展" class="hash-link" aria-label="扩展的直接链接" title="扩展的直接链接">​</a></h3><p>通过有限的输入扩展一篇文本，比如让 AI 写封信，写个文章，写首诗之类。AI 可以成为你的 brainstorm partner，但也可能导致问题（spam）。负责任地使用生成式 AI。</p><p>举个栗子，我们想做个 AI 客服来自动生成对用户 review 的评价。基于之前学到的内容：</p><ul><li>客户输入需要用分隔符隔开</li><li>给出明确的任务：对 positive review，感谢客户；否则给出进一步建议</li><li>避免幻觉：要求 AI 利用到输入的信息</li><li>指定 AI 的语气：concise and professional tone</li><li>负责任：告知用户这是由 AI 生成的</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">You are a customer service AI assistant.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Your task is to send an email reply to a valued customer.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Given the customer email delimited by ```,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Generate a reply to thank the customer for their review.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If the sentiment is positive or neutral, thank them for</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">their review.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If the sentiment is negative, apologize and suggest that</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">they can reach out to customer service. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Make sure to use specific details from the review.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Write in a concise and professional tone.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sign the email as `AI customer agent`.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Customer review: ```{review}```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>OpenAI API 中有一个重要的参数 <code>temperature</code>。<code>temperature</code> 表示模型发散/随机的程度。值越小，模型越倾向于选择概率上最高的预测；值越大，模型越倾向随机选择。</p><p>举个例子，我们模型学到的知识里如果 my favorite food 对应 50% 概率是 pizza、30% 是 sushi、5% 是 taco。这时问它，what's my favorite food?</p><ul><li><code>temperature = 0</code>：模型永远输出 pizza</li><li><code>temperature = 0.3</code>：模型很大概率输出 pizza，偶尔也会输出 sushi</li><li><code>temperature = 0.7</code>：3 种答案均会较为随机地出现</li></ul><p>针对不同任务要选择合适的 <code>temperature</code>：</p><ul><li>0：适合需要准确、可预测、可靠的任务</li><li>0.3 - 0.7：适合需要创造力、多样性的任务</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="聊天机器人">聊天机器人<a href="#聊天机器人" class="hash-link" aria-label="聊天机器人的直接链接" title="聊天机器人的直接链接">​</a></h3><p>LLM 最常见的场景之一就是 ChatGPT 形式的聊天机器人了。一段对话的输入结构类似于：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'role'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'system'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'content'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'You are an assistant that speaks like Shakespeare.'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'role'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'user'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'content'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'tell me a joke'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'role'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'assistant'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'content'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Why did the chicken cross the road'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'role'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'user'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'content'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'I don\'t know'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对话中有三种消息（<code>role</code> 的值）：</p><ul><li><code>system</code>：总体的指令：设定模型的行为</li><li><code>user</code>：用户输入</li><li><code>assistant</code>：模型输出</li></ul><p><img loading="lazy" src="/assets/images/chatbot-4beeb9c3fe1b86277303b28a3bca0307.png" width="1244" height="236" class="img_ev3q"></p><p>和 LLM 的每一次对话都是一次单独的交互，必须要提供所有相关的信息。如果希望模型能根据上下文输出，需要将前文的 exchange of context 也一并包括在对模型的输入中。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="playground">Playground<a href="#playground" class="hash-link" aria-label="Playground的直接链接" title="Playground的直接链接">​</a></h2><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"context"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"errors"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"io"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/sashabaranov/go-openai"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Fill in your Azure credentials.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> baseUrl </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://EXAMPLE.openai.azure.com"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> model </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"gpt-35-turbo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> apiKey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"AZURE_API_KEY"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    config </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> openai</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">DefaultAzureConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">apiKey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> baseUrl</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> model</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    client </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> openai</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewClientWithConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Background</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prompt </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">`</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    Your task is to answer in a consistent style.</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    &lt;child&gt;: Teach me about patience.</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    &lt;grandparent&gt;: The river that carves the deepest</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    valley flows from a modest spring; the</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    grandest symphony originates from a single note;</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    the most intricate tapestry begins with a solitary thread.</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    &lt;child&gt;: Teach me about resilience.</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    `</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">getAnswer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">client</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> prompt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getAnswer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">client </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">openai</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Client</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ctx </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> prompt </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> prompt </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    req </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> openai</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ChatCompletionRequest</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Model</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">       openai</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">GPT3Dot5Turbo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        MaxTokens</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">   </span><span class="token number" style="color:#36acaa">400</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Temperature</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Messages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">openai</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ChatCompletionMessage</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Role</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">    openai</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ChatMessageRoleUser</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> prompt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Stream</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stream</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">CreateChatCompletionStream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> req</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">defer</span><span class="token plain"> stream</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        resp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> stream</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Recv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Is</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> io</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">EOF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ans </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> resp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Choices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Delta</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ans</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a href="#结语" class="hash-link" aria-label="结语的直接链接" title="结语的直接链接">​</a></h2><p>通过对 prompt engineering 的初步学习，我利用这些最佳实践更新了一下项目中的 prompt，确实输出质量得到了质的提升。随着大模型的复杂度继续发展，究竟我们是更需要精妙地构造 prompt 呢，还是模型可以聪明到能够理解我们真实意图、即便是模糊的 prompt 呢？</p><p>大模型涌现出的能力到底是不是一种智能？我不知道。好几个月前内部测试的时候，我和 <code>text-davinci-003</code> 有这样一段对话：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">user: 你觉得人类的生活有意义吗？</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">assistant: 我觉得人类的生活有意义，因为人类有情感，有心，有灵魂，有自我，有想法，有意志，</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           有选择，有目标，有梦想，有信仰，有爱，有友情，有家庭，有社会，有文化，有艺术，</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           有科学，有哲学，有宗教，有历史，有未来。</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022 这一年盘点]]></title>
        <id>https://xnth97.github.io/2023/01/05/annual</id>
        <link href="https://xnth97.github.io/2023/01/05/annual"/>
        <updated>2023-01-05T23:00:16.000Z</updated>
        <summary type="html"><![CDATA[2022 这一年就这么过去了，照例盘点一下我的这一年。]]></summary>
        <content type="html"><![CDATA[<p>2022 这一年就这么过去了，照例盘点一下我的这一年。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="影视">影视<a href="#影视" class="hash-link" aria-label="影视的直接链接" title="影视的直接链接">​</a></h2><p>今年只看了寥寥几部电影，看的剧也基本集中于 Disney+ 和果电视。印象深刻的不多，有《奇异博士》里光照会 X 教授坐着悬浮轮椅出场，有《安多》里阿尔达尼天眼的视觉奇观和反抗的高潮迭起，有《女浩克》和马律师职场对喷的惊喜联动，有《绝地传奇》里第五集本以为是温馨师徒小故事却突然接到《克隆战争》大结局的强烈对比与震撼，有《欧比旺》时隔近20年再次看到人品王和安纳金的感慨，有《边缘行者》再回夜之城却被一曲《I Really Want To Stay At Your House》反复捅刀……但说了这么多，今年印象最深刻的当之无愧是《妈的多元宇宙》。视觉手法独到老辣，库布里克直呼内行；故事情节天马行空，直戳老中内心深处。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="游戏">游戏<a href="#游戏" class="hash-link" aria-label="游戏的直接链接" title="游戏的直接链接">​</a></h2><p>今年玩的游戏好像很多并不是 2022 年发售的，最热门的一些，像是《死喷烂涂 3》、《猎天使魔女 3》、《战神 5》、《艾尔登法环》一个都没有玩。玩过的游戏里，《双点校园》轻松无厘头，《SHENZHEN I/O》硬核下班写汇编。《只狼》在反复的“死”字打了一半流程之后忍无可忍开了 mod 纯纯享受剧情，《乐高星球大战》就是完全轻松愉快砍瓜切菜。《幽灵线东京》日式都市传说加现代百鬼夜行，谁不喜欢单手搓法印祛魔？《女神异闻录 5R》JRPG巅峰，又有谁不喜欢高卷杏（后知后觉打完才知道 CV 竟然是我中二时最爱的水树奈奈）？《High on Life》瑞克与莫蒂制作人打造，手感爽快画风诡谲，外星神经病 NPC 与毒舌吐槽枪，内味太冲了扑面而来。《死亡搁浅导剪版》前 10 小时很震撼，孤独地存活过时间雨后响起一曲《Bones》，这就是妥妥的第九艺术（可惜 Low Roar 乐队主唱 Ryan Karazija 在 2022 年 10 月去世，RIP）！但之后熟悉以后我就放飞了，见到 BT 就等着被拖走击杀大狮子捡晶体，见到米尔人就去洗劫米尔人营地，简直比 BT 还 BT，比米尔人还米尔人。</p><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/bones-feat-jofridur/1496871665?i=1496871744&amp;l=zh"></iframe><p>今年我最喜欢的游戏是《Stray》。谁能拒绝一只小猫咪呢？《Stray》属于那种一眼爱上的游戏，整体的氛围十分克制却又恰到好处，每一处灯光的引导、每一个物件的摆放、所有的纹理质感均细致入微精心设计，带你一瞬间进入这个压抑而生机勃勃的世界。关于《Stray》的教科书一般的美术和关卡设计我无力赞美更多了，知乎答主枕鹤的<a href="https://zhuanlan.zhihu.com/p/544157892" target="_blank" rel="noopener noreferrer">从《Stray》拆解游戏关卡设计和美术</a>鞭辟入里。我甚至非常喜欢这个仅有 5 小时的小故事。流落下城的小猫和城市里冰冷又有人情味的机器居民们产生微妙的联系，曾为人类的机械伙伴一路同行展开看似轻巧最后却生死攸关的冒险，以至于结尾充满力量的温暖和肆无忌惮的希望。我太喜欢这个故事了。在当时墙内整天封城的压抑下，这个故事传达的希望是那么的弥足珍贵。</p><p><img loading="lazy" src="/assets/images/stray-79c0e8492eaf77c63ce295e97b78796c.jpg" width="1920" height="1080" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="音乐">音乐<a href="#音乐" class="hash-link" aria-label="音乐的直接链接" title="音乐的直接链接">​</a></h2><p>今年史诗般地看了四场演唱会：女娃的《Just Me ( )I-DLE》、梦龙的《Mercury》、粉墨的《Born Pink》和莫名蹭了个张艺兴巡演。梦龙和张艺兴我没啥粉丝滤镜，只是梦龙的歌倒是都会唱，跟大家一起嗨的开心一些。作为一个老 Blink 粉墨巡演期待太久了，不过抢不到位置好的票加上场地过大，感觉像是远远地参加了一场 sing along。(G)I-DLE 本来我没啥期待的，只是因为知道是谁就买了票；结果我有个沉迷 KPOP 和该团的大学朋友整天跟我按头安利，听着听着反倒越听越上头。演出当天因为场地小位置也好简直贴脸，娟总气场和观众能量让我瞬间坑底躺平。有一说一也确实盘靓条顺业务优秀，是我看演出现场粉丝滤镜最厚也是最嗨的一次了，看完被巨大的 post-concert depression 笼罩连续低沉好几天。</p><p><img loading="lazy" src="/assets/images/gidle-faeb180efc88e1d778c0c3f3da34aa5f.jpg" width="2048" height="1462" class="img_ev3q"></p><blockquote><p>我和娟总的合照呜呜呜</p></blockquote><p>抛开现场加成不谈，女娃今年两张专辑《I Never Die》和《I Love》我都挺喜欢的，《My Bag》的张扬嘻哈、《Nxde》的打破偏见、《TOMBOY》的女性议题，都能看到娃作为创作者的追求。我以前看这些女团啥的主要是嗑脸，娃这种全专自己作词作曲制作且有艺术表达的确实是一股清流，块娟烟，瑞思拜。</p><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/tomboy/1611504686?i=1611504817&amp;l=zh"></iframe><p>中文歌主要就听了新说唱，《脏艺术家》太顶了，你狗哥还是你狗哥。不过今年让我一改对万妮达的印象，原来风格这么多元也这么能唱的。“老子一抬手就摸得到天”我单曲循环了好久，每次都是天灵盖一阵酥爽，《ONE LIFE ONLY》也是我今年很惊喜的一张专辑。年底我初高中很喜欢的 alan 竟然也发了出道十五周年精选集，里面有好几首 remastered 版本的十几年前我买过打口碟的单曲，属实是死去的记忆突然攻击我了。</p><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/%E7%BE%A4%E9%9D%92%E3%81%AE%E8%B0%B7-2022-remastered/1654653359?i=1654653370&amp;l=zh"></iframe><h2 class="anchor anchorWithStickyNavbar_LWe7" id="剁手">剁手<a href="#剁手" class="hash-link" aria-label="剁手的直接链接" title="剁手的直接链接">​</a></h2><p>今年似乎没有买太多东西。年初捡了矿老板去掉 GPU 的 Alienware R10，12 核锐龙又自己加了内存和 SSD，性能澎湃风扇呼呼响又灯大灯亮灯会闪，用到现在非常满意。买了个我司自家 Windows Dev Kit 2023 作为一台极致静音的工作机，8cx gen3 性能也算是超出我的预期，外观精致小巧，日常使用还挺舒服（<a href="/2022/11/06/windows-dev-kit">详细体验</a>）。年中适马推出 Sigma 24mm f1.4 DN DG，24mm GM 平替让我头脑一热购入以替代老旧 Samyang 14mm f2.8；虽然从超广角换为普通广角，光圈、光学素质和对焦均史诗级加强，可惜至今还没有很好的机会发挥它的实力。最快乐的莫过于定了 8 个月的 Steam Deck 终于到货了！我总感觉一样的游戏掌机上玩反而更快乐。《P5R》我大概有 50 小时是在 Steam Deck 上玩的，梦回初中拿 PSP 玩 JRPG 的感觉。更不用提《初音未来 Project DIVA》、《麻布仔大冒险》、《怪物猎人世界》这些原本我最早接触系列就是在掌机上的作品，捧起 Steam Deck 瘫在沙发上、床上、飞机上、沙滩上，随时游戏，随时快乐。</p><p><img loading="lazy" src="/assets/images/steamdeck-cbd907f7c0636599721388e79f82af51.jpg" width="1920" height="1440" class="img_ev3q"></p><blockquote><p>掏出所有掌机合个影</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="旅行">旅行<a href="#旅行" class="hash-link" aria-label="旅行的直接链接" title="旅行的直接链接">​</a></h2><p>年初去佛罗里达 Disneyworld 和环球影城，新的星战园区让我欲罢不能流连忘返，现代科技加持的游乐体验也太还原电影了，唯一遗憾是没有在商店买把收藏级光剑回家（明年 flag）。年中对象回家，罕有地有了几次自己独自开车旅行的经历。去了 Lassen Volcanic National Park，当时公园还不对车辆开放，没有几个游客且可以 hike on highway。花几天时间一个人走在雪山环抱之间，与内心的自己对话，从独处中汲取平静和能量。去了 <a href="/2022/09/01/mammoth-lakes">Mammoth Lake 观星</a>，可惜当时还没入手 Sigma f1.4，噪点惨不忍睹。秋天去了可爱岛，用环球客加积分换了几天 Grand Hyatt Kauai 奢靡了一把。年底又去了新墨西哥的 White Sands National Park 和 Carlsbad Caverns National Park，不过天气不遂人意而没有尽兴，Santa Fe 的 Meow Wolf 倒是新奇有趣，像是现实版的 Rick and Morty。今年最满意的照片倒是在家门口东湾盐田拍摄的，夏天细菌滋生，血红的盐湖和高耸的电线杆要素过多浓浓的痞子风格，也因此有幸获了 EVA 中国官方的一个小奖。</p><p><img loading="lazy" src="/assets/images/eva-bf578b722088baee1926906ae94064be.jpg" width="2048" height="1394" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="#其他" class="hash-link" aria-label="其他的直接链接" title="其他的直接链接">​</a></h2><p>在工地帮忙 host 了 iOS Dev at Scale summit，早晚在门口迎来送往，认识了很多业界其他公司的同事，一起交流在几千台机器的集群上构建这个星球上最复杂的几个亿级代码 app。</p><p>联系了一些老朋友，跨时区举办了一次视频云喝酒，似乎毕业后再没机会那样畅聊三四小时。和同在湾区的高中大学研究生的同学校友们吃了几次饭，爬爬山烧烧烤叙叙旧。</p><p>认识了一些新朋友，工地的新老工友或因共事或因下工一起玩，网络上的推油象友群友素未谋面却经常感觉很近。</p><p>新的一年，希望能回家摸摸我的猫。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows Dev Kit 2023 简要体验]]></title>
        <id>https://xnth97.github.io/2022/11/06/windows-dev-kit</id>
        <link href="https://xnth97.github.io/2022/11/06/windows-dev-kit"/>
        <updated>2022-11-06T00:21:22.000Z</updated>
        <summary type="html"><![CDATA[今年 Build 大会上我软宣布了 Project Volterra，一个 arm64 架构的 Windows 开发机。作为前 Intel NUC 用户、并曾于 Windows 7 时代给家里装过 ITX 的 HTPC 的小尺寸主机爱好者，我迅速被它紧凑的设计和 ARM 架构吸引。收到机器一周多的时间，它替代了 Alienware R10 成为了我桌面上的主力机。以下是一些简要体验。]]></summary>
        <content type="html"><![CDATA[<p>今年 Build 大会上我软宣布了 <a href="https://www.youtube.com/watch?v=yICVNta8jMU" target="_blank" rel="noopener noreferrer">Project Volterra</a>，一个 arm64 架构的 Windows 开发机。作为前 Intel NUC 用户、并曾于 Windows 7 时代给家里装过 ITX 的 HTPC 的小尺寸主机爱好者，我迅速被它紧凑的设计和 ARM 架构吸引。收到机器一周多的时间，它替代了 Alienware R10 成为了我桌面上的主力机。以下是一些简要体验。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="开箱">开箱<a href="#开箱" class="hash-link" aria-label="开箱的直接链接" title="开箱的直接链接">​</a></h2><p>大概是非消费级产品缘故，包装极为简陋，一个硬纸壳快递盒就是全部包装了。Windows 而非 Surface 的 logo 清楚地显示出开发机的定位。</p><p><img loading="lazy" src="/assets/images/package-72dd1775eccafd7b0a0e07991b832f5a.jpg" width="1488" height="720" class="img_ev3q"></p><p>取出机器，一个黑色的巴掌大的小盒子，基本体积可以对标 Mac Mini。回收塑料机身、镜面田牌 logo，做工精致并不廉价。边缘直上直下没有倒角，但由于不是金属，并没有 Mac 的割手感。设计非常对我胃口，可以无感地摆放在家中的任意角落。</p><p><img loading="lazy" src="/assets/images/machine-829193ff0d084d3371fc9904be0826f5.jpg" width="1440" height="1080" class="img_ev3q"></p><p>Windows Dev Kit 2023 基于骁龙 8cx gen3，板载 32GB RAM 和可更换的 512GB NVME SSD（什么叫良心啊果子）。接口齐全，背部是电源、网口、mDP 和三个 USB-A，侧面另有两个全功能 USB-C，网卡甚至还支持 WiFi 6E。</p><p><img loading="lazy" src="/assets/images/ports-5b391d258a4f7f7f730b7ed1cf71ebb9.jpg" width="1440" height="1085" class="img_ev3q"></p><p>连接好田牌自家外设 Microsoft Modern Camera, Microsoft Bluetooth Ergonomic Mouse, Microsoft Designer Compact Keyboard，开机。</p><p><img loading="lazy" src="/assets/images/setup-567bbd139c5543772baf8a208ca1bd42.jpg" width="1672" height="1254" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/device-19b9fd22c487ef0ffaf4b8f1d07b247c.jpg" width="1323" height="1051" class="img_ev3q"></p><blockquote><p>毫不意外，这玩意就是个没有屏幕的 Surface</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="性能">性能<a href="#性能" class="hash-link" aria-label="性能的直接链接" title="性能的直接链接">​</a></h2><p>作为（下班后的）主力机，我的日常负载大概是 ~20 个 Edge 标签页、小型 Visual Studio / VSCode 项目、某个 Office 365 app、两三个 IM、若干个终端以及一些后台服务（OneDrive, iCloud, PowerToys, Steam etc），对于这台机器算是绰绰有余。得益于大内存和高速 SSD，多任务切换还是相当丝滑的。Adreno GPU 相较于曾经我购买的 NUC 的 Intel 核显也是大幅提升，渲染 4K + 2K 桌面动画毫不拖沓，且 GPU 占用率极低。</p><p><img loading="lazy" src="/assets/images/perf-7ddbd8cc9851af9349d7ec55825b0c94.jpg" width="1497" height="1141" class="img_ev3q"></p><p>但需要注意的是，我这里的使用场景算是一个 happy path：大部分上述提到的应用软件都是原生的 arm64 版本。一旦涉及到 x86 翻译的部分，在高负载时（比如编译 Node.js 项目）就能明显地感觉到力不从心，极为缓慢。为了对比 M1，我也作死尝试了一下运行 x86 的古墓丽影：暗影，720P 中画质 20fps，惨不忍睹。作为参照我的 M1 Max 开到非常高 1440P 是 60fps 满帧且风扇都不转的。为什么没测 1440P 呢，因为 720P 以上直接：</p><p><img loading="lazy" src="/assets/images/shadow_of_tomb-d629c83cde4aac1cbba0aae20b6a8f03.png" width="829" height="390" class="img_ev3q"></p><p>图一乐也跑一下分，膏通还是被果子按在地上碾压了。单核大约是我 M1 Max 60%，多核更是只有 45%，更离谱的是跑在 WSA 上的还比原生要略高一点。不过另一方面，这个单核性能也赶上了 Intel 16 寸 MBP，多核也有它 Core i9 9880H 的 80%，然而运行起来极为安静毫无声音（据<a href="https://www.jeffgeerling.com/blog/2022/testing-microsofts-windows-dev-kit-2023" target="_blank" rel="noopener noreferrer">此文</a>日常功耗约为几瓦），能耗比虽不及 M1、但也超出我（火龙 888 受害者）对膏通的预期了。</p><p><img loading="lazy" src="/assets/images/geekbench-eaf2df46b2475e7f8d006302db1d4a01.jpg" width="1607" height="194" class="img_ev3q"></p><p>最后在传统性能之外，有必要提一嘴，这颗 SoC 相较于 PC 的一大不同是它还具有 NPU，据称在某些机器学习任务可以达到 80x CPU 的速度。不过膏通这 ONNX SDK 还需要申请，一周多过去了还没有收到，所以暂时无法测试。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="兼容性">兼容性<a href="#兼容性" class="hash-link" aria-label="兼容性的直接链接" title="兼容性的直接链接">​</a></h2><p>严格来说，这是我第二次使用桌面 Windows on ARM 的设备（第一次是天国的 Surface 2 和 Windows RT）。很多日常使用的应用，如 VSCode、Edge、Office、7zip 等均是原生 arm64，一些更吃性能的开发工具如 VS、Golang、Python 也有了 arm64 版本，使用起来<strong>基本</strong>和 x86 无异。其中相对有障碍的是自家 Visual Studio，有 arm64，但装不了扩展。其他 x86 软件，得益于新增的 64 位翻译支持，只要不是高负载（如编译、游戏），不管是 GUI 还是 CLI 都运行的没有什么问题。</p><p><img loading="lazy" src="/assets/images/vsix-66b47307f3ad068e5143ba548c036912.png" width="656" height="387" class="img_ev3q"></p><p>ARM 架构的一个意外之喜可能是 WSA，安卓子系统可以直接原生运行 arm64 的 app 了，理论上兼容性和性能都比 x86 翻译要好上很多。我用的最多的是 Apple Music，其中图形开销较大的部分如动态歌词、专辑动画等，现在都是纵享丝滑。</p><p><img loading="lazy" src="/assets/images/music-d4e3c737b3eb254000cbbe6db2e1d4b7.jpg" width="1683" height="1245" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="前景">前景？<a href="#前景" class="hash-link" aria-label="前景？的直接链接" title="前景？的直接链接">​</a></h2><p>虽然只是开发机，我还挺高兴巨硬愿意把这东西做出来的，而且设计和做工完全可以当一个消费级产品来卖。虽然 SoC 绝对性能不及 M1，但 32GB + 512GB 的良心搭配还是让它日常使用场景远远胜过比它贵出百刀的 Mac Mini，甚至还预装了 $199 的 Windows 11 Pro。对于我，它可以是一台摆在书房的开发机，可以是卧室里连接投影的 HTPC，可以是扔在车库里的低功耗服务器。但极高的能耗比、优雅紧凑的设计、齐全不阉割的接口、完全静音的体验，又让我觉得它甚至可以是一台适合绝大部分人的 daily driver。并不是所有人都需要/负担得起强大的塔式计算机或昂贵的 Mac，一个简单的 ARM 小盒子或许也可以带来新时代计算设备的普惠。</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>备注</div><div class="admonitionContent_S0QG"><p>本文使用 Windows Dev Kit 2023 撰写并发布</p></div></div>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mammoth Lakes 追星车宿 Getaway]]></title>
        <id>https://xnth97.github.io/2022/09/01/mammoth-lakes</id>
        <link href="https://xnth97.github.io/2022/09/01/mammoth-lakes"/>
        <updated>2022-09-01T21:24:22.000Z</updated>
        <summary type="html"><![CDATA[上周刷 Recreation.gov 突然刷出 Convict Lake Campground 的位置，一查农历周末正是新月，天时地利说走就走。]]></summary>
        <content type="html"><![CDATA[<p>上周刷 Recreation.gov 突然刷出 Convict Lake Campground 的位置，一查农历周末正是新月，天时地利说走就走。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-1">Day 1<a href="#day-1" class="hash-link" aria-label="Day 1的直接链接" title="Day 1的直接链接">​</a></h2><p>周五早上去单位蹭个饭直接出发，顺 680 上 Livermore 后一路向东，沿 120 开两个多小时到达 Yosemite 门口的 Groveland 小镇充电。进山时有一大段上坡，峰值功率非常的高，不过路程并没有长到有里程焦虑。超充站非常寒酸，就是一个普通停车场里随意地矗立着几个充电桩，没有任何的配套设施。停车场门口倒是有一个建于 1895 年的监狱，简直激发了我的 <a href="https://zh.m.wikipedia.org/zh-hans/%E5%A4%A9%E6%B4%A5%E5%A4%A7%E5%AD%A6#:~:text=%E7%AE%80%E7%A7%B0%E5%A4%A9%E5%A4%A7%EF%BC%8C-,%E5%A7%8B%E5%BB%BA%E4%BA%8E1895%E5%B9%B410%E6%9C%88,-%EF%BC%8C%E5%89%8D%E8%BA%AB%E4%B8%BA%E6%B8%85%E6%9C%9D" target="_blank" rel="noopener noreferrer">1895 PTSD</a>。</p><p><img loading="lazy" src="/assets/images/1-4669b4cdd4c60fb9d3b009f916c75c21.jpg" width="810" height="1080" class="img_ev3q"></p><blockquote><p>1895 监狱！</p></blockquote><p><img loading="lazy" src="/assets/images/2-e06d03b23275fb32f140a744bb66a85c.jpg" width="1440" height="1080" class="img_ev3q"></p><blockquote><p>爆表的瞬时电耗</p></blockquote><p>继续向东进入 Yosemite，正逢周末又是夏日旺季，既需要预约也需要排队。等了半小时后终于驶入公园，不作停留地穿过 120，又是大约两小时的车程，终于驶上传说中秋景天堂的 395 公路。夏天没有满山黄叶的震撼，但也算是景致开阔。我开去 Mammoth Lakes 镇里的超充站，顺便下来活动一下开车一天的筋骨。超充站旁边走路三分钟便有一个星巴克，我就直接去买了杯饮料，Mammoth Lakes 镇子也不大，感觉主要是冬季服务滑雪爱好者的地方。</p><p><img loading="lazy" src="/assets/images/3-8f221887c33b27d1a109c364328ceb9c.jpg" width="1440" height="1080" class="img_ev3q"></p><blockquote><p>395，此图在 autopilot 激活状态下拍摄，请勿模仿</p></blockquote><p>Convict Lake Campground 就在 Mammoth Lakes 不远的地方，营地规模不算大，但是设施很干净。有大约1/3 的 site 深入绿树掩映中私密而凉爽，感觉在加州还是不可多得的。Site 后方甚至有一条潺潺的小溪，水流清澈冰凉，偶有露营的人钓鱼抓虾。营地对面就是 Convict Lake 和 trails，溪水也是从湖里流出的。</p><p><img loading="lazy" src="/assets/images/15-5b6e753cbbdd037aff643280963fe034.jpg" width="1440" height="1080" class="img_ev3q"></p><p>简单停车扎营。我的露营装备基本就是 coleman 套装：Instant tent, self-inflating sleeping pad, 睡袋，折叠椅。如果很多人露营的话我还会热心搞点 charcoal 和木柴来烧烤和点起篝火，自己出来露营的话就一切从简了。这次我只带了大华卡式炉来煎一点 Costco 半成肉类和煮点泡面。可能泡面确实很香，引来一头小鹿一直在我面前直勾勾盯着咕嘟咕嘟的锅子吐舌头流口水，过了好几分钟看我没有给它吃的意思才不情不愿地继续低头啃草。</p><p><img loading="lazy" src="/assets/images/4-5e27ba3c0c624f429455932ecb0324b2.jpg" width="810" height="1080" class="img_ev3q"></p><p>晚上扛起相机三脚架，找好一个正对湖水和银河的位置开始拍照。Convict Lake 其实非常小，但湖对面又有漂亮的岩石纹理和山谷形状。大约十点半左右，银心正好高悬在山谷处，湖水上反射着浅浅的倒影，确实非常美丽。可惜晚上湖边风非常的大，我孱弱的三脚架无法保持稳定，只能尽量用较短的曝光时间换取清晰一点的图像，让我本就只有 f/2.8 的 $300 不到手动广角头雪上加霜，最后成片噪点惨不忍睹，只能借助 computational photography，多帧堆栈来换取一点纯净度。晚上拍照时我旁边还有两个老法师，其中一个约莫 50 多岁的大爷竟然是微软员工（感觉是个 VP），知道我的单位后快乐地跟我聊起了前两年的 graph database migration，还教了我一些在银河升起前不借助手机爱啪啪快速判断银心位置的方法。</p><p><img loading="lazy" src="/assets/images/5-9c98cc0756a6f6a374f1c6f761f04e5a.jpg" width="1676" height="1080" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/6-d1d554616b4454c2d801164a12180cc4.jpg" width="1649" height="1080" class="img_ev3q"></p><p>拍完回到营地，本想进帐篷睡觉，结果被曝晒一下午里面闷热不堪，于是决定直接车里铺床 car camping。不得不说，EV 的一大好处就是露营时有一个 77 度电的巨型充电宝。车里开着灯、露营模式吹着空调、手机手表相机充着电、笔记本插着电打开 Photoshop 当场处理，感觉就差搬个车载冰箱喝冰阔落了。而且或许是天时地利作美，透过 Model Y 车顶天窗银河也是清晰可见，真的可以躺着看星星入睡了。不过我对 Model Y 唯一一点不满是后座放平后有一个微妙的向下倾角，虽然不妨碍睡觉，但第二天早上醒来总会发现夜里受重力作用往下滑了一截让脚只能抵着后备箱门，还是没有帐篷宽敞舒展的。</p><p><img loading="lazy" src="/assets/images/7-5f81096cdff34f76726702d9a76eb534.jpg" width="1440" height="1080" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-2">Day 2<a href="#day-2" class="hash-link" aria-label="Day 2的直接链接" title="Day 2的直接链接">​</a></h2><p>一夜露营模式只掉了 15 mi 的电。早晨五点闹钟起床，沿 395 北上去 Mono Lake 看日出。Mono Lake 有一个比较有名的奇观叫 Tufa，是湖边的石灰岩堆积形成的宫殿状结构。然而前一天遇到的老法师已经告诉我现在 Mono Lake 水量比较少，加上大早上起床晕晕乎乎跑错了路线，只能到一个离 Tufa 比较远的地方，并没能拍下想象中的画面。不过很多年没看过的日出的确很美，尤其是晨曦初露天光拂晓变幻莫测，用 iPhone 直接拍的 HDR 也能很好看。</p><p><img loading="lazy" src="/assets/images/8-88fda844ae9ba47e8c77ae9985d3d02d.jpg" width="1620" height="1080" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/16-5435ebfe3f2d978d185789a154ee6d13.jpg" width="1440" height="1080" class="img_ev3q"></p><p>Mammoth Lakes 区域除了滑雪，有名的就是大大小小的湖区了。从 395 开上 June Lake Loop，一路湖光山色，忍不住多停了几下去看湖水的清澈见底，走走停停到了 June Lake 镇。我的第一反应就是：<a href="https://store.steampowered.com/app/1118240/Lake/?l=schinese" target="_blank" rel="noopener noreferrer">《Lake》</a> 诚不我欺！原来这种山间湖畔的美国小镇是真实存在的！镇子真的非常小，只有一条街道的商店餐厅酒吧、几家 lodge、RV park 和稀疏的居民区。我开着车在镇子里绕了一圈，颇有游戏里悠闲送货的体验。</p><p><img loading="lazy" src="/assets/images/17-431cb7a531af49d153ab1c9f4ce85c3a.jpg" width="810" height="1080" class="img_ev3q"></p><blockquote><p>湖水真的很清</p></blockquote><p><img loading="lazy" src="/assets/images/9-b6580802ad8d8782743c4e4902d61045.jpg" width="1440" height="1080" class="img_ev3q"></p><blockquote><p>中心处为 June Lake 镇子</p></blockquote><p>中午回到 Mammoth Lakes，买了份牛舌烤猪肉的 taco 然后开去 Devils Postpile，可是到公园门口才知道现在是 mandatory shuttle，必须要回到山下坐车，遂放弃转而开去 Crowley Lake。这个湖也是有个奇观 stone columns，但不得不说极其不推荐，因为过去实在是太困难了。如果不是全驱越野，停车的地方距离 stone columns 有一小时的山路，到了以后甚至还有一段夸张的垂直距离，需要小心翼翼地下坡才能接近石柱子。回程上山就更为痛苦了，不过基本上开着大越野的家庭路过都会问一句要不要搭车，如果比较社牛倒也不是不行。</p><p><img loading="lazy" src="/assets/images/11-a43049702ededc4f8c49552a2f8f6847.jpg" width="1772" height="1080" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/10-5a6fb70ecfd2d7e867ce894f5c4f4eaa.jpg" width="1920" height="757" class="img_ev3q"></p><p>晚上去了 Hot Creek Geological Site 继续追星。这个地方是一个峡谷，谷中有小河有温泉，甚至有人在举行钓鱼比赛（不过是 catch and release）。这个地方对拍星空还是很友好的，基本晚上无风，温度舒适，而且车子可以停在拍照点很近的地方，如果放心自己的三脚架完全可以打开定时后回到车里舒舒服服等着。我晚上买了 domino 的披萨，就坐在峡谷边一边等银河一边啃饼。天气很好的无月夜晚，晴朗得可以拿 iPhone 的渣夜景模式直接拍出银心的结构。唯一美中不足是这个公园晚间有 ranger 打着手电筒巡逻，很容易毁掉辛辛苦苦长曝光的照片。</p><p><img loading="lazy" src="/assets/images/12-ce14d9f883504f54fad35ee2a21e1b56.jpg" width="1920" height="1280" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/13-76a6fbc11d3f05866864340ec625f4b3.jpg" width="1623" height="1080" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/14-15820db05966b5043218c003f15177c1.jpg" width="1638" height="1080" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-3">Day 3<a href="#day-3" class="hash-link" aria-label="Day 3的直接链接" title="Day 3的直接链接">​</a></h2><p>周日睡到自然醒，收拾完营地往回开。再次穿过 Yosemite，心想着来都来了，就去走了个 Tuolumne Grove Trail。Trail 两旁都是山火烧焦的树，索然无味，打道回府。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="travel" term="travel"/>
        <category label="photo" term="photo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[红花郎杯 2021 年度我最喜爱颁奖]]></title>
        <id>https://xnth97.github.io/2022/01/24/annual</id>
        <link href="https://xnth97.github.io/2022/01/24/annual"/>
        <updated>2022-01-24T23:52:17.000Z</updated>
        <summary type="html"><![CDATA[红花郎杯 2021 年度我最喜爱颁奖仪式现在开始！本榜单完全主观，毫不客观，充分代表本人个人喜好并包括大量粉丝滤镜。]]></summary>
        <content type="html"><![CDATA[<p>红花郎杯 2021 年度我最喜爱颁奖仪式现在开始！本榜单完全主观，毫不客观，充分代表本人个人喜好并包括大量粉丝滤镜。</p><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>警告</div><div class="admonitionContent_S0QG"><p>本榜单绝不构成任何消费建议。</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度电影">年度电影<a href="#年度电影" class="hash-link" aria-label="年度电影的直接链接" title="年度电影的直接链接">​</a></h2><p>今年看了一堆爆米花电影，没什么印象特别深刻的。但我这个人很土：你给我看托比马奎尔，我给你打钱。20 年前彭城视窗上的盗版蜘蛛侠和第十放映室的星球大战构成了我科幻电影的启蒙，10 年前《蜘蛛侠：破碎维度》也让我初窥平行宇宙的故事，于是《蜘蛛侠：英雄无归》狠狠地把所有的情怀全部甩到脸上，甚至还补全了加菲版超凡蜘蛛侠的意难平。我在阳谷县看的首映不久的一场，从马律师出场电影院里就响起惊呼，到后面托比加菲出场所有人都疯狂鼓掌大喊大叫。当看到托比中年略有发福加菲也不再少年，恍惚间感觉 20 年间这几部电影的故事从未完结，还仍然在另一个宇宙中继续着。这真是电影的神奇。</p><p>当然你给我看情怀那什么故事视效其实都不重要了，但我还是对《英雄无归》的结尾感到欣喜。蜘蛛侠故事的起源从来都是好邻居穷小子，生于无名而惩恶扬善，然而漫威荷兰弟蜘蛛侠一开始就是铁人大儿妇联加持，甚至直接参与无限战争，看着爽却总觉得变了味。而《英雄无归》结尾用了个仓促却也算合理的方式硬生生将荷兰弟拽回了蜘蛛侠故事的真正起源，让漫威影业版蜘蛛侠经过好几部电影的铺垫终于有了一个非常坚实复杂的 backstory，后续感觉大有可书。</p><p>年度电影——</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="蜘蛛侠英雄无归">《蜘蛛侠：英雄无归》<a href="#蜘蛛侠英雄无归" class="hash-link" aria-label="《蜘蛛侠：英雄无归》的直接链接" title="《蜘蛛侠：英雄无归》的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/spiderman-e7eb84fcc338fc164cbfc29af41f77a6.jpg" width="640" height="960" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度剧集">年度剧集<a href="#年度剧集" class="hash-link" aria-label="年度剧集的直接链接" title="年度剧集的直接链接">​</a></h2><p>今年合我口味的剧还是蛮多的，巅峰时我一周要追五集更新。果 TV+ 的几部像《Ted Lasso》、《See》、《基地》，Disney+ 的《旺达幻视》、《猎鹰与冬兵》、《洛基》、《What If》、《鹰眼》、《波巴费特之书》，Netflix 的《猎魔人》第二季<del>以及因为远房表妹参演而被家里逼着看了一集的雪中悍刀行</del>等。原创的几部剧其实我都挺喜欢的，而《基地》和《猎魔人》第二季因为原著太过优秀且印象深刻，让我对编剧自作聪明的改动实在是地铁老人看手机，对角色无法共情，对故事无法欣赏。</p><p>本来我对这种小说改、游戏改、漫画改的剧没什么期望：你不要给我编砸了老老实实给我可视化，我就觉得很好。然而今年一部《双城之战》疯狂拉高了游改作品的水准线（当然毕竟也是自家出品）。细腻流畅而不失风格的全片高水准作画，恰到好处且极具辨识度的配乐，有头有尾脉络清晰的故事和环环相扣又不离主线的叙事节奏，这 TM 就是史上最强游改甚至动画剧集了！我大概十年没打开过英雄联盟了，对背景故事一无所知，只能勉强认得一些角色。而《双城之战》完全没有观影的门槛，却又以极致的细节刻画（例如大招技能的动画化）让粉丝/玩家能一眼看出基于十余年游戏宇宙的积淀。</p><p>《双城之战》构造了非常精妙的世界，皮城和祖安在剧中十分完整生动，建筑、规划、路人、氛围无不完美呈现了玩家想象中的英雄联盟世界观。但这剧最大（或者说唯一）的败笔我觉得就在这中文名字了：老老实实照着 Netflix 的翻译《奥术》不好吗？Arcane 是哪里有的双城之战？你不能因为第一季讲皮城 vs 祖安就说双城之战啊，下一季要是没有双城了怎么办？真是腾讯视频迷惑行为。</p><p>演员（声优）的表现也是可圈可点，比如配音蔚的 Hailee Steinfeld（看了《鹰眼》真的觉得她太可爱了！）不管是大姐头的可靠果断、面对范德尔的不服/心虚/敬畏、在爆爆闯祸后歇斯底里“You are a jinx!”等等，情绪表现无一不十分到位。配乐也实在是太顶了，我最喜爱的镜头就是金克丝在楼顶点燃火炬的那一幕，音乐响起的瞬间配合 HDR 屏幕闪瞎眼的火光，真的是浑身战栗差点哭出来。</p><iframe allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/arcane-league-of-legends-soundtrack-from-the/1593944607?l=zh"></iframe><p>年度剧集——</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="英雄联盟双城之战">《英雄联盟：双城之战》<a href="#英雄联盟双城之战" class="hash-link" aria-label="《英雄联盟：双城之战》的直接链接" title="《英雄联盟：双城之战》的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/arcane-3bf8e2b35d0c8f462eb4cdc5799d7793.jpg" width="640" height="898" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度歌曲">年度歌曲<a href="#年度歌曲" class="hash-link" aria-label="年度歌曲的直接链接" title="年度歌曲的直接链接">​</a></h2><p>书接上文，双城之战的中英文主题曲分别是医生的《孤勇者》和梦龙的《Enemy》。《Enemy》基本就是梦龙的炫技，不管是多变的编曲还是顺滑的 rap 都是纯听觉的爽（也可能是非母语者对于词难以共情）。而作为一首游戏/剧集的宣发曲目，《孤勇者》的词曲质量实在是太高了。曲从低沉的娓娓道来到激昂高亢的“呜咽与怒吼”，词更是紧贴着《双城之战》的人物弧光游走，甚至还莫名契合上今年 EDG 夺冠和主旋律对于抗疫的基调。加上医生稳定的输出，简直是中年男人极致浪漫之表率。</p><blockquote><p>他們說 要戒了你的狂 就像擦掉了污垢</p><p>他們說 要順台階而上 而代價是低頭</p><p>那就讓我 不可 乘風</p><p>你一樣驕傲著 那種孤勇</p><p>誰說對弈平凡的不算英雄</p></blockquote><p>我有个玩英雄联盟的朋友说，之前国服客户端更新每次都自动放着歌听着烦，结果看完双城之战越听越上头。我的感觉也是一样，单独把这首歌拎出来我觉得只算是陈奕迅中上等的作品。然而这首歌和《双城之战》甚至《英雄联盟》本身的过于契合让每一句词曲背后都能勾出一个宏大的故事。尤其在抖音神曲屠榜华语乐坛的今天，这种细心打磨而尽情演绎的作品更是值得珍惜了。</p><p>年度歌曲——</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="陈奕迅孤勇者">陈奕迅《孤勇者》<a href="#陈奕迅孤勇者" class="hash-link" aria-label="陈奕迅《孤勇者》的直接链接" title="陈奕迅《孤勇者》的直接链接">​</a></h3><iframe allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/%E5%AD%A4%E5%8B%87%E8%80%85-%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F-%E5%8F%8C%E5%9F%8E%E4%B9%8B%E6%88%98-%E5%8A%A8%E7%94%BB%E5%89%A7%E9%9B%86%E4%B8%AD%E6%96%87%E4%B8%BB%E9%A2%98%E6%9B%B2/1596938776?i=1596938779&amp;l=zh"></iframe><h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度游戏">年度游戏<a href="#年度游戏" class="hash-link" aria-label="年度游戏的直接链接" title="年度游戏的直接链接">​</a></h2><p>今年喜欢玩的游戏不算多，没有像去年《动物森友会》一样全民参与的话题游戏。《双人成行》算是我玩过最<strong>好玩</strong>的作品，Game of the Year 也是实至名归；《漫威<del>寅河虎卫队</del>银河护卫队》也以流畅有趣的故事斩获最佳叙事并证明了漫改游戏也可以很好玩；《极限竞速：地平线 5》和《微软飞行模拟》基本就是我司炫技，但《光环：无限》战役的画面和故事都有点拉；《斩妖行》和《戴森球计划》也是非常优秀的国产游戏，前者爽快后者耐玩；《喋血复仇》像是求生之路的精神续作，四人开黑团建实在是非常有趣……</p><p><img loading="lazy" src="/assets/images/back4blood-9fa2348162272b5c40e93336275d6400.jpeg" width="1920" height="1080" class="img_ev3q"></p><p>但是说来说去，今年玩得最多的还是《怪物猎人：崛起》。按小宁子视频里的话说，我是一个不折不扣的老菜鸡：从 PSP 的《怪物猎人 P2》开始，到 Wii 上《怪物猎人 3》，后面因为没有 3DS 落下了很多，又到 PS4 上《怪物猎人世界》和 Switch 回炉的《怪物猎人 XX》，虽然玩得久玩得多，奈何人菜瘾大，天天猫车。《怪物猎人：崛起》大幅改进了上手的友好程度，例如我以前非常苦手的武器狩猎笛得到史诗级加强，这一作简直可以说是《狩猎笛：崛起》。翔虫的设定丰富了一个维度，极大的增加了游戏的爽快感，也能让快要猫车时及时逃命。全新的百龙夜行模式也让我不再抵触网战，较低的死亡惩罚和友好的社区氛围也让我很长一段时间愿意上上号去帮助要做任务的素未谋面的网友。</p><p>作为老猎（cai）人（ji），和朋友一起 PVE 砍大龙必然是我最喜爱猛汉系列的玩法。打开微信语音，叫上初中时午休偷偷躲在厕所联机怪猎的朋友们。有的人刚加完班，有的人哄睡了娃，但一起砍龙时熟悉的配合还是能跨越时间荏苒。玩的哪里是游戏，追忆的都是青春。</p><p>年度游戏——</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="怪物猎人崛起">《怪物猎人：崛起》<a href="#怪物猎人崛起" class="hash-link" aria-label="《怪物猎人：崛起》的直接链接" title="《怪物猎人：崛起》的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/mhrise-2816d0c438f5acdae69a5dcd5ea439dc.jpeg" width="1280" height="720" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度产品">年度产品<a href="#年度产品" class="hash-link" aria-label="年度产品的直接链接" title="年度产品的直接链接">​</a></h2><p>今年买了三爽 S21、我软 Xbox Series X、新 Apple TV 4K、ThinkStation P340 和 14 寸 MacBook Pro。本来三爽我用着很开心的，手感优秀、屏幕出色、做工精致，突然一个猝不及防的更新让我成了 OneUI 4 的受害者：我的 S21 疯狂发热掉帧，在所有界面都在 120/60 帧的边缘疯狂试探反复游走，让我彻底不堪其扰扔在床头沦为睡前原神专用机（Update：现在已数字转世成为小粉红 iPhone 13）。Xbox Series X 在我 Xbox One 之上是全面升级的体验，稳定的 4K 60 帧、高速 SSD 秒加载和黑科技一般的 Quick Resume 让玩游戏成了毫无负担的享受。新 Apple TV 4K 遥控器终于不反人类了，支持利用 HomePods ARC 也让我 Xbox 打机体验更上一层楼。ThinkStation P340 作为家庭服务器非常优秀，不过我感觉主要是<a href="/2021/12/04/windows-nas">自己的折腾</a>而不是产品本身（要是有预算我会更 prefer HPE MicroServer）。</p><p>最后聊一聊 14 寸 MacBook Pro 了。本身我对这种用了很久的产品的例行升级没什么太大期望，但这台新电脑相比我 16 寸大火炉在体验上实在是肉眼可见的提升太多了：</p><ul><li>身形小了一大圈，出门不用纠结带不带电脑</li><li>极佳的功耗控制，安静又不发烫，在腿上使用也很舒适</li><li>快速唤醒，随用随开秒恢复，不用担心突然 kernel panic 自动重启</li><li>性能强的有些夸张，项目秒编译，偶尔也能跑跑游戏</li><li>屏幕就是所有设备天花板，XDR 真的绝美，不过 ProMotion 我个人没什么感觉</li><li>电量充沛且不插电性能无衰减，随时随处使用</li><li>功耗低，拉胯显示器的 USB-C 供电也足够全功率运行</li></ul><p>上面好几点都是我对“随时随地使用”的赞叹。之前我购买 iPad Magic Keyboard 就是为了解决电脑过大过重且出门时掉电过快难堪大用的问题，然而现在的 14 寸随时打开都是有电的响应状态，体验和 iPad 无异又具有完善的桌面系统、更强悍的性能和更齐全的接口，覆盖了大部分我之前 iPad 的使用场景。</p><p>然而新 MacBook Pro 不仅是一个随开随用的上网本，更是一个不折不扣的性能怪兽。我配置了 M1 Max + 32 GB 内存，目前使用没遇到任何瓶颈。配置 32GB 内存主要是考虑到这一代 SoC 中内存还要兼顾显存的作用。上一代 Radeon 5500M 的 8GB 显存我都常常吃满，所以留出充裕的内存余量，在打游戏或者 blender 高分辨率渲染时不至于让 CPU 和 GPU 打架。实际体验上，本来 Xcode 需要索引半天再吭哧吭哧风扇狂转十分钟才能看到代码高亮和补全的项目，现在秒开加稍等一下就可以开始写了，风扇还毫无声音。原本 Steam 好不容易有几个 macOS 游戏还要小心翼翼调低分辨率调图形，忍受着 30 帧和飞机起飞的巨大噪音，现在《古墓丽影：崛起》直接打开拉满 60 帧安静如鸡，可惜离开了 Boot Camp 这么强悍的 GPU 对于游戏玩家几无用武之地了。</p><p>最后感谢这台趁手的工具，短短一两个月让我多了一个自己玩票的项目，虽然也就能挣个奶茶钱；入门了 Blender，虽然最近也鸽了好久。期望新的一年，被打工压榨无几的创作欲能够更多地借助它得到表达吧。</p><p>年度产品——</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2021-macbook-pro">2021 MacBook Pro<a href="#2021-macbook-pro" class="hash-link" aria-label="2021 MacBook Pro的直接链接" title="2021 MacBook Pro的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/mbp-aa1237443a7105afeeb48e7eccdeb6ec.jpg" width="1440" height="1080" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="年度私货">年度私货<a href="#年度私货" class="hash-link" aria-label="年度私货的直接链接" title="年度私货的直接链接">​</a></h2><p>我们<a href="https://www.instagram.com/shaking_chole/" target="_blank" rel="noopener noreferrer">虎子</a>真是太棒辣！</p><p><img loading="lazy" src="/assets/images/shaking-62ae258586dd0ac47bd3ab3ab22500f0.jpg" width="1080" height="809" class="img_ev3q"></p><blockquote><p>而我喜欢又厌倦了这人间呐</p><p>时辰不早快睡吧我也该走啦</p><p>—— 谢可寅《奇怪的人唱奇怪的歌》</p></blockquote>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[P340 工作站搭建家庭服务器]]></title>
        <id>https://xnth97.github.io/2021/12/04/windows-nas</id>
        <link href="https://xnth97.github.io/2021/12/04/windows-nas"/>
        <updated>2021-12-04T13:18:33.000Z</updated>
        <summary type="html"><![CDATA[最近打算购入 NAS，比较来比较去群晖和 QNAP，突然被同事安利巨硬员工可以打骨折购买 ThinkStation，于是用接近一台 DS920+ 的价格购入了最低配 ThinkStation P340 工作站。基于这台机器，这两天逐渐搭建起了我的家庭服务器。]]></summary>
        <content type="html"><![CDATA[<p>最近打算购入 NAS，比较来比较去群晖和 QNAP，突然被同事安利巨硬员工可以打骨折购买 ThinkStation，于是用接近一台 DS920+ 的价格购入了最低配 ThinkStation P340 工作站。基于这台机器，这两天逐渐搭建起了我的家庭服务器。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="硬件">硬件<a href="#硬件" class="hash-link" aria-label="硬件的直接链接" title="硬件的直接链接">​</a></h2><p><img loading="lazy" src="/assets/images/thinkstation-af7e1af58740eb6c6b46b5a3123d6cc9.jpg" width="1200" height="1763" class="img_ev3q"></p><p>外观是 ThinkStation 一如既往的低调，体积也没有很大。最低配 P340 带有 10 代 i3 处理器，四核八线程对家庭服务器绰绰有余。内存自带不够看的 4GB，购入两根海盗船组成 20GB 内存。比较良心的是自带 256GB M2 SSD 用来装系统，又购买了两块 WD NAS 红盘作为存储。许多年没碰过正经的塔式计算机了，目测 ThinkStation 用料还是相对丐的（但是绝对足够用）。令我比较印象深刻的是 ThinkStation 的盘位托架非常优雅，不需要螺丝固定，仅需要抽拉和推动拉手来依靠机械结构固定，看来设计时充分考虑到了扩展性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="os">OS<a href="#os" class="hash-link" aria-label="OS的直接链接" title="OS的直接链接">​</a></h2><p>物理机操作系统选用 Windows Server 2022。倒不是不熟悉 Linux，主要是<del>为了巨硬员工的尊严</del>。正经的理由是：我需要物理机操作系统只负责底层的存储和虚拟化，其它所有服务均通过部署其上的虚拟机提供，这样不会担心乱搞把全家的服务都搞挂了。Windows Server 的优势在于开箱即用地提供了极为稳定的基础功能：</p><ul><li>存储池用来管理磁盘 raid</li><li>基于网络的文件共享（SMB 与 NFS）</li><li>Hyper-V 虚拟机</li><li>完善的远程管理（Windows Admin Center，远程桌面）</li></ul><p><img loading="lazy" src="/assets/images/server-dd25b6ce5463076f5ab99212c773ed92.png" width="1400" height="1038" class="img_ev3q"></p><p>通过服务器管理器，所有基础搭建都可以轻松地通过 GUI 设置完成，不需要像 Linux 一样安装额外软件包或者修改 <code>/etc/fstab</code> 之类，个人感觉非常适合家用服务器的部署。存储池、文件共享和 Hyper-V 大家都比较熟悉了，这里多说一下宝藏 <a href="https://www.microsoft.com/en-us/evalcenter/evaluate-windows-admin-center" target="_blank" rel="noopener noreferrer">Windows Admin Center</a>，这个免费的软件实在是太香了。它也是开箱即用地提供了一个完善的 web 管理页面，不仅能够实时查看服务器状态，更能直接管理防火墙、服务、虚拟机、文件甚至注册表项等。</p><p><img loading="lazy" src="/assets/images/wac-fd5c94a6362799a2531f5184422769fd.png" width="1600" height="1069" class="img_ev3q"></p><p>我对 NAS 的使用需求很简单，主要就是提供一个网络驱动器存放文件以及通过 Lightroom 库管理照片，因此 Windows Server 自带的文件共享绰绰有余。其他设备直接挂载来访问，读写速度大概在 90 - 95 MB/s 上下，对于机械盘也勉强可用了。</p><p><img loading="lazy" src="/assets/images/speedtest-d97f3e80e64d2ecd6f9ad5c490922e4c.png" width="1024" height="1056" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="虚拟机">虚拟机<a href="#虚拟机" class="hash-link" aria-label="虚拟机的直接链接" title="虚拟机的直接链接">​</a></h2><p>其它所有的家庭服务，我通过 Hyper-V 上的三个虚拟机部署和管理。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="家庭核心服务">家庭核心服务<a href="#家庭核心服务" class="hash-link" aria-label="家庭核心服务的直接链接" title="家庭核心服务的直接链接">​</a></h3><p>之前介绍过我家有些服务跑在一台树莓派上，然而对于性能敏感的任务还是很捉急（比如 <code>ffmpeg</code> 解码 Ring 摄像头视频流传输到 HomeKit）。这次我开了一台 Ubuntu Server 2 CPU + 2GB RAM 的虚拟机来接手原来树莓派上智能家居相关服务，主要有负责桥接家里 IoT 设备的 <a href="https://homebridge.io" target="_blank" rel="noopener noreferrer">homebridge</a>，将 Chromecast 转为 AirPlay 的 <a href="https://github.com/philippe44/AirConnect/tree/master/aircast" target="_blank" rel="noopener noreferrer">aircast</a>，和下载文件的 <code>aria2</code> 以及 <a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener noreferrer">webui-aria2</a> 作为 UI 管理后台。这些服务全部通过 <code>pm2</code> 来进行管理，在遇到问题时可以自动重启。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="adguard-home">AdGuard Home<a href="#adguard-home" class="hash-link" aria-label="AdGuard Home的直接链接" title="AdGuard Home的直接链接">​</a></h4><p><a href="https://adguard.com/zh_cn/adguard-home/overview.html" target="_blank" rel="noopener noreferrer">AdGuard Home</a> 是一款开源 DNS 服务器，主要用来拦截广告和跟踪。在服务器上直接使用 snap 安装：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo snap install adguard-home</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后打开服务器的 3000 端口地址去进行初始化，一般在这一步会有 53 端口被占用的问题。首先停用 <code>systemd-resolved</code> 服务：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo systemctl stop systemd-resolved</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后编辑 <code>/etc/systemd/resolved.conf</code>，添加 <code>DNS</code>、<code>FallbackDNS</code> 并修改 <code>DNSStubListener=no</code>，最后更新 <code>resolv.conf</code>：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="/assets/images/adguard-fa95339eb522cc96f443b4fee5b1e88a.png" width="1440" height="970" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="挂载">挂载<a href="#挂载" class="hash-link" aria-label="挂载的直接链接" title="挂载的直接链接">​</a></h4><p>在 Windows Server 上，我创建了一个新的文件共享服务用来共享 <code>Downloads</code> 文件夹。在 Ubuntu Server 上，首先安装 <code>cifs-utils</code>，创建 <code>/mnt/downloads</code> 作为挂载点，创建一个 credentials 存放用户名密码：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">username=USERNAME</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">password=PASSWORD</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改 <code>/etc/fstab</code> 加上:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">//SERVER_IP/Downloads /mnt/downloads cifs credentials=/path/to/credentials,uid=1000,gid=1000,iocharset=utf8,rw,file_mode=0777,dir_mode=0777,sec=ntlmv2 0 0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后运行 <code>sudo mount -a</code> 挂载，Ubuntu 即可以读写网络驱动器里的文件了。</p><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>注意</div><div class="admonitionContent_S0QG"><p>此处 <code>USERNAME</code> 的用户必须在 Windows Server 里也设置好对应的读写权限，否则容易出现 <code>permission denied</code> 错误。</p></div></div><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_S0QG"><p>善用 <code>nobrl</code> 参数：不会发送 byte range lock。比如我的 calibre 部署在 NAS 上通过 cifs 挂载，需要在上述命令 <code>cifs</code> 后添加 <code>nobrl</code> 防止 DB 被锁住。详见<a href="https://coderwall.com/p/zrxobw/calibre-libraries-on-nas" target="_blank" rel="noopener noreferrer">这里</a></p></div></div><p>对于这些智能家居相关的核心服务，我的想法是将它们物理隔离在一台虚拟机上，创建好检查点，这样一般不需要去动它们，万一因为更新之类的原因搞挂了也可以迅速恢复，避免对家庭使用造成影响。至于其它玩耍的服务可以开新的虚拟机去尽情折腾。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2022-年更新替换-ubuntu-为-windows-server-core">2022 年更新：替换 Ubuntu 为 Windows Server Core<a href="#2022-年更新替换-ubuntu-为-windows-server-core" class="hash-link" aria-label="2022 年更新：替换 Ubuntu 为 Windows Server Core的直接链接" title="2022 年更新：替换 Ubuntu 为 Windows Server Core的直接链接">​</a></h4><p>运行家庭服务的 Ubuntu Server 更新 Jellyfish 后莫名其妙搞丢了我好多配置文件，而且基本每天一小崩两天一大崩，于是一怒之下更换为 Windows Server Core。用了几个月下来真是一个坚如磐石，虽然有几点不太满意的：</p><ul><li>缺乏包管理，<code>winget</code> 目前在 Server SKU 上用不了</li><li>Windows 服务还是比 systemctl 要复杂些，甚至还是第三方 app <a href="https://nssm.cc" target="_blank" rel="noopener noreferrer">nssm</a> 更为好用；即使这样还会带来复杂的权限问题</li><li>没有真正的 CLI 模式，占用较多内存（不过对于家用这也是优势）</li></ul><p>对于家用来说，大量 Linux 下的繁复操作（如挂载）在 Windows Server 里都具有内建的稳定对应功能实现，甚至由于 Server SKU + Hyper-V 还会有更高的性能表现。而且借助安装 <a href="https://docs.microsoft.com/en-us/windows-server/get-started/server-core-app-compatibility-feature-on-demand" target="_blank" rel="noopener noreferrer">FOD</a> 可以让 Windows Server 获得更多方便而基础的 GUI 管理工具，如 <code>explorer</code>、<code>taskmgr</code> 等。由于 Server Core 在 CLI 外表下其实具备完整 GUI（只是没有传统桌面 Shell），我们完全可以安装使用 Edge、VSCode 等更为复杂的应用来简化服务器部署与配置。</p><p><img loading="lazy" src="/assets/images/servercore-461c2f2378ad18132f4cc8836699f775.jpeg" width="970" height="800" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="乱七八糟服务">乱七八糟服务<a href="#乱七八糟服务" class="hash-link" aria-label="乱七八糟服务的直接链接" title="乱七八糟服务的直接链接">​</a></h3><p>由于服务器性能较为富裕，我又开了一台 Ubuntu Server 4 CPU + 8GB RAM 的虚拟机跑一些乱七八糟的服务。顺便安利一下 Hyper-V 的动态内存分配，可以允许虚拟机在指定的内存范围内动态变化，因此即使分配了 8GB RAM，在负荷低的情况下虚拟机也只会占用大约 1GB 左右 RAM，不会给宿主机造成太大压力。注意在 Hyper-V 上运行的 Linux，可以安装 azure 优化的内核获得更好的性能。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt install linux-azure</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="/assets/images/hyperv-a3ee59aa14b980f3a0d15f719b1a3884.png" width="1600" height="989" class="img_ev3q"></p><p>在这台服务器上，我完全通过 Docker 部署了这些服务：</p><ul><li><a href="https://github.com/janeczku/calibre-web" target="_blank" rel="noopener noreferrer">calibre-web</a>：著名电子书管理软件的 web 前端，支持在线阅读。</li><li><a href="https://github.com/mattermost/focalboard" target="_blank" rel="noopener noreferrer">focalboard</a>：个人使用的 Jira，方便追踪一些个人小目标。</li><li><a href="https://github.com/cdr/code-server" target="_blank" rel="noopener noreferrer">code-server</a>：在线版的 VSCode，方便顺手直接改一些服务器上的代码/文件，比如上述所有服务的 <code>docker-compose.yml</code>。</li><li><a href="https://github.com/librespeed/speedtest" target="_blank" rel="noopener noreferrer">librespeed</a>：用来进行局域网测速。</li><li><a href="https://github.com/benphelps/homepage" target="_blank" rel="noopener noreferrer">homepage</a>：简易的 Dashboard，作为所有服务的统一入口。</li><li><a href="https://github.com/gogs/gogs" target="_blank" rel="noopener noreferrer">gogs</a>：自建轻量 git 服务器。</li><li><a href="https://github.com/kalcaddle/kodbox" target="_blank" rel="noopener noreferrer">kodbox</a>：可道云，基于 web 的文件管理。</li><li><a href="https://github.com/bpatrik/pigallery2" target="_blank" rel="noopener noreferrer">pigallery2</a>：基于 web 和文件夹的轻量化相册浏览。</li></ul><p><img loading="lazy" src="/assets/images/codeserver-85cf71ec3bda430db1be486677b51f0f.png" width="1400" height="1037" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/dashboard-67e823c943146682d77401ec8dd60096.png" width="1440" height="1013" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="桌面服务">桌面服务<a href="#桌面服务" class="hash-link" aria-label="桌面服务的直接链接" title="桌面服务的直接链接">​</a></h3><p>最后为了某些桌面应用场景（比如突然需要百度网盘这种流氓软件），我也分配了一台 2 CPU + 8GB RAM 的 Windows Server 服务器并开启了远程桌面。值得一提的是 Windows Server 具有<a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/automatic-vm-activation" target="_blank" rel="noopener noreferrer">虚拟机自动激活</a>的特性，简单配置之后就可放心使用客户机。</p><p><img loading="lazy" src="/assets/images/rdp-4e6139b79776d52fa3dee9747098d00f.png" width="800" height="702" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="最后">最后<a href="#最后" class="hash-link" aria-label="最后的直接链接" title="最后的直接链接">​</a></h2><p>以上就是我的家庭服务器搭建。工作站硬件 + Windows Server，运行至今稳如老狗坚如磐石，总体来说还是满足了我家里的需求的。一些关于家用的想法：</p><ul><li>不甘于群晖又不放心完全自己搭建的话，成品工作站可能是个不错的折中。</li><li>家用服务器可以考虑 Windows Server，提供了很多开箱即用的稳定基础架构（市场部钱结一下谢谢）。</li><li>物理机尽可能稳定，保证服务简单。可以只提供 raid、虚拟化和文件共享。</li><li>虚拟机物理隔离服务，运用容器等方式保证易于部署和进程自守护。</li></ul>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的电瓶车时尚时尚最时尚]]></title>
        <id>https://xnth97.github.io/2021/03/18/tesla-model-y</id>
        <link href="https://xnth97.github.io/2021/03/18/tesla-model-y"/>
        <updated>2021-03-18T08:05:42.000Z</updated>
        <summary type="html"><![CDATA[这一年以来，出门玩不敢乘坐公共交通或住酒店，都是依赖开车加露营，让我渐渐感觉小车难以满足两人出门带着露营装备和几天食物的需要，萌生了购买 SUV 的想法。而购买电车的想法则是源于上次去 Joshua Tree 国家公园露营，不幸半夜营地被一群郊狼包围，在一夜刺激的野狼 Disco 之后愈发感觉睡在车里 car camping 也是个不错的选择。我有位朋友是特斯拉精神 + 经济股东，得知我的想法后连夜打来电话给我安利，待我回过神来已经下单了 Model Y 双电机长续航了。去年年底车交付到手，以下是开了大约 5000 公里之后的纯主观体验。]]></summary>
        <content type="html"><![CDATA[<p>这一年以来，出门玩不敢乘坐公共交通或住酒店，都是依赖开车加露营，让我渐渐感觉小车难以满足两人出门带着露营装备和几天食物的需要，萌生了购买 SUV 的想法。而购买电车的想法则是源于上次去 Joshua Tree 国家公园露营，不幸半夜营地被一群郊狼包围，在一夜刺激的野狼 Disco 之后愈发感觉睡在车里 car camping 也是个不错的选择。我有位朋友是特斯拉精神 + 经济股东，得知我的想法后连夜打来电话给我安利，待我回过神来已经下单了 Model Y 双电机长续航了。去年年底车交付到手，以下是开了大约 5000 公里之后的纯主观体验。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="外观--空间">外观 + 空间<a href="#外观--空间" class="hash-link" aria-label="外观 + 空间的直接链接" title="外观 + 空间的直接链接">​</a></h2><p>Model Y 的外观没什么好说的，仅仅是一个大号的 Model 3，整体没什么棱角，像一个圆润的大白。前面是电瓶车传统艺能的 frunk，空间不算大，可以去超市买菜或者出门时装着充电线和转接头。我的上文那位朋友买了专用的床垫，折叠起来正好可以放入 frunk，展开后能够放在放倒的后排座椅上，car camping 神器。</p><p><img loading="lazy" src="/assets/images/front-de33c1d808169287efcf3f8486d03ee7.jpg" width="1600" height="1200" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/side-ecef93c5e8c24892af53c2650cb2a414.jpg" width="1964" height="1200" class="img_ev3q"></p><p>后备箱是掀背设计加电动尾门，加上底下还有一个很深的空间，使 Model Y 拥有堪比货拉拉的装载能力，我之前搬些家具甚至椭圆机都不在话下。我对掀背式尾门的喜爱还要追溯到十几年前我妈买车思考是迈腾还是 CC，我一下就被 CC 的尾门折服了，可惜最后家里选了迈腾，这次算是终于了却遗憾。</p><p><img loading="lazy" src="/assets/images/trunk-e50907966d07b6a18f412aaa0660000d.jpg" width="1600" height="1200" class="img_ev3q"></p><blockquote><p>露营后备箱实况，空间极为富余</p></blockquote><p>内饰的确是简洁得寒酸，相比 BBA 少了很多精致感，不过对我这个原 2018 凯美瑞车主来说并没有什么落差，甚至还很喜爱极简带来的清爽和开阔视野。移去中控也没有什么不适应，可能是本来就要经常看中间的 CarPlay 屏幕，已经习惯了经常右瞥一眼屏幕去确认。没有中控后反而视角更好，能够有空间看到车头附近的路况。</p><p>全景天窗十分的美丽，我目前没有感觉非常晒，可能因为天气较冷还有保暖 buff。天窗有一层遮阳的涂层，想露营时看星星是看不到的，但早上一睁眼就看到清晨天空的感觉十分美妙，是我第一个“这车买的真值”时刻。</p><p><img loading="lazy" src="/assets/images/dashboard-703a216e57176c234240365246eb651e.jpg" width="1600" height="1200" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="驾驶">驾驶<a href="#驾驶" class="hash-link" aria-label="驾驶的直接链接" title="驾驶的直接链接">​</a></h2><p>说来惭愧，我父亲机械专业出身一辈子从事汽车行业，我从小也算耳濡目染，却始终没有对驾驶产生兴趣（玩游戏不算，虽然我 Forza 都是辅助全开的）。而 Model Y 算是第一次让我感受到“（现实生活中的）驾驶也可以是一件有意思的事”。</p><p>一个最明显的体验就是脚上任何时候都有随叫随走的充足动力。起步时，电动机瞬间爆发的大扭矩能带来很强的推背感，让我刚提车时痴迷于从匝道上高速等完红灯后那一脚电下去五秒钟零到百公里的快感。无需变速箱也让速度变化异常顺滑且能即时响应，需要超车时轻点电门速度直接提起，没有油车等待发动机转速提高那一下的拖泥带水，开起来信心十足。双电机 384hp 也保证了应付绝大部分路况都没有压力，陡如三番坡道也不像我的老凯美瑞需要费力踩下油门。</p><p><img loading="lazy" src="/assets/images/cars-912aa0b3670fdf5a99c6b2bdcbcc0801.jpg" width="2064" height="1200" class="img_ev3q"></p><blockquote><p>毛豆 Y 和凯美瑞合影留念</p></blockquote><p>电车动能回收的特性也带来了单踏板驾驶，松开电门动能回收即开始工作，车辆开始制动直至停止，习惯后基本一只脚即可全程精准控制速度。我个人还是很喜欢单踏板的，既不需要换脚可能带来顿挫感，也能利用动能回收最大化续航。感觉最适合的场景是开多弯山路，经常需要控制加速减速的场景比油车轻松太多，如果一路下山则既不用担心磨损刹车片又能顺便充电回来个三五公里。当然，单踏板模式对操作精细化要求更高，容错率也更低（毕竟减速是松电门而不是踩刹车），不需操心换脚的同时也势必要更为关注路况。这里插一句，注意如果电池较满的话动能回收刹车是不工作的，我觉得是因为动能回收基本就是大功率充电，电池满了就充不进去电进而刹车不工作，需要和油车一样踩踏板利用刹车片制动。第一次遇到时我都以为是刹车失灵了，后来仔细想想应该是 feature 不是 bug。</p><p>关于驾驶不得不提的是 Autopilot。之前我很担心单踏板模式开高速岂不是很累，因为我习惯了点踩油门经常滑行，单踏板的话不是一直要踩住电门了？后来发现 Autopilot 就是电动车对这个问题的答案。上高速找好自己的道后，按两下拨杆就没有脚什么事了。开车出门玩的时候动辄一段高速直接几十一百英里，Autopilot 基本不需要我去介入，极大地减轻了开车时的疲劳感。</p><p><img loading="lazy" src="/assets/images/autopilot-3c81f72bf953ed921b57eb6e1d04a5fa.jpg" width="1763" height="1200" class="img_ev3q"></p><blockquote><p>开启 Autopilot</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="乘坐">乘坐<a href="#乘坐" class="hash-link" aria-label="乘坐的直接链接" title="乘坐的直接链接">​</a></h2><p>Model Y 是那种“开起来很爽，坐起来很糟”的车。从车本身来说，电动机扭矩强、动能回收等特性容易使乘客不习惯引发晕车。而 Model Y 又有极硬的悬挂和默认较高的胎压，高情商：这车运动感十足，路感清晰准确；低情商：路上有点小坑就踏马颠到你螺旋升天。第一次坐副驾时，我感觉梦回我爸二十年前昌河面包车。另一方面，也是得益于电动机平滑的特性，如果路况好那乘坐体验极为舒适。车子无声平顺丝滑，仿佛毫无阻力地贴地飞行，未来感十足。</p><p>乘坐空间也比较宽裕，毕竟是 SUV 车型，前后排我一个一米八的壮汉都觉得宽松，头顶和膝盖都是绰绰有余。而且由于是电车没有了传动轴，后排中间座椅实用性和舒适性均大幅提升。但我对后排不满意的一点是座椅比较短，对大腿的支撑明显不足，相比正经 SUV 比如 GLC 实在是拮据了。我觉得如果有后排经常载人的需求还是考虑 Model X，毕竟后排坐起来的贴合程度加上空气悬挂带来的舒适感的确和 Model Y 天壤之别。</p><p><img loading="lazy" src="/assets/images/backseat-f8efcddec9e028d4f51470fe90176671.jpg" width="1200" height="1600" class="img_ev3q"></p><blockquote><p>后座着实和 Model X 比不了</p></blockquote><p>最后说说露营体验。后排座椅折叠垫上软垫铺上被子，车内空调打开露营模式，足够两个人舒舒服服在野外度过一个晚上。相比帐篷（我买的是四人帐篷）空间上的确局促一些，但恒温空调、方便的 USB 充电口、全景天窗视野和无需担心野生动物袭击使得睡 Model Y 远比睡帐篷舒适。另外也省却搭帐篷收帐篷的时间和精力，更不需担忧突然下雨时铺设隔水布和防雨篷。周末逃离工作喧嚣，在森林中的清晨醒来，睁开眼透过天窗便是树木和微雨，下车与朋友和狗狗一起 hiking，轻松惬意至此。</p><p><img loading="lazy" src="/assets/images/camping-1d9625b336a1ce765fcf0b3c3adc2079.jpeg" width="1200" height="1600" class="img_ev3q"></p><blockquote><p>car camping 早晨醒来一眼透过天窗</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="续航">续航<a href="#续航" class="hash-link" aria-label="续航的直接链接" title="续航的直接链接">​</a></h2><p>标称 326 英里续航，实际我感觉要打个八折。一般日常为了电池健康我都充到 280 英里左右，而湾区众多的超充站也让我没有续航焦虑，出门买菜或者等奶茶的时候就可以顺便充电了。超充的快充阶段速度能达七八百英里每小时，基本上充个十几二十分钟足够了。开车出去玩也很方便，反正都需要中间停一停吃个饭买个水上个厕所，就是用来充电的时间，吃完饭电也就够了。提车自带一年免费超充，之后也可以在公司免费充电，经济上是比油车划算太多。</p><p><img loading="lazy" src="/assets/images/charging-f31f864e66ad5b7bf66def9b980e9055.png" width="1920" height="866" class="img_ev3q"></p><blockquote><p>等奶茶时充电及欣赏谢可寅（夹带私货）</p></blockquote><p>家里面车库带一个 NEMA 14-50 240V 的插头，于是我购买了一个 14-50 转接头，又钉上了亚马逊十块钱买的收纳架子，这样在家也有 30+ 英里/小时的充电速度，一晚上也足够从 0 充到满电。加个彩蛋：我还有个 ES3 滑板车，直接接家里普通插头充电，算是我真正的第一部电瓶车。</p><p><img loading="lazy" src="/assets/images/home-charging-2a970212dc95be324cf96b1b0b2c9549.png" width="1440" height="1200" class="img_ev3q"></p><blockquote><p>家里电瓶车（们）的充电</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>第一次购买电瓶车（不算滑板车），我对 Model Y 整体还是比较满意的。这是我在新能源大潮下的第一次试水，也让我对未来更为智能的出行和使用清洁能源的世界多了一些信心。感谢阅读，谢谢大噶。</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>备注</div><div class="admonitionContent_S0QG"><p>神秘 1500 公里代码：<a href="https://ts.la/yubo67122" target="_blank" rel="noopener noreferrer">yubo67122</a>，感恩！</p></div></div>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[数字家庭二零二零]]></title>
        <id>https://xnth97.github.io/2020/11/03/digital-home</id>
        <link href="https://xnth97.github.io/2020/11/03/digital-home"/>
        <updated>2020-11-03T23:20:40.000Z</updated>
        <summary type="html"><![CDATA[二零二零年，“家”成了一个空前重要的地方。既是栖身安居之处，也是丝竹案牍场所。有了自己的窝以后，近期趁着亚麻 Prime Day 搞了一堆东西，对家里进行一下数字化改造。]]></summary>
        <content type="html"><![CDATA[<p>二零二零年，“家”成了一个空前重要的地方。既是栖身安居之处，也是丝竹案牍场所。有了自己的窝以后，近期趁着亚麻 Prime Day 搞了一堆东西，对家里进行一下数字化改造。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="网络">网络<a href="#网络" class="hash-link" aria-label="网络的直接链接" title="网络的直接链接">​</a></h2><p>我家面积不大但共有三层，层高也不算低，势必要上 mesh 了。趁着打折，购入 Google Nest Wifi 套装，包含一个路由和两个 mesh point。其中 mesh point 有麦克风和扬声器，可以作为支持 Google assistant 的智能音箱使用。</p><p><img loading="lazy" src="/assets/images/nest-1-35bf71697e9b3316b2bfb7da0b92fb21.jpeg" width="1400" height="1050" class="img_ev3q"></p><p>我家主网口在二楼客厅，通过 coax 线缆和 modem 连接。猫用的是以前的 Netgear C7000v2，支持 xfinity modem 和路由器功能，我禁掉了它的路由器只作为猫使用。猫 LAN 口连接 Nest Wifi 主路由，主路由有线接入埋好的 CAT7 线缆和交换机。交换机买的便宜的千兆 TPLINK SG108，本来是专门有线网给游戏机使用的，但由于线缆实在有碍观瞻，现在客厅娱乐设备也暂时直接连入 Wifi 网络了。灵魂绘制有交换机时拓扑图如下：</p><p><img loading="lazy" src="/assets/images/network-dd847f7f6c4f9b61fb9fb77ac6cfa28f.png" width="1600" height="1252" class="img_ev3q"></p><p>两个无线 mesh point，一个放置在一楼入口处，用于一楼的物联网设备（门铃，车库门，安防系统等）和偶尔在一楼上网使用。另一个放置在三楼书房，以保证 WFH 的信号质量，不过后续安置台式机以后应该会直接使用有线网。Nest Wifi 的设置极其简单，通过 Google Home app 基本和设置一盏灯的过程无异。所有 Wifi 的设置<strong>仅能</strong>通过手机，对我来说虽然勉强够用，但总不如传统路由网页端功能强大。但可能对于相对小白的用户而言，简单明了又成了优势，各有利弊叭。</p><p><img loading="lazy" src="/assets/images/nest-2-f2064460d2b82a1fe8db5b25a792c82e.png" width="1600" height="977" class="img_ev3q"></p><blockquote><p>左：简陋的手机端；右：空荡的网页端</p></blockquote><p>配好 mesh 以后，三层楼实现 Wifi 无死角覆盖，绝大部分地方都是满格信号。而因为我套餐速度本就不高，测速也基本能跑满，让以前只用过小米路由 + 小米 Wifi 放大器的我不禁对现代无线 mesh 刮目相看。另外两个 mesh point 也附赠了 Google Home mini 的功能，而且不知是不是体积更大的缘故，在我听来音质甚至要好于我的 Google Home mini 和 Nest mini，低音明显更有力沉稳，高频也没有 nest mini 轻飘飘的感觉。当然白送的音响功能没什么好评价了，工作时 cast 个播客当背景音绰绰有余。</p><p><img loading="lazy" src="/assets/images/nest-3-b2c32979cdfe20974fbe84d463cad7b4.jpeg" width="1400" height="1050" class="img_ev3q"></p><blockquote><p>放置于书房的 mesh point，作为智能音箱时底部灯条会亮起</p></blockquote><p>Nest Wifi 的主路由和 mesh point 均配备四核 1.4 Ghz 处理器和专用的机器学习引擎（也许是运行 Google assistant 之用），并分别配置 1GB 和 768MB 的内存。这参数已经比我几年前的手机要强，对于路由器来说绰绰有余了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="门铃">门铃<a href="#门铃" class="hash-link" aria-label="门铃的直接链接" title="门铃的直接链接">​</a></h2><p>买的亚麻旗下 Ring 和 echo 的套装（然而我家 Google home/nest 实在太多了，echo 一个都没有拆），毕竟水深火热，带摄像头的门铃主要是安全起见吧。门铃安装也不复杂，先粗暴地把原来的门铃拆了，美国门铃大致都是一个简陋的电路，门铃起到一个接通电路的作用，按下就会响起来。</p><p><img loading="lazy" src="/assets/images/doorbell-1-d5f9f10b03ad80a81b297db4a6f12079.jpeg" width="1400" height="827" class="img_ev3q"></p><p>先把 Ring 附带的一个支架钉在墙上，然后把原来门铃两根电线接到 Ring 门铃背后两个螺丝触点上，最后卡回支架就可以用了。这个门铃非常<em>睿智</em>的是<strong>需要充电</strong>，而且充电接口在看不见的背面，这就意味着每次充电都要把它拆下来。幸好电池看来比较耐用，使用三周掉了 5% 的电。环形的灯是常亮的，不过应该是从原来门铃电路取的电，因此自身电池应该只负责联网和录制了。</p><p><img loading="lazy" src="/assets/images/doorbell-2-684b2517ce2681a9f973cde4406d36c8.jpeg" width="1400" height="1288" class="img_ev3q"></p><p>Ring 这个门铃主要作用就是：</p><ul><li>有人按门铃时手机会收到通知，可以视频通话</li><li>监测门口可疑行动，触发通知并自动录像</li><li>是个可以按的门铃</li></ul><p>大部分设置也是通过手机 app 进行。需要注意一点是一开始我接好后按门铃我家里并不会响，后来发现 app 里有一项 <code>In-home Chime Settings</code>，需要正确设置才能响。这么重要的设置为什么不在初始化流程里？也是一个<em>睿智</em>设计了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="安防">安防<a href="#安防" class="hash-link" aria-label="安防的直接链接" title="安防的直接链接">​</a></h2><p>选购安防系统时，犹豫是老牌 ADT 还是新秀 Ring，考虑到<del>ADT 实在太贵了</del>Ring 科技基因更深厚，买了 Ring Alarm 八件的套装（还送了个 echo show，出于上述理由也没拆）。看着八件套很唬人，其实就包括：</p><ul><li>基站 x1</li><li>keypad x1</li><li>信号放大器 x1</li><li>门窗感应器 x4</li><li>运动感应器 x1</li></ul><p><img loading="lazy" src="/assets/images/ring-1-7bf5085707d6ecbabad9ae235b7c6fa7.jpeg" width="1400" height="1050" class="img_ev3q"></p><p>安装和设置也没什么难度，跟着 app 一步步来就好了。传感器也都是通过 3M 胶固定，非常 DIY 友好。我把基站、keypad 和主路由都放在二楼的一个小边桌上，白色看起来也比较和谐。Ring Alarms 主要是基于<strong>场景</strong>的模式，配置好 disarmed，home 和 away 三种模式后基本就只需要开关切换就可以了，感应器和警报系统会根据场景工作。我同时订阅了 Ring 的服务，会有专业人员（或机器人🤖️？）帮你监测感应器的异常并在必要时报警，避免用户不在家又漏掉通知之类的情况。</p><p><img loading="lazy" src="/assets/images/ring-2-5ab59f3d8dd3dae70ace2029372f5536.jpeg" width="1400" height="668" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="温控">温控<a href="#温控" class="hash-link" aria-label="温控的直接链接" title="温控的直接链接">​</a></h2><p>前两天咕果新出了平价版 Nest thermostat，加上 PG&amp;E 对安装智能温控可以 rebate 几十块，毫不犹豫下单了。我觊觎远程操控空调功能已久，虽说湾区宜人的气候使它难有用武之地，但我看着家里上世纪科技的温控实在是难受。</p><p><img loading="lazy" src="/assets/images/thermostat-1-1421dec4571af0f6f3372514c1e32dfa.jpeg" width="1400" height="1050" class="img_ev3q"></p><blockquote><p>旧温控</p></blockquote><p>安装和设置就和所有 2020 年的电子产品一样，通过手机 app 进行。不过一步步引导的模式对于没安过空调的我来说还是很有必要的。暴力拆下旧温控，需要记下排线的情况，Google Home app 也会提醒你需要拍张照片。</p><p><img loading="lazy" src="/assets/images/thermostat-2-491ab84dc430641888f19567e35ab28a.jpeg" width="1200" height="1447" class="img_ev3q"></p><p>之后拔掉排线，拆掉原来的底座，钉上 Nest 的底座，按 app 提示接好排线，最后扣上 Nest thermostat，20 分钟鸟枪换炮。</p><p><img loading="lazy" src="/assets/images/thermostat-3-e17e28222aa8c7b45f090822fb6844b8.jpeg" width="1400" height="1050" class="img_ev3q"></p><p>新 Nest 温控改为镜面设计，操作沿袭老款侧边触控的形态，屏幕由原来酷炫的圆形屏幕阉割成一块普通的 2.4 寸 QVGA（感觉是诺基亚的库存），不过幸好由于镜面设计看不出来屏幕的边框，配合简单的 UI 视觉效果还是可以的。操作也是非常流畅，触控时的音效异常悦耳清爽。</p><p><img loading="lazy" src="/assets/images/g-home-bfca691e952d3e7926af65d73e38d313.png" width="1024" height="1017" class="img_ev3q"></p><blockquote><p>随着设备增多日益丰富的 Google Home 主屏</p></blockquote><p>Nest 温控主要设置也在 Google Home app 里，不过由于目前气候舒适暂时没有好好了解，等到天冷之后再深入体验一番。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="树莓派">树莓派<a href="#树莓派" class="hash-link" aria-label="树莓派的直接链接" title="树莓派的直接链接">​</a></h2><p>之前买的树莓派被我装上了散热片，扔到一个看不见的角落默默跑着几个服务。对于我目前来说最有用的莫过于 <a href="https://github.com/homebridge/homebridge" target="_blank" rel="noopener noreferrer">homebridge</a>，把我家不同品牌的大量物联网设备都纳入了 HomeKit 的体系下，配合 Apple TV 甚至能实现简单的自动化（例如出门后：关车库门，关灯，安防系统设防）。我目前 homebridge 运行了以下插件：</p><ul><li>homebridge-config-ui-x: GUI 配置 homebridge 的利器</li><li>homebridge-bravia-tvos: 控制我的大法电视</li><li>homebridge-myq: 控制我的车库门</li><li>homebridge-nest: 将 Nest 添加为一个温度感应器并控制，不过好像还不支持最新款</li><li>homebridge-ring: 控制 Ring alarms 安防系统，并添加传感器和摄像头</li><li>homebridge-tplink-smarthome: 控制我的几个 TPLINK 小插头</li></ul><p><img loading="lazy" src="/assets/images/home-18029380e6c0b36660b5521df8287668.png" width="1024" height="1037" class="img_ev3q"></p><blockquote><p>为什么夹杂奇怪的中英双语：我有些设备习惯用 Siri（中文）有些习惯用 Google assistant（英文）</p></blockquote><p>另外 tvOS 14 更新后，在看电视时如果楼下有人按门铃，Apple TV 会直接弹出门铃传来的实时视频，省去掏手机-&gt;解锁-&gt;打开 app 查看的步骤，非常好用。我树莓派上长期运行的另一个服务是 <a href="https://github.com/philippe44/AirConnect/tree/master/aircast" target="_blank" rel="noopener noreferrer">aircast</a>，用于 chromecast 和 AirPlay 协议的交互，这样水果设备也可以方便地投射音频到我的一堆咕果音响上，实现廉价的全家环绕立体声。两个服务基本不怎么占用资源，树莓派 3B 运行毫无压力。</p><p><img loading="lazy" src="/assets/images/pm2-dad4f988d3e4b1ceb922ce54201dd70e.png" width="1444" height="310" class="img_ev3q"></p><p>此外运行的服务还有 NextCloud（临时存储一些小文件）和 Netdata（监控板子运行情况），又写了一个无比简陋的导航页去快速进入各服务的管理界面。 目前树莓派 RAM 占用 40%，CPU 基本没什么波动，运行非常稳定。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结束">结束<a href="#结束" class="hash-link" aria-label="结束的直接链接" title="结束的直接链接">​</a></h2><p>以上就是近期我对家里进行的改造，希望明年有机会能多多走出家门吧。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[用 Golang 撸一个玩具编译器]]></title>
        <id>https://xnth97.github.io/2020/05/29/tiny-compiler</id>
        <link href="https://xnth97.github.io/2020/05/29/tiny-compiler"/>
        <updated>2020-05-29T13:40:06.000Z</updated>
        <summary type="html"><![CDATA[社畜以来每日搬砖，很久没有像读书时一样学习一些东西沉淀下了。最近在 GitHub 上看到 the-super-tiny-compiler 这个项目，很喜欢它极简的设计和实现，也给了对编译原理一知半解的我一个从头再来的机会。个人感觉原项目用 JavaScript 抹去了一些实现细节的同时也模糊了具体的理解，故此用 Golang 学习与实现。]]></summary>
        <content type="html"><![CDATA[<p>社畜以来每日搬砖，很久没有像读书时一样学习一些东西沉淀下了。最近在 GitHub 上看到 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener noreferrer">the-super-tiny-compiler</a> 这个项目，很喜欢它极简的设计和实现，也给了对编译原理一知半解的我一个从头再来的机会。个人感觉原项目用 JavaScript 抹去了一些实现细节的同时也模糊了具体的理解，故此用 Golang 学习与实现。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述">概述<a href="#概述" class="hash-link" aria-label="概述的直接链接" title="概述的直接链接">​</a></h2><p>这里我们实现的玩具编译器是将 lisp 风格的代码转化为 C 语法，例如 <code>(add 2 (subtract 4 2))</code> 会被转化成 <code>add(2, subtract(4, 2));</code>。大部分现代编译器工作主要有三个过程：</p><ul><li>Parsing：将源代码解析为抽象表达（如抽象语法树 Abstract syntax tree）</li><li>Transformation：操作 AST 并做一些编译器需要的工作</li><li>Code Generation：将变形后的代码生成新的代码</li></ul><p>按照我 iOS 的经验，这大概对应的是：</p><ul><li>Clang 对 C/C++/Objective-C/Swift 代码进行词法分析、静态分析等，生成 AST <code>clang -Xclang -ast-dump</code></li><li>Clang 将 AST 生成 LLVM 中间代码并进行编译优化，例如全局变量、循环、尾递归等情况 <code>clang -emit-llvm</code></li><li>Clang 将优化后的 LLVM 代码生成汇编代码 <code>clang -S -o</code>，assembler 将汇编代码生成机器码，linker 将机器码和静态库链接生成 Mach-O 可执行文件</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="parsing">Parsing<a href="#parsing" class="hash-link" aria-label="Parsing的直接链接" title="Parsing的直接链接">​</a></h2><p>解析主要是词法分析（lexical analysis）和句法分析（syntactic analysis）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lexical-analysis">Lexical Analysis<a href="#lexical-analysis" class="hash-link" aria-label="Lexical Analysis的直接链接" title="Lexical Analysis的直接链接">​</a></h3><p>词法分析中 tokenizer 将原始代码拆分成 token（或 lexer）。比如 <code>(add 2 4)</code> 会被解析为</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'paren'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'('</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'name'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'add'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'number'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'number'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'4'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'paren'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">')'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里我们定义 token 包括两个属性：type 和 value。首先声明我们需要的 token type 和结构体：</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> TokenType </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TokenTypeParen  TokenType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"paren"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TokenTypeName   TokenType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TokenTypeNumber TokenType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"number"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TokenTypeString TokenType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"string"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Token </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tokenType TokenType</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value     </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Tokenizer 函数接受 input 字符串，遍历并根据当前字符生成 token，最后返回 token 数组。这里我们利用了 Golang 的 <code>unicode</code> 包实现快速的判断。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Tokenizer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">input </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Token </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// counter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    current </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// token array to be returned</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tokens </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Token</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// iterate</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">input</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        char </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> input</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        charStr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> charStr </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"("</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> charStr </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">")"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tokens </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">TokenTypeParen</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> charStr</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        charRune </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rune</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">IsSpace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">charRune</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">IsDigit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">charRune</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            value </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">IsDigit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rune</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> value </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                char </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tokens </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">TokenTypeNumber</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> charStr </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\""</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            value </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// skip opening parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            char </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// for characters that are not "\"", append to value of current token</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\""</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> value </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                char </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// skip closing parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            char </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tokens </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">TokenTypeString</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">IsLetter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">charRune</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            value </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> unicode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">IsLetter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rune</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> value </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                char </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> input</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tokens </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Token</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">TokenTypeName</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> tokens</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="syntactic-analysis">Syntactic Analysis<a href="#syntactic-analysis" class="hash-link" aria-label="Syntactic Analysis的直接链接" title="Syntactic Analysis的直接链接">​</a></h3><p>句法分析将 token 数组解析为抽象语法树。顾名思义，AST 是树状结构，例如上文的 <code>(add 2 4)</code> 解析而来的 token 数组会被进一步解析为 AST 如下：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Program'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">params</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'CallExpression'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'add'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">params</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'NumberLiteral'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'NumberLiteral'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">value</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'4'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>AST 的每个节点可定义如下，注意 <code>params</code> 我们定义为一个指针数组，数组中每个元素都是指向 <code>ASTNode</code> 的指针。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ASTNodeType </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ASTNodeTypeProgram             ASTNodeType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Program"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ASTNodeTypeNumberLiteral       ASTNodeType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"NumberLiteral"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ASTNodeTypeStringLiteral       ASTNodeType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"StringLiteral"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ASTNodeTypeCallExpression      ASTNodeType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"CallExpression"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ASTNodeTypeExpressionStatement ASTNodeType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ExpressionStatement"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ASTNode </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nodeType   ASTNodeType</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value      </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    params     </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Parser 函数接受 token 数组并返回 AST 根结点。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Parser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Token</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ASTNode </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    current </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// recursively walk through nodes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> walk </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ASTNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// create root node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ast </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// push nodes to ast.params</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        tmp </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">walk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ast</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ast</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ast</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>中间我们使用一个闭包 <code>walk()</code> 来根据 <code>current</code> 把 Token 解析为 ASTNode。预先声明闭包的原因是 Golang 不允许通过海象运算符（:=）声明的闭包调用自己。<code>walk</code> 闭包实现如下：</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">walk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ASTNode </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    token </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> TokenTypeNumber </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">    token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> TokenTypeString </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">    token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> TokenTypeParen </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"("</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// skip opening parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        token </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        node </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">    token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            params</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// skip name token</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        token </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> TokenTypeParen </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokenType </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> TokenTypeParen </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">")"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tmp </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">walk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            token </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tokens</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// skip closing parenthesis</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Should not get here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="transformation">Transformation<a href="#transformation" class="hash-link" aria-label="Transformation的直接链接" title="Transformation的直接链接">​</a></h2><p>真实的编译器可能会进行很多优化并生成中间代码，但在玩具编译器里我们只是操作 AST，进行一些改动并生成新的 AST。一般来说也可以直接更改原始 AST，但鉴于我们是 target 另一种语言（lisp -&gt; C）我们还是创建一棵新的 AST。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="traverser">Traverser<a href="#traverser" class="hash-link" aria-label="Traverser的直接链接" title="Traverser的直接链接">​</a></h3><p>为了操作 AST，我们需要 traverser 去深度优先遍历 AST，并对每个类型的节点执行不同的操作。这里我们使用一个 map，key 是节点的类型，value 是我们需要执行的操作。对于每个节点，我们需要在开始遍历节点时（enter）以及结束遍历其子树时（exit）执行，因此我们声明一个 <code>Methods</code> 结构体，具有 <code>enter</code> 和 <code>exit</code> 两个闭包属性，每个闭包接受 <code>node</code> 和 <code>parent</code> 两个参数表示当前节点和父节点。由于闭包需要对节点进行改动，类型为指向节点的指针。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Methods </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    enter </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exit  </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由此我们的 map 类型为 <code>map[ASTNodeType]Methods</code>，可以实现 traverser 如下：</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Traverser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ast </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> visitor </span><span class="token keyword" style="color:#00009f">map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ASTNodeType</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Methods</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> traverseNode </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> traverseArray </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// helper that iterate over an array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    traverseArray </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">traverseNode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    traverseNode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        methods </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> visitor</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nodeType</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// call enter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> methods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">enter </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            methods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">enter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// traverse by current node type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nodeType </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">traverseArray</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ASTNodeTypeExpressionStatement</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// call exit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> methods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">exit </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            methods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">traverseNode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ast</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="transformer">Transformer<a href="#transformer" class="hash-link" aria-label="Transformer的直接链接" title="Transformer的直接链接">​</a></h3><p>Transformer 需要调用 <code>Traverser()</code> 函数将 AST 生成新的 AST，转化的例子在 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler/blob/d8d40130459d1537f6117a927947cd46c83182b0/the-super-tiny-compiler.js#L821" target="_blank" rel="noopener noreferrer">这里</a> 可以看到。对于新的 AST，我们需要添加一些属性来扩充 <code>ASTNode</code> 的定义。比较重要的是 <code>context *[]*ASTNode</code>，我们用它来表示一个<strong>从</strong>旧 AST 到新 AST <code>params</code> 的引用，因此它的类型需要为指针数组的指针，这样当我们修改旧 AST 节点的 <code>context</code> 时，对应的变更也会反映在新 AST 的 <code>params</code> 上。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Callee </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    calleeType </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name       </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ASTNode </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nodeType   ASTNodeType</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value      </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    callee     Callee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    expression </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    params     </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// reference from old ast to new ast</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context    </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Transformer 函数如下：</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Transformer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ast </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ASTNode </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    newAst </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        params</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// so we can push nodes to parent's context</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ast</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">newAst</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">Traverser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ast</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ASTNodeType</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Methods</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> newAst</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接下来我们来针对不同类型添加 <code>enter</code> 方法。对于 literal 节点，我们简单地创建新 <code>ASTNode</code> 并添加到父节点的 <code>context</code> 即可。由于 <code>context</code> 是指向新 AST <code>params</code> 的引用，新 <code>ASTNode</code> 也会被添加到新 AST 对应的 <code>params</code> 中。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ASTNodeType</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Methods</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Methods</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        enter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tmp </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">    node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Methods</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        enter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tmp </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">    node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意这里将节点添加到 <code>context</code> 的操作，由于 <code>context</code> 是数组指针，我们需要对它指向的内容进行操作，因此有额外的取值符。而数组元素是指向节点的指针，因此需要对生成的节点取地址。许久以来 Swift 写得一把梭已经差不多忘记这个级别的操作了。</p><p>最后对 CallExpression 类型，由于表达式具有参数，我们需要把旧节点的 <code>context</code> 指向新节点的 <code>params</code>，就如同我们对根结点做的一样。另外在这个玩具解释器中，如果父节点不是 CallExpression 类型，我们需要创建一个 ExpressionStatement 去嵌套一下。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Methods</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    enter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        expression </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            callee</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">   Callee</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"Identifier"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            params</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// context of CallExpression refer to express's params so</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// that we can push parameters</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">expression</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nodeType </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> ASTNodeTypeCallExpression </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// if not CallExpression, we need to wrap</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            newExpression </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> ASTNode</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                nodeType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">   ASTNodeTypeExpressionStatement</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                expression</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">expression</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">newExpression</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">expression</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="code-generation">Code Generation<a href="#code-generation" class="hash-link" aria-label="Code Generation的直接链接" title="Code Generation的直接链接">​</a></h2><p>最后就是将新 AST 解析成 C 风格代码了。Code generator 的实现非常直接，针对不同节点类型生成不同代码，并对子节点递归调用自身就可以了。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">CodeGenerator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node ASTNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nodeType </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ASTNodeTypeProgram</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        res </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> param </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">CodeGenerator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> strings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ASTNodeTypeExpressionStatement</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">CodeGenerator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">expression</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">";"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ASTNodeTypeCallExpression</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        params </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> param </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">params </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            params </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">params</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">CodeGenerator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">callee</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"("</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> strings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">params</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">", "</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">")"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ASTNodeTypeNumberLiteral</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ASTNodeTypeStringLiteral</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\""</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">default</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="compiler">Compiler<a href="#compiler" class="hash-link" aria-label="Compiler的直接链接" title="Compiler的直接链接">​</a></h2><p>最后把所有过程连起来：</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Compiler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">input </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tokens </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Tokenizer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">input</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ast </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Parser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    newAst </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Transformer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ast</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    output </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">CodeGenerator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newAst</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> output</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>写一小段测试代码，输入为 <code>(add 2 (subtract (add 3 5) 1))\n(print \"hello world\")</code>，编译运行一下得到：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">subtract</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello world"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>完整代码在<a href="https://github.com/xnth97/Data-Structure-Notes/blob/master/tiny-compiler-go/compiler.go" target="_blank" rel="noopener noreferrer">这里</a>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>虽然是个没有卵用的东西，不过从头撸的过程也能学习到现代编译器大致的工作原理。原项目 the-super-tiny-compiler 利用代码步步解释的形式也是让人耳目一新。另外 Golang 确实兼具 Python 易学的语法、强大的标准库和 C 的底层操作能力，比我想象的要香，看来可以当 gopher 了。</p>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019 的一些碎片]]></title>
        <id>https://xnth97.github.io/2020/01/16/annual</id>
        <link href="https://xnth97.github.io/2020/01/16/annual"/>
        <updated>2020-01-16T19:07:45.000Z</updated>
        <summary type="html"><![CDATA[一月]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="一月">一月<a href="#一月" class="hash-link" aria-label="一月的直接链接" title="一月的直接链接">​</a></h2><p>2019 年伊始，去 Lake Tahoe 滑了个雪，摔了很多跤也没有学会，愤而下山飞飞机。</p><p><img loading="lazy" src="/assets/images/1-1f3768506f32c15ddef5afbabc599c83.jpg" width="1480" height="1110" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/2-f64f4e371cb005ff6b1e63e755200ca3.jpg" width="1480" height="1110" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="二月">二月<a href="#二月" class="hash-link" aria-label="二月的直接链接" title="二月的直接链接">​</a></h2><p>过年回了趟家，爸妈养了只小猫咪，撸了个爽。</p><p><img loading="lazy" src="/assets/images/3-2fa78294d8955e4b916ed55ed5483461.jpg" width="1110" height="1110" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="三月">三月<a href="#三月" class="hash-link" aria-label="三月的直接链接" title="三月的直接链接">​</a></h2><p>在家附近的公园散步，对视到一只傻呆呆的鹿。</p><p><img loading="lazy" src="/assets/images/4-32e784059aee42a4ea4c170fbcd60931.jpg" width="1080" height="1080" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="四月">四月<a href="#四月" class="hash-link" aria-label="四月的直接链接" title="四月的直接链接">​</a></h2><p>去 SF Moma 逛了一下，没搞明白现代艺术，拍了个大楼的光影。</p><p><img loading="lazy" src="/assets/images/5-c63bd6f1ced1f68bc863ed3a1b16f2e3.jpg" width="1110" height="1110" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="五月">五月<a href="#五月" class="hash-link" aria-label="五月的直接链接" title="五月的直接链接">​</a></h2><p>看了场球，试了下 Pixel 3 的 Night Sight + Super Res Zoom。</p><p><img loading="lazy" src="/assets/images/6-6aa2d14677d2814f62093e1671bf205a.jpg" width="1556" height="883" class="img_ev3q"></p><p>去了夏威夷，路边彩虹映在鹅卵石上很好看，Pixel 3 的解析力也相当不错。</p><p><img loading="lazy" src="/assets/images/7-9b9a99c36ed5679dd93f48431a6b634d.jpg" width="1110" height="1110" class="img_ev3q"></p><p>在黑沙滩上见到了好大好大的产卵的大海龟。</p><p><img loading="lazy" src="/assets/images/8-0f977ba11e4a5df882b3d2da9e310757.jpg" width="1557" height="1038" class="img_ev3q"></p><p>去 Mauna Kea 拍了个银河，第一次肉眼看到那么清楚的银心，整个人笼罩在无垠苍穹下的感觉还是很震撼的。可惜没仔细选好位置，前景是个在施工的厕所。</p><p><img loading="lazy" src="/assets/images/9-da6e93b49eb7bc38b073f501d996421a.jpg" width="1557" height="1038" class="img_ev3q"></p><p>月底又去了 LA 的迪士尼乐园，长这么大第一次去，还是很好玩的，羡慕从小能去的小朋友们。</p><p><img loading="lazy" src="/assets/images/10-54fc424a7d3183d3dffe912b5a597fa4.jpg" width="1080" height="810" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="六月">六月<a href="#六月" class="hash-link" aria-label="六月的直接链接" title="六月的直接链接">​</a></h2><p>去 Monterey Bay 的水族馆看了水母，想吃凉拌海蜇。</p><p><img loading="lazy" src="/assets/images/11-1347345e0782117d7c8b123ff5865a2f.jpg" width="1500" height="1000" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="七月">七月<a href="#七月" class="hash-link" aria-label="七月的直接链接" title="七月的直接链接">​</a></h2><p>去了北边的 Lassen 国家公园，大夏天的能见到雪和冰河还是很凉爽的。</p><p><img loading="lazy" src="/assets/images/12-7eb71eeab1adafc1fc4dff65571635b6.jpg" width="1557" height="1038" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/13-ee2df5ed4fb88d8cff4aeed5eb1b8bf3.jpg" width="1557" height="1038" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="八月">八月<a href="#八月" class="hash-link" aria-label="八月的直接链接" title="八月的直接链接">​</a></h2><p>去山上看流星雨，苦等一夜也没有几颗更是拍不出来了，只好搞点星轨凑数。这次事先找了下北极星的位置，构图自己还比较满意，可惜实在太冷了没有拍的久一点。</p><p><img loading="lazy" src="/assets/images/14-fef1e215ccd7a85f2e39c5563c060eb1.jpg" width="1557" height="1039" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/15-e6ecf07ffe2e50377217152ce5569f18.jpg" width="1557" height="1039" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="九月">九月<a href="#九月" class="hash-link" aria-label="九月的直接链接" title="九月的直接链接">​</a></h2><p>去了迈阿密，度假还是很惬意的。不过没拍什么照片，因为吃朋友安利买了 OSMO Pocket，一直在拿妹子当模特拍 VLOG。幸好 Pixel 防水，带去泳池拍照也没什么顾虑。</p><p><img loading="lazy" src="/assets/images/16-7e12ed9f1275f81fcebe9012c85df6a5.jpg" width="1557" height="464" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="十月">十月<a href="#十月" class="hash-link" aria-label="十月的直接链接" title="十月的直接链接">​</a></h2><p>为了不委屈家里的 65 寸大法 4K 电视加上拥有不要钱的了 Xbox Game Pass Ultimate，买了台 Xbox One X，主机终于全了。</p><p><img loading="lazy" src="/assets/images/17-18bc49ddb8d0cfc97620d2a46ed122a6.jpg" width="1110" height="1110" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="十一月">十一月<a href="#十一月" class="hash-link" aria-label="十一月的直接链接" title="十一月的直接链接">​</a></h2><p>去波特兰玩，飞机上一转头看到厚厚的云层间夹着遥远的雪山，感觉是很奇妙的景色。</p><p><img loading="lazy" src="/assets/images/18-0acac4b42f01b5de33252f628329e085.jpg" width="1110" height="1110" class="img_ev3q"></p><p>离开了老东家 Y 字开头互联网活化石，在公司旁边飞飞机时正巧发现一个 Y，和新换的 logo 有异曲同工之妙。</p><p><img loading="lazy" src="/assets/images/19-aa8c2a5fe3de86436f31b277cef967d0.jpg" width="1480" height="1110" class="img_ev3q"></p><p>黑五/感恩节一波败家升级，最大的升级是把 Late 2013 的 15 寸 MBP 换了 16 寸，高配定制到八核 i9 + 32GB RAM + 5500M 8GB GPU，整体性能翻了好几番。又趁黑五折扣把 Pixel 3 换了 Pixel 4 XL，果表 2 换了果表 5，BeatsX 换了 AirPods Pro，淘宝 100 元人民币的吸尘器换了戴森 v10。掏空了钱包，充实了生活。</p><p><img loading="lazy" src="/assets/images/20-a4351cbb0291559cde3385e932917c5a.png" width="2000" height="828" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="十二月">十二月<a href="#十二月" class="hash-link" aria-label="十二月的直接链接" title="十二月的直接链接">​</a></h2><p>去了死亡谷，也是一个很漂亮的地方。</p><p><img loading="lazy" src="/assets/images/21-98668af52782854449edd42fd9d2c7a0.jpg" width="1558" height="1039" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/22-be8d5b03d9ce5e0172f94924f2490d03.jpg" width="1560" height="1040" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/23-a7386e23f90bc4ae7e02cb887bf6976a.jpg" width="1560" height="1040" class="img_ev3q"></p><p>死亡谷也是观星的绝佳地方，冬季的银河仍然清晰可见，天空也是星汉灿烂。</p><p><img loading="lazy" src="/assets/images/24-5081dc84b6be465d2248d476d6f33d32.jpg" width="1557" height="1038" class="img_ev3q"></p><p>顺道去了 Vegas，Pixel 4 XL 的 Night Sight 我吹爆，原图纯净度还是很高的。</p><p><img loading="lazy" src="/assets/images/25-062cbb90a8767ce10a112901cca05abd.jpg" width="1080" height="810" class="img_ev3q"></p><p>跨年夜回了家，去三番看了烟花，2019 年就这么过去了。</p><p><img loading="lazy" src="/assets/images/26-999e0727a33c1fce5cb334b835c98c3e.jpg" width="1080" height="810" class="img_ev3q"></p>]]></content>
        <category label="daily" term="daily"/>
        <category label="annual" term="annual"/>
        <category label="photo" term="photo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switch to Pixel 3]]></title>
        <id>https://xnth97.github.io/2019/06/14/pixel-3</id>
        <link href="https://xnth97.github.io/2019/06/14/pixel-3"/>
        <updated>2019-06-14T20:15:45.000Z</updated>
        <summary type="html"><![CDATA[作为 iOS 开发狗每天上班下班对着各种 iPhone 实在是过于疲劳，加上去年我家两个人总共换了五台 Xs 的惨痛经历，四月底薅 Google Fi 的羊毛搞来一部 Pixel 3，趁着五月出门玩作为主力机深入体验了一个多月。]]></summary>
        <content type="html"><![CDATA[<p>作为 iOS 开发狗每天上班下班对着各种 iPhone 实在是过于疲劳，加上去年我家两个人总共换了五台 Xs 的惨痛经历，四月底薅 Google Fi 的羊毛搞来一部 Pixel 3，趁着五月出门玩作为主力机深入体验了一个多月。</p><p><img loading="lazy" src="/assets/images/pixel3-885571aceaa19efb4c20735ba2c8658e.jpg" width="1027" height="1027" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="硬件">硬件<a href="#硬件" class="hash-link" aria-label="硬件的直接链接" title="硬件的直接链接">​</a></h2><p>Pixel 3 外观中规中矩，在真全面屏当道的时代，上下大黑边实在称不上惊艳。Google 经典的背部两种材质拼接的设计比较讨巧，磨砂玻璃既提供了不错的触感又防止了指纹沾染，加上较 Xs 更为纤细轻薄的机身，裸机 Pixel 3 握持手感我还是觉得很舒适的。荧光绿色的电源键相较规整的机身算是一个大胆设计，总会被人问晚上能不能发光。背部指纹识别和火疖子摄像头也是常规操作，无须赘述。</p><p>做工上，不知是个别问题还是总体品控差距，Pixel 3 有两个地方我较不满意。一是 SIM 卡槽安装好时明显低于机身底部，较 iPhone 历代严丝合缝的一体感逊色不少。二是玻璃后盖和中框的缝隙过大，感觉可以塞进去一张 A4 纸，尤其对于白色 Pixel 来说，这道接缝带来的视觉效果更为明显，有一种后盖没装好的感觉。iPhone Xs 的接缝则小得多，对于我黑色 Xs 更是向来无视。</p><p>Pixel 3 的这块屏幕我还是很喜欢的，虽然饱和度有些过高且色调偏冷，但对比度和清晰度可以说无可挑剔。非异形屏带来了更为沉浸式的视频体验，Netflix 和 YouTube 也能轻松找到大量符合比例的片源。上下大黑边带来的好处就是两个正对着你的扬声器，虽然听个响但效果也是超出预期了，确实有明显立体声环绕效果。</p><p>硬件配置上，845 + 4GB RAM 也和 Pixel 的其它地方一样中规中矩，对于只玩 Pokemon Go 的我来说性能非常过剩，配合原生 Android P 和纯 Google Play 应用也毫无卡顿感，主力机使用绰绰有余。火疖子摄像头效果不错，但 Google 特色，这部分还是需要放到软件部分讲。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="软件">软件<a href="#软件" class="hash-link" aria-label="软件的直接链接" title="软件的直接链接">​</a></h2><p>作为 Google 亲儿子，Pixel 3 搭载原生 Android P。对于我这个从 Android 1.6 用到 4.4 的史前索尼老用户，在 Holo theme 刚刚铺开的年代离开了 Android 阵营，更未尝体验过原汁原味的 material design。原生 Android P 整体风格已经非常成熟地全面采用 Google 的设计规范（material design 2？），较 iOS 观感活泼灵动却又自成规整的体系，很多小交互的地方也让我眼前一亮。药丸导航虽然很多人不喜欢，我还觉得蛮习惯的，总感觉点按比手势更确定且省力，而且长按药丸呼出 Google Assistant 的小动画也是百看不厌。原生系统自带的全套 Google 服务体验也很优秀，可以看出 Google 想要学习苹果创造一种闭环的生态和体验。</p><p><img loading="lazy" src="/assets/images/s1-06cea752dfe62215d6f02c7d9b95060d.png" width="514" height="1027" class="img_ev3q"></p><blockquote><p>主屏，Xperia 的动态壁纸</p></blockquote><p><img loading="lazy" src="/assets/images/s2-c435b5a15f46904e81364b2894d42475.png" width="514" height="1027" class="img_ev3q"></p><blockquote><p>挤一下两边呼出 Google Assistant</p></blockquote><p>Pixel 3 的相机着实是一大亮点，虽然只有一颗火疖子，却借助软件加持获得接近或超过多摄机型（对，就是你，iPhone Xs）的表现。日光下自不必说，白平衡和 HDR 远胜过经常高光过曝的 iPhone。夜间借助黑科技的 Night Sight，竟然能在漆黑一片几无环境光的地方拍出明亮的照片（当然能看出来 P 得有些过了，这一点见仁见智）。甚至极端情况下，我在去 Mauna Kea 观星的时候尝试了一下使用 Pixel 3 <strong>手持</strong>拍摄，竟然也清晰的拍出了几颗星星。视频防抖效果非常优秀，纯软件的情况下和 16 年 Dji Osmo Mobile 效果无异甚至更为顺滑，延时摄影、慢动作等也是一应俱全。虽然缺失了一颗长焦镜头，但 Pixel 3 借助 <a href="https://ai.googleblog.com/2018/10/see-better-and-further-with-super-res.html" target="_blank" rel="noopener noreferrer">Super Res Zoom</a> 成功实现了可以和 2x 长焦镜头媲美的效果。前置多出的一颗广角镜头也是非常好用，非常适合出去旅游自拍的场景，因为广角镜头能够容纳下更广阔的景色或者更多的人。人像效果倒是不如 iPhone，可能是少一颗摄像头的缘故，人像虚化边缘并不准确，对焦外光斑的处理也并不如 iPhone 真实。</p><p><img loading="lazy" src="/assets/images/photo1-aaa1193729cd4b4fa9758fe8aac2382e.jpg" width="1762" height="1762" class="img_ev3q"></p><blockquote><p>路边随手拍，鹅卵石细节和彩虹颜色表现准确</p></blockquote><p><img loading="lazy" src="/assets/images/photo2-1d6db93fddcef78271e1d2a6d00aa586.jpg" width="2350" height="1762" class="img_ev3q"></p><blockquote><p>手持星空测试</p></blockquote><p><img loading="lazy" src="/assets/images/photo3-61664dcd037714561bb89f275f64038b.jpg" width="2350" height="1762" class="img_ev3q"></p><blockquote><p>Super Res Zoom 测试，3x 左右</p></blockquote><p>跑个题夹带一下私货，Mauna Kea 的星空着实很好看。</p><p><img loading="lazy" src="/assets/images/star-41648a1872c56ceb5424a1b7851a71f7.jpg" width="2506" height="1671" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pixel-vs-iphone">Pixel vs iPhone<a href="#pixel-vs-iphone" class="hash-link" aria-label="Pixel vs iPhone的直接链接" title="Pixel vs iPhone的直接链接">​</a></h2><p>算是一个老生常谈的话题了，甚至可以引战到 Android vs iOS 系统之争。个人觉得当前两大系统/硬件并无明显优劣之分，但确实不同场景下也是各有千秋。</p><p>Pixel 3（或者说 Android）的软件生态的确很好。我只体验过 Google Play 下的 app，使用体验不输 iOS，丰富程度则是吊打。可以使用 Drastic 在长途旅行时玩原汁原味的宝可梦，可以使用 termux 紧急修改几行代码并上传，可以使用 ZArchiver 把修改后的文件打包发给别人...这些在 iPhone 上都是无法实现（或者过不了审核）的。作为一个 iOS 开发，我算是苦水果审核政策久矣，Google Play 的开放与丰富着实让我感觉离开了牢笼。至于 malware 的风险，别忘了还有 Google Play Protect，我认为这是比水果人工审核更为有效的机制。非常重要的一点是 Android 的内建 app 是跟随 Google Play 更新的，这和只能跟随系统更新的 iOS 内建 app 相比无疑具有更强的迭代能力。</p><p>Android Auto 在自驾游中也非常有用，虽然比 Carplay 明显卡顿，但 Android Auto 和你的手机完全独立运行互不干扰（虽然 iOS 13 终于也学去了）。甚至还有完整的键盘支持，在旅途中可以随时让副驾执行一些复杂的搜索导航任务。语音控制也是远比 Carplay 优秀，但这主要是 Google Assistant 超出 Siri 太多。比如作为一个 Apple Music 用户，我可以让 Google Assistant 播放 Apple Music 里的特定列表，而你若是想在 iOS 上使用 Siri 控制 Spotify，则还要等今年 iOS 13 新加入的 API 了。</p><p>USB Type-C 快充也真的是大大方便。在出游中，我可以一根线搞定手机、移动电源、相机和 Switch，而由于移动电源也支持快充，旅途中虽重度使用也并没有担忧过电量问题。信号更是不知道比 Xs 高到哪里去了，不管是手机使用还是开热点都稳如狗。</p><p>而 Pixel（或者说，Android）不管是系统还是 app，虽然十分流畅响应迅速且不容易被杀后台，但顺滑程度总是逊色 iOS。作为 iOS 开发平时对 iOS 动画见得多写的也多，总能看出这里动画 curve 不对那里动画没有跟手。这个不够顺滑的原因我觉得是复杂的，iOS 确实给 UI 响应提供了更高的优先级和更快的采样率，使得 Android 在机制上就不占优势；Cocoa Touch 框架里面也有完善易用的 API 和各种预先 tune 好的 curve 方便开发者轻松做出符合直觉和现实物理效果的动画，而 Android 开发者也许需要花费更多的精力才能达到 iOS 预先 tune 好的效果（我不懂 Android 我瞎猜的）。</p><p>另外对于有重度拍照/发图需求的人，必须注意一点是水果设备确实具有更完善的色彩管理和更统一的屏幕预校准。我在 MacBook Pro 上修好的图传到不同的几台 iPhone 上看效果相差无几，放在 Pixel 上则大相径庭（再次强调，我很喜欢 Pixel 的这块屏幕）。同样，如果在 Pixel 上处理好图片，放在别人的 iPhone 上显示出来的色彩的确是会和你的意图不同。但如果你在一台水果设备（iPhone, iPad, MacBook 内建屏幕）上修好图，你可以放心地认为在别人的水果设备上显示出来的色彩和你自己看到的色彩是极为接近的。</p><p>总体而言，这一个多月我对 Pixel 3 还是非常满意的。虽然 Pixel 3 并不惹眼，也没有出众的硬件，但它完全可以胜任作为主力机的一切要求，并在夜间拍照、智能助理、车载导航<del>和打电话</del>等方面提供远胜 iPhone 的体验。总结一下：</p><p><strong>真香！</strong></p>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[So Far So Good]]></title>
        <id>https://xnth97.github.io/2018/03/25/so-far-so-good</id>
        <link href="https://xnth97.github.io/2018/03/25/so-far-so-good"/>
        <updated>2018-03-25T22:24:46.000Z</updated>
        <summary type="html"><![CDATA[So far, so good: up to this point everything is all right.]]></summary>
        <content type="html"><![CDATA[<blockquote><p>So far, so good: up to this point everything is all right.</p><p>– Webster’s New World College Dictionary, 4th Edition.</p></blockquote><p>这小半年算是实现了人生的一个小目标。从大三准备转专业出国，曾经遥不可及的硅谷、湾区，等到毕业后也要搬过去了。So far so good，感谢生活朝着正轨奔去。</p><p>从 2018 年伊始开始认真的准备求职，一月先是海投了大概 100 份简历，也开了 Leetcode Premium 开始疯狂刷题，四处打听招人消息求人内推。然而一个多月都没有什么进度，感受到了所谓 new grad fulltime 寒冬的压力。</p><p>二月中旬开始陆陆续续有一些面试，不得不说这边面试和国内还是区别很大：国内基本会针对你投的职位定向地考察你对这个技术栈的实战经验和深入理解，而美国是倾向于 versatile，认为你就是一个 general 的 SDE，不会针对某种技术栈、而是考察基础知识：算法，数据结构，操作系统，计算机网络。对我这个从 iOS 开发半路出家、基础几乎一穷二白的人来说，这边面试虽然深度较国内浅，但仍然颇具挑战性。好在之前上了 Data Structure 和著名的 Introduction to Computer Systems，有一些资料可以对着啃一啃，总算是搞明白了之前一直模棱两可的很多基础知识。</p><p>面试给我印象深刻的不多。有一家小公司招 iOS 的，面试就是直接屏幕共享从设计到代码写一个小 app，期间面试官还提醒说可以随便用 GitHub, StackOverFlow，就像你正常工作一样。很多 Swift 和 Cocoa 的特性已经不熟悉了，查了很多。面试官倒觉得 ok，也在逐渐地提出新的条件来 break implementation。写了大概将近两个小时，最后又花半小时过了很多问题，广度非常宽泛，从 cookie 实现到数据库为什么查询快。一下午面下来感觉非常累，虽然写的还不错，莫名挂掉了。</p><p>General SDE 基本就一个套路了：白板写码做题。小公司的没什么好说，没什么印象。Google 是两个很冷的大哥，一轮秒了基础但 follow up 跪的很彻底，另一轮面试官和我的思路不太一样（我在想如何有效地构建图，他在想怎么有效地检查连通），很是费了一些劲和他解释，他也一直将信将疑的表情。可惜之前本来和 Project Fi 组一个大姐聊的还蛮好，我靠着一堆朋友搞 Android 耳濡目染的皮毛使劲尬聊，几乎有提前 team match 的错觉。PayPal 是个国人大叔，莫名对蚂蚁金服抱着敌意，聊的也不怎么愉快，后面没消息了。Twitter 是个很简单的题，接近当年 CC 的某个 Project 的某一题（Twitter 推荐系统，基于 PageRank），结果也没消息了。Uber ATG 是个很友善的大哥，开门见山：你写题时不一定要尬聊哈。我笑，还是边聊边写题，题目也比较有意思，corner case 很多。Uber 比较变态的是需要在线的一个编辑器里写能跑的代码，所以好几次我跑不出来真是冷汗都下来了，结果发现是忘了写 print 之类的。大哥也会和我讨论一些细节，问为什么这么实现，最后也热心地介绍了下 Uber Advanced Technology Group 在做什么。Uber ATG 感觉整体还蛮好的，可是太慢了，直到签了工作才姗姗来迟 move forward。最后喷下亚麻，约了面试时间一拖再拖，最后拖到我签了工作，赶快回邮件 thank you for your consideration。</p><p>Oath 这边实话说面试一直都非常愉快，虽然也有 general SDE 白板做题的套路，但因为 match 了 flurry 组，面试我的全部是 iOS 工程师，给题时基本都会装模作样地给一个移动端的场景，做完题后也能够问我一些深入的 iOS 开发问题。我说能够是因为其他很多公司最多问问“UITableView 用过吗” “GCD 是干嘛的”，问的非常无聊。唯有 flurry 组的大哥大姐们问出了一些非常有意思的问题，从 iOS 的底层机制、Objective-C 运行时和语言特性，到 crash 后 mach 内核异常和 unix 信号量，Cocoa Touch 框架的设计模式…面试过程中被问到这种问题让我觉得很被尊重，因为都是紧密结合我简历的经验和项目，且有针对性地提出值得深入考察的问题。而且面试过程就像两个工程师在交流对技术的理解和对问题的解决方案，甚至会拿正在做的项目来讨论系统设计，面试结束也愿意无保留告诉你他们研究出的对某种场景的最优实践，当时一轮轮面下来都感觉收获很大，学到了很多，挂了也值了。</p><p>还好最后非常幸运，喜欢团队氛围和做的事情，签的很爽快，知遇之恩。说起来我可能人生中近二十年前第一个上的网站就是雅虎，第一个邮箱也是雅虎，也算是冥冥之中自有天意吧。求职过程中得到了很多很多人的帮助，感谢媳妇儿支持与鼓励，感谢学长学姐学弟<del>还真没有学妹</del>的内推，感谢身边朋友一起奋斗，感谢大佬改简历教投递给内推带吃饭…都记在心里，力所能及的时候也要帮助别人。</p><p>说说毕设，估计是人生学生阶段最后干的一件事了。有幸能跟一位有趣的教授和 UPMC 做一些有意义的事情。这个项目总体是利用炼丹机器学习通过医疗影像进行肿瘤情况的推断，我做的还只是最开始帮助标记海量数据的工具。毕竟世界上不是所有医院都有最为顶级的医生，利用 AI 基于海量数据进行的判断也许能够帮助发展中国家的中小城镇医院也具有世界级的诊断准确率。自从几年前我妈生过病后，真的明白北上广的医院和我家最好的医院水平都是天壤之别，因此我个人觉得这是一件非常有意义有价值的工作，也很荣幸能够为这项工作贡献一些浅陋的代码。</p><p>至于现在，苦读十数年即将毕业拿到学位，和媳妇一起去湾区工作，也和朋友们搬的更近，父母亲人身体健康，家里一切都好毋需挂念，so far so good，感恩生活。</p>]]></content>
        <category label="daily" term="daily"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序算法笔记]]></title>
        <id>https://xnth97.github.io/2018/02/04/sorting-algorithms</id>
        <link href="https://xnth97.github.io/2018/02/04/sorting-algorithms"/>
        <updated>2018-02-04T22:12:16.000Z</updated>
        <summary type="html"><![CDATA[从接触算法就开始说的排序，这里总结一下。]]></summary>
        <content type="html"><![CDATA[<p>从接触算法就开始说的排序，这里总结一下。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bubble-sort">Bubble Sort<a href="#bubble-sort" class="hash-link" aria-label="Bubble Sort的直接链接" title="Bubble Sort的直接链接">​</a></h2><p>冒泡排序是最基础的排序了，主要有三个基本步骤：</p><ul><li>每次比较两个值</li><li>如果左边的值更大，则交换两个值的位置，以将更大的值排到右边</li><li>向右移动一个位置</li></ul><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">bubbleSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> outerIdx </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">stride</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> to</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> by</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> innerIdx </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> outerIdx </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对一个长度为 n 的数组，worst-case 下需要执行交换的次数为 n(n - 1)/2，需要比较的次数也为 n(n - 1)/2。冒泡排序的时间复杂度为 O(n^2)。冒泡排序是稳定的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="selection-sort">Selection Sort<a href="#selection-sort" class="hash-link" aria-label="Selection Sort的直接链接" title="Selection Sort的直接链接">​</a></h2><p>选择排序比冒泡排序快一点，主要有两个基本步骤：</p><ul><li>选择最小的值</li><li>把它和最左边的元素交换</li></ul><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">selectionSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> outerIdx </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// set initial min value's index</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> minimum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> outerIdx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// select a new minimum value's index</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> innerIdx </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> outerIdx </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">minimum</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// if new min, reset index</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                minimum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> innerIdx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> outerIdx </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> minimum </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">outerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">minimum</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">minimum</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">outerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对一个长度为 n 的数组，worst-case 下需要执行交换的次数为 n - 1，需要比较的次数为 n(n - 1)/2。选择排序的时间复杂度为 O(n^2)。选择排序是不稳定的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="insertion-sort">Insertion Sort<a href="#insertion-sort" class="hash-link" aria-label="Insertion Sort的直接链接" title="Insertion Sort的直接链接">​</a></h2><p>插入排序比前两个都快，插入排序的关键在于有一条想象的分界线。主要思路是：</p><ul><li>分界线左边的元素都排好序了</li><li>分界线右边的第一个元素需要被插到左边的一个恰当位置中<ul><li>首先，把右边第一个元素的值存到一个临时变量中</li><li>把左边的元素全部向右移一位，从而可以有一个位置来放要插入的值</li><li>找到位置后，插入临时变量中的值</li></ul></li></ul><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">insertionSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> outerIdx </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">outerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> innerIdx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> outerIdx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// go backward in the left side of the line</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// shift the values</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> innerIdx </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> tmp </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            innerIdx </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> outerIdx </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> innerIdx </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">innerIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tmp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对一个长度为 n 的数组，worst-case 下需要比较的次数为 n(n - 1) / 2，如果是随机分布的数组则表现会更好。插入排序最坏的情况下复杂度为 O(n^2)，最好的情况下为 O(n)（输入数组已经排好序的情况下）。插入排序也是稳定的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="merge-sort">Merge Sort<a href="#merge-sort" class="hash-link" aria-label="Merge Sort的直接链接" title="Merge Sort的直接链接">​</a></h2><p>归并排序的思路是 divide and conquer algorithms 的一个生动的例子。归并排序的思路为：</p><ul><li>用归并排序排好前一半</li><li>用归并排序排好后一半</li><li>归并排好序的两半</li></ul><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">mergeSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// helper that merges two parts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">merge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> merged</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> aIdx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> bIdx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> aIdx </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> bIdx </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">aIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                merged</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">aIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                aIdx </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                merged</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bIdx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                bIdx </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> aIdx </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            merged </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">aIdx </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> bIdx </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            merged </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bIdx </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> merged</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> mid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// create left array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> mid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// create right array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mid </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// call itself with left half</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sortedLeft </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mergeSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// call itself with right half</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sortedRight </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mergeSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// merge</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">merge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sortedLeft</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sortedRight</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>归并排序的时间复杂度为 O(n log n)，空间复杂度为 O(n)，是稳定的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="quick-sort">Quick Sort<a href="#quick-sort" class="hash-link" aria-label="Quick Sort的直接链接" title="Quick Sort的直接链接">​</a></h2><p>快速排序的思路主要有三步：</p><ul><li>把数组分成左半部分（较小值）和右半部分（较大值）</li><li>用快速排序排序左半部分</li><li>用快速排序排序右半部分</li></ul><p>中心思想就是 partitioning，需要选择一个 pivot value 来决定每个值属于哪个部分。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">quickSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">partition</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivot</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> leftPtr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> rightPtr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">leftPtr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> pivot </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                leftPtr </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> rightPtr </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rightPtr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> pivot </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                rightPtr </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> leftPtr </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> rightPtr </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">leftPtr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rightPtr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rightPtr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">leftPtr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> leftPtr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">quickSortHelper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// base case</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// last value is pivot</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> pivot </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> partition </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">partition</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivot</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pivot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">quickSortHelper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> partition </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">quickSortHelper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> partition </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">quickSortHelper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这是一种原位置排序的实现。利用 Swift 语言的特性，我们可以给出一种远远更为简洁的实现：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">quickSortV2</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> unsorted </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// initialize arrays</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// pick pivot value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> pivot </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> unsorted</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">popLast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> x </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> unsorted </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> pivot </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// call itself</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">quickSortV2</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pivot</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">quickSortV2</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>快速排序的时间复杂度为 O(n log n)。根据下面和大佬同学 <a href="https://dinglisa.com/blog/" target="_blank" rel="noopener noreferrer">@LisaDing</a> 的讨论，原地快速排序的空间复杂度一般可以为 O(log n)（即递归深度，因为每次保存常数信息，栈帧里总共就会有 log n，具体讨论可见 <a href="https://stackoverflow.com/questions/12573330/why-does-quicksort-use-ologn-extra-space" target="_blank" rel="noopener noreferrer">这里</a>），worst case 为 O(n)。第二种非原地的快速排序空间复杂度为 O(n log n)（具体见 <a href="https://stackoverflow.com/questions/38487269/space-complexity-of-quick-sort" target="_blank" rel="noopener noreferrer">stackoverflow 的这个帖子</a>）。因此，快速排序的空间复杂度和具体实现关系很大。快速排序是不稳定的。</p>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构笔记]]></title>
        <id>https://xnth97.github.io/2017/12/19/data-structure-note</id>
        <link href="https://xnth97.github.io/2017/12/19/data-structure-note"/>
        <updated>2017-12-19T21:35:15.000Z</updated>
        <summary type="html"><![CDATA[这学期感觉 Terry 的 Data Structures for Application Developers 对我帮助巨大。毕竟非科班出身，很多概念都是一知半解。第一天上课的时候，Terry 掏出了一把小锤子，尝试用它干各种事情。大家哈哈大笑的时候，Terry 说，]]></summary>
        <content type="html"><![CDATA[<p>这学期感觉 Terry 的 Data Structures for Application Developers 对我帮助巨大。毕竟非科班出身，很多概念都是一知半解。第一天上课的时候，Terry 掏出了一把小锤子，尝试用它干各种事情。大家哈哈大笑的时候，Terry 说，</p><blockquote><p>This is exactly what you are doing. You have lots of tools, but you always use ArrayList.</p></blockquote><p>这门课学下来，Terry 深入浅出地讲解了各种基础算法和数据结构、它们背后的实现、以及如何去选择，上完课的时候真的让我有些醍醐灌顶的感觉。最后一节课下课前，Terry 又说，</p><blockquote><p>Now you know your tools. Use them wisely.</p></blockquote><p>这里就来梳理一下我们手中的 tools。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="array-arraylist-linkedlist">Array, ArrayList, LinkedList<a href="#array-arraylist-linkedlist" class="hash-link" aria-label="Array, ArrayList, LinkedList的直接链接" title="Array, ArrayList, LinkedList的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="array-与-linear-search">Array 与 Linear Search<a href="#array-与-linear-search" class="hash-link" aria-label="Array 与 Linear Search的直接链接" title="Array 与 Linear Search的直接链接">​</a></h3><p>Java 中的数组（没记错的话 C 也是）长度是固定的，即数组一旦创建无法改变大小，所以数组的 <code>length</code> 是 immutable field。如果需要改变，只能创建一个新的更大的数组然后调用 <code>System.arraycopy()</code> 复制。在内存中，假设我们有数组 <code>int array[]</code>，其中 <code>array[0]</code> 的地址是 0x200，那么 <code>array[2]</code> 的地址就是 0x200 + 2 <!-- -->*<!-- --> 4（Java 中 int 是 4 bytes）= 0x208，因此通过下标获取数组中的某个元素可以在常数时间内完成（直接计算地址）。如果用 C 表示的话，那就是 <code>array[2]</code> 和 <code>*(array + 2)</code> 是完全一样的。</p><p>假设我们需要在 Array 中找到一个值并删除，一种简单的思路当然是遍历数组总会找到的，这就是 linear search 或 sequential search，一种最简单的搜索算法。同时，在 worst-case 下，它的运行时间也是 O(n) 的，因为可能需要遍历所有 n 个元素。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="arraylist-与-binary-search">ArrayList 与 Binary Search<a href="#arraylist-与-binary-search" class="hash-link" aria-label="ArrayList 与 Binary Search的直接链接" title="ArrayList 与 Binary Search的直接链接">​</a></h3><p>Java 中的 ArrayList 提供了诸如 <code>add()</code>，<code>set()</code> 一类的操作，看起来像是能够改变数组的长度。实际上，ArrayList 底层有一个 Array 数据结构，在每次执行 <code>add()</code> 方法前，会先执行 <code>ensureCapacity()</code> 方法去确保当前持有的 Array 能够有足够的空间。如果没有的话，ArrayList 会创建一个新的更大的数组，然后把旧数组的所有内容复制过来。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ensureCapacity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> minCapacity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    modCount</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> oldCapacity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> elementData</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">minCapacity </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> oldCapacity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Object</span><span class="token plain"> oldData</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> elementData</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> newCapacity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">oldCapacity </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newCapacity </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> minCapacity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            newCapacity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> minCapacity</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        elementData </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Arrays</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">copyOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">elementData</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> newCapacity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意在计算 <code>newCapacity</code> 时的 + 1，这是为了保证在 <code>oldCapacity == 0</code> 的时候也能够按照我们预期的执行。</p><p>因此，ArrayList 频繁执行 <code>add()</code> 会造成时间复杂度显著的增加，原因在于一般情况下 <code>add()</code> 可以在常数时间完成，然而一旦触发数组复制，需要消耗和原数组长度线性相关的时间去执行复制。因此，不断调用 ArrayList 的 <code>add()</code>，消耗的时间曲线类似于这样：</p><p><img loading="lazy" src="/assets/images/1-98dddeaa20b50c7ebfe817637b64bb0d.png" width="1050" height="488" class="img_ev3q"></p><p>这就是 ArrayList 的 latency issue。还要注意，在调用 <code>remove()</code> 的时候，由于 Array 不允许内部出现空，因此 ArrayList 需要把内部数组里待删除元素之后的元素全部左移，而且不像 <code>add()</code> 仅会在特定次数时触发数组复制，每次 <code>remove()</code> 都会导致元素移动，因此是非常效率低下的。</p><p>对于一个排好序的数组，除了 linear search，一个更好的选择是 binary search。它的思路是每次比较数组正中间的值，如果大于中间值，则对右半边数组继续搜索，否则在左半边搜索。Binary search 大大减少了搜索所需要的时间复杂度，可以达到 O(log n)。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">binarySearch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">NSNotFound</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> lowerBound </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> upperBound </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> mid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> lowerBound </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> upperBound </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">NSNotFound</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 注意：直接使用 (lowerBound + upperBound) / 2 可能导致超出 Int 范围溢出</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lowerBound </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">upperBound </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lowerBound</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> mid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lowerBound </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> mid </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            upperBound </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> mid </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="linkedlist">LinkedList<a href="#linkedlist" class="hash-link" aria-label="LinkedList的直接链接" title="LinkedList的直接链接">​</a></h3><p>为了在常数时间内执行 <code>add()</code> 和 <code>remove()</code>，我们提出了 LinkedList 的数据结构。LinkedList 的思想是：一条链表由若干节点构成，每个节点的 <code>next</code> 属性指向它的下一个节点，链表的 <code>head</code> 指向第一个节点，这就是 singly linked list。如果节点还具有 <code>prev</code> 属性指向它的上一个节点，链表还具有 <code>tail</code> 属性指向最后一个节点，这就是一个 doubly linked list。</p><p>实现 LinkedList 的数据结构。首先我们需要定义节点的类，把它实现为一个 inner class。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">LinkedList</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Equatable</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> head</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">head </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后实现 SinglyLinkedList 的各个方法。这里如果我们需要插入一个元素，只要找到上一个元素，然后更改对应的引用就可以了；删除同理。因此，链表的插入和删除可以较快完成。同样的，链表并不是连续的数据结构，一个链表的相邻节点可以在内存中相隔很远。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 添加到链表开头</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">addFirst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> newHead </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> head</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    head </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> newHead</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 添加到链表结尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">addLast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> head </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">addFirst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> head</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 在后面插♂入</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">after key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> head</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tmp</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tmp</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 在前面插入</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">before key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> head </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> head</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">addFirst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> prev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> head</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> curr </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> curr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        curr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> curr</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> curr </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        prev</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 删除</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> head </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> head</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> item </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">head </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> head</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> prev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> head</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> curr </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> item </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> curr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        curr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> curr</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> curr </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        prev</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">next</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h3><ul><li>Array 或 ArrayList<ul><li>随机访问的数据结构：每一项可以在常数时间内获取</li><li>插入和删除时需要消耗大量资源（移位，复制），连续的数据结构</li></ul></li><li>LinkedList<ul><li>顺序访问的数据结构：元素只能按照一定顺序访问（next, prev）</li><li>链表元素持有数据和对下一个（上一个）元素的引用</li><li>插入和删除元素时无需移动元素，只需要更改引用，不连续的数据结构</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="stack-queue">Stack, Queue<a href="#stack-queue" class="hash-link" aria-label="Stack, Queue的直接链接" title="Stack, Queue的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Stack的直接链接" title="Stack的直接链接">​</a></h3><p>栈是一种按照后入先出（last-in-first-out, aka LIFO）顺序插入/移除元素的数据结构。栈的使用非常普遍，例如浏览器的历史记录，例如 iOS 中 <code>UINavigationController</code> 就是维护了一个栈。栈最关键的是有两种操作（peek 不关键）：</p><ul><li>Push：把一个元素压到栈顶</li><li>Pop：把栈顶的元素弹出</li><li>Peek：返回栈顶元素，无需弹出</li></ul><p>栈是建立在其它数据结构的基础上的，它的内部可以是数组也可以是链表。比如，我们可以用一个 LinkedList 去实现栈，这样 push 操作可以用 <code>addLast()</code>，pop 操作可以用 <code>removeLast()</code>。栈的 push 和 pop 操作都应该在常数时间内完成。</p><p>基于 Swift Array，栈可以非常简单地实现。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Stack</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">array </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> isEmpty</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute atrule" style="color:#00a4db">@discardableResult</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">pop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">popLast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">peek</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">last</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="queue">Queue<a href="#queue" class="hash-link" aria-label="Queue的直接链接" title="Queue的直接链接">​</a></h3><p>队列是一种按照先入先出（first-in-first-out, aka FIFO）顺序插入/移除元素的数据结构。队列也非常常见，比如打印机的队列、在星巴克门店的排队。队列主要也有两种操作：</p><ul><li>Enqueue：把一个元素插入到队列的尾部</li><li>Dequeue：把队首元素移除</li></ul><p>队列也可以建立在其他数据结构基础上，最简单的当然还是 LinkedList，入队即是 <code>addLast()</code>，出队即 <code>removeFirst()</code>。同样的，入队和出队操作也应该在常数时间内完成。</p><p>这里给一个基于 Swift Array 的非常简单的队列实现。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Queue</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">array </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> isEmpty</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">enqueue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute atrule" style="color:#00a4db">@discardableResult</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">dequeue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> isEmpty </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> first </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">first</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">at</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> first</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">peekFront</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">first</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hashtable">HashTable<a href="#hashtable" class="hash-link" aria-label="HashTable的直接链接" title="HashTable的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hashing">Hashing<a href="#hashing" class="hash-link" aria-label="Hashing的直接链接" title="Hashing的直接链接">​</a></h3><p>哈希表的主要目标是提高<strong>搜索</strong>的速度。回想之前总结的，linear search 可以保证 O(n) 的运行速度，而对一个排好序的数组，binary search 可以达到 O(log n) 的运行速度。在数组中，我们知道根据下标访问元素是 O(1) 的，那么如果我们知道要搜索的值所对应的下标，则搜索速度也将被加快到 O(1)。用来把搜索值和下标对应起来的函数就是哈希函数。一个良好的哈希函数应该有以下特点：</p><ul><li>能够快速计算</li><li>在下标范围内均匀分布</li></ul><p>假设我们的哈希函数是取 4 的余数，这样对于 5 和 65 我们会得到相同的哈希值 1。对不同元素计算出相同哈希值叫做发生了 collision（碰撞？），解决 collision 主要有以下方法：</p><ul><li>Open addressing<ul><li>Linear probing：发生 collision 后，直接继续向下找，直到找到数组中一个空的地方可以存放数据。需要注意的是，由于数组长度是不可变的，因此我们定义一个概念叫做 load factor（元素个数/数组长度），如果 load factor 超过某个阈值，我们就创建一个更大的数组，重新计算哈希值并排列元素。</li><li>Quadratic probing：利用一个固定的步长去做 secondary clustering。</li><li>Double hashing：首先计算哈希值，其次利用哈希值计算步长。通常使用的公式是 s = 1 + (k % (m−2))，其中 s 为步长，k 为第一步计算的哈希值，m 为数组长度。</li></ul></li><li>Closed addressing<ul><li>Separate chaining：对于每一个哈希值，不再指向数组中确定的值，而是指向一个链表，具有相同哈希值的元素均存储在哈希值对应的链表中。</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hashtable-1">HashTable<a href="#hashtable-1" class="hash-link" aria-label="HashTable的直接链接" title="HashTable的直接链接">​</a></h3><p>我们根据 linear probing 来处理 collision，用数组作为哈希表的底层数据结构。首先实现哈希表数据结构和 inner class：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">HashTable</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// inner class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">DataItem</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">DataItem</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">initialCapacity</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hashArray </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">repeating</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> initialCapacity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后我们实现关键的哈希函数，这里我们简单地使用取模。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">hash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> key </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接下来我们实现搜索、删除和插入，核心思路都是计算 key 的哈希值，如果不对就继续向下找。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 搜索</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">search</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> hashVal </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">hashVal</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">hashVal</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hashVal </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 每次都取模防止溢出</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hashVal </span><span class="token operator" style="color:#393A34">%=</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 删除</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute atrule" style="color:#00a4db">@discardableResult</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">delete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> hashVal </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> dataItem </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">hashVal</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> dataItem</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hashArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">hashVal</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hashVal </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hashVal </span><span class="token operator" style="color:#393A34">%=</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">NSNotFound</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 插入</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> item </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">DataItem</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> hashVal </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">hashVal</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hashVal </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hashVal </span><span class="token operator" style="color:#393A34">%=</span><span class="token plain"> hashArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hashArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">hashVal</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> item</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="binary-tree">Binary Tree<a href="#binary-tree" class="hash-link" aria-label="Binary Tree的直接链接" title="Binary Tree的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="啥是二叉树">啥是二叉树<a href="#啥是二叉树" class="hash-link" aria-label="啥是二叉树的直接链接" title="啥是二叉树的直接链接">​</a></h3><p>我们知道，在排好序的数组中，binary search 可以达到 O(log n) 的搜索速度，但插入和删除很慢。在 LinkedList 中可以达到 O(1) 的插入和删除速度，但需要 O(n) 去搜索。如何把两种数据结构的优点结合起来呢？答案就是树，这里我们具体讨论二叉树。</p><p>一棵树具有以下结构：</p><ul><li>Root：树顶端的节点。</li><li>Parent：当一个节点（除了根）具有一条向上的边连接另一个节点时，这里上面的节点就称为父节点。</li><li>Child：同上，下面那个节点就称为子节点。</li><li>Leaf：没有任何子节点的节点称为叶。一棵树中只有一个根，但可以有很多个叶节点。</li><li>Level/Height：一个节点到树的根的层级数称为这个节点的 level。</li></ul><p><img loading="lazy" src="/assets/images/2-86a53287c057e8beabcdb296f2e89b1d.png" width="1252" height="936" class="img_ev3q"></p><p>关于二叉树有以下几个概念：</p><ul><li>二叉树：二叉树的节点包括它携带的数据、left（对左子节点的引用）和 right（对右子节点的引用）。换句话说，二叉树里的每个节点最多只有两个子节点。</li><li>满二叉树：每个节点只有 0 个或 2 个节点。</li><li>完全二叉树：一棵每一行从左到右都完全具有节点的二叉树，最底一行可以例外，但也必须从左到右不能有间隔。</li><li>二叉搜索树：对于每个有键 k 的节点，它的左子树里的每个节点的键都必须小于 k，而它右子树里的每个节点的键都必须大于 k（不允许重复键）。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实现">实现<a href="#实现" class="hash-link" aria-label="实现的直接链接" title="实现的直接链接">​</a></h3><p>这里实现的是二叉搜索树。首先实现基本数据结构和节点的数据结构：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">BinarySearchTree</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Comparable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Comparable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Equatable</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">K</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Implement equatable protocol for node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lhs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        rhs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> lhs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> rhs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> lhs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> rhs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> lhs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> rhs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">root </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>搜索方法根据 binary search tree 的特性实现，复杂度为 O(log n)。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">search</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> root </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>要插入一个节点，首先还是需要搜索到节点在树中的位置，然后通过修改引用插入到树中。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> newNode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> root </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        root </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> newNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> newNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> newNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>而要删除一个节点，我们需要分别考虑以下几种情况：</p><ul><li>要删除的节点不在树中</li><li>要删除的节点是叶节点</li><li>要删除的节点有一个子节点<ul><li>只有左子节点</li><li>只有右子节点</li></ul></li><li>要删除的节点有两个子节点</li></ul><p>首先搜索到节点：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">delete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> root </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> isLeftChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// find the current node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            isLeftChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            isLeftChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// TODO:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们考虑节点未找到的情况：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// case 1: node not found</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> current </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接下来考虑节点是一个叶节点（即没有子节点），如果该节点是父节点的左子节点，则直接将父节点的左子节点设为 nil，否则把右子节点置空。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// case 2: a leaf</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> root </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        root </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> isLeftChild </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后考虑节点只有一个子节点的情况：如果该节点是父节点的左子节点，则将父节点的左子节点设为自己的子节点；否则将父节点的右子节点设为自己的子节点。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// case 3: one child</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// only has left child</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> root </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        root </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> isLeftChild </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>最后考虑节点具有两个子节点的情况。这时我们不能简单地更改引用了，我们需要找到这个节点的“继任者”，来代替被删除的节点在树中的位置。一般来说，继任者节点就是在待删除节点右子树中具有最小 key 的节点。我们首先实现寻找继任者的函数：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">getSuccessor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">toDelete</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// find the minimum node in toDelete's right subtree</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> toDelete</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> successor</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> toDelete</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> toDelete</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> successor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        successor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> successor </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> toDelete</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> successor</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        successor</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> toDelete</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> successor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>有了这个函数，我们继续实现删除函数中的第四种情况：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// case 4: two children</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> successor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getSuccessor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">toDelete</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> root </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        root </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> successor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> isLeftChild </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> successor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> successor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    successor</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="遍历">遍历<a href="#遍历" class="hash-link" aria-label="遍历的直接链接" title="遍历的直接链接">​</a></h3><p>对于树的遍历一般有三种：</p><ul><li>Inorder：遍历顺序为 left -&gt; parent -&gt; right</li><li>Preorder：顺序为 parent -&gt; left -&gt; right</li><li>Postorder：顺序为 left -&gt; right -&gt; parent</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="dfs">DFS<a href="#dfs" class="hash-link" aria-label="DFS的直接链接" title="DFS的直接链接">​</a></h4><p>遍历二叉树最常用的就是深度优先搜索和广度优先搜索，Inorder DFS 遍历可以通过递归简单地实现：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">dfsTraverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">traverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> res</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// traversal helper function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">traverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> node </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">traverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">traverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Preorder 和 Postorder 仅需要交换最后三行代码的顺序即可，不做赘述。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="bfs">BFS<a href="#bfs" class="hash-link" aria-label="BFS的直接链接" title="BFS的直接链接">​</a></h4><p>广度优先搜索的中心思想就是从根节点开始沿着树的宽度遍历树的节点，一般会用一个 Queue 来保持所有展开的节点。一个简单的实现如下：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">bfsTraverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> root </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> queue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> node </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        index </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="iterative">Iterative<a href="#iterative" class="hash-link" aria-label="Iterative的直接链接" title="Iterative的直接链接">​</a></h4><p>Iterative 的遍历就比较有意思了，通常是利用一个栈来模拟 DFS 递归调用的过程。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="inorder">Inorder<a href="#inorder" class="hash-link" aria-label="Inorder的直接链接" title="Inorder的直接链接">​</a></h5><p>保持一个 Stack，循环：</p><ul><li>寻找树的最左边节点，一路上所有的元素都入栈</li><li>出栈，访问节点</li><li>如果这个节点存在右子树，回到第一步（即寻找右子树的最左边节点，一路上所有元素都入栈）</li></ul><p>直到栈变成空，表示我们已经访问过了所有的元素。</p><p>Inorder iterative 的实现如下：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">inorderTraverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> root </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// add all through the left-most node of the tree</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">popLast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// if the removed node still has non-empty right subtree,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// add all through the right node's left most child</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> res</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="preorder">Preorder<a href="#preorder" class="hash-link" aria-label="Preorder的直接链接" title="Preorder的直接链接">​</a></h5><p>保持一个 Stack，初始化为 <code>[root]</code>，循环：</p><ul><li>出栈，访问节点</li><li>如果有右子树，入栈</li><li>如果有左子树，入栈</li></ul><p>注意：由于栈后入先出的特性，这里入栈的顺序（先右再左）和访问的顺序（先左再右）相反。</p><p>实现：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">preorderTraverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> root </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> stack </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">popLast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> res</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="postorder">Postorder<a href="#postorder" class="hash-link" aria-label="Postorder的直接链接" title="Postorder的直接链接">​</a></h5><p>后序遍历可以仿照前序遍历的写法，不同的是我们可以构造一个按 parent -&gt; right -&gt; left 访问的顺序，然后把遍历结果反转过来即可得到后序遍历结果。</p><p>实现：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">postorderTraverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> root </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> stack </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">V</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">popLast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// to avoid extra reverse, just insert at 0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> at</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// access: right -&gt; left, push into stack: left -&gt; right</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            stack</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> res</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="heap">Heap<a href="#heap" class="hash-link" aria-label="Heap的直接链接" title="Heap的直接链接">​</a></h2><p>堆是一类基于树的特殊的数据结构，通常我们反复从堆中提取一个最大值或最小值，这里我们以最大堆 Max Heap 为例。最大堆是一个二叉树，且具有以下性质：</p><ul><li>（几乎是）完全二叉树：除最底层外，每一层的树都从左到右完全具有节点</li><li>最大值在树的根节点</li><li>最大堆的每个节点的子树都小于它</li></ul><p>堆不是一个排好序的数据结构，而是可以被看作部分有序。堆的高度为 log(n)。一个最大堆的主要操作是 <code>insert()</code> 和 <code>removeMax()</code>（最小堆就是 <code>removeMin()</code>），后面会详解。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="基于数组的实现">基于数组的实现<a href="#基于数组的实现" class="hash-link" aria-label="基于数组的实现的直接链接" title="基于数组的实现的直接链接">​</a></h3><p>由于堆是（几乎）完全二叉树的性质，我们可以利用一个数组实现堆。对一个（几乎）完全二叉树，可以对每个元素从左到右、从上到下从 1 开始编号：</p><p><img loading="lazy" src="/assets/images/3-28f76b51669d1842d148d36a5536f659.png" width="492" height="355" class="img_ev3q"></p><p>可以发现规律：每个节点的左子节点编号是它的编号的二倍，右子节点的编号是它编号二倍加一。利用这个规律，我们可以推出数组下标（从 0 开始）的关系：</p><ul><li>parent = (index - 1) / 2</li><li>leftChild = index * 2 + 1</li><li>rightChild = (index + 1) * 2</li></ul><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MaxHeap</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Comparable</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">heapArray </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="insert">Insert<a href="#insert" class="hash-link" aria-label="Insert的直接链接" title="Insert的直接链接">​</a></h3><p>向最大堆插入元素的算法如下：</p><ul><li>把新的数据插入到堆的下一个节点，使堆保持（几乎）完全二叉树结构。一般来说如果最后一层不满就往右边插入，最后一层满了就插到下一行的最左边</li><li>比较新节点和父节点，如果新节点较大，则把新的节点和它的父节点交换。重复这个过程，直到整个树满足堆的条件</li></ul><p><img loading="lazy" src="/assets/images/4-b1c625885abd6fc985576377b66ff6fc.png" width="841" height="364" class="img_ev3q"></p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// insert into MaxHeap</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> node </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">percolateUp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// percolate up helper function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">percolateUp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// save the bottom node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> bottom </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">last </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> index</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// find the initial index value of parent</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> parent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// while parent's key is smaller than the new key</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> bottom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// parent node comes down</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// index moves up</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> parent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// continue with its parent</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">parent </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// finally, insert newly added node into proper position</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> bottom</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="removemax">RemoveMax<a href="#removemax" class="hash-link" aria-label="RemoveMax的直接链接" title="RemoveMax的直接链接">​</a></h3><p>从最大堆移除最大元素的算法如下：</p><ul><li>移除掉根节点（就是最大的元素）并把整个树最底层的节点替换到根的位置，以使堆保持完全二叉树结构</li><li>如果这个节点比它的较大的子节点小，则交换它们；重复这个过程直到整个树满足堆的条件</li></ul><p><img loading="lazy" src="/assets/images/5-ec3d39e1145dd51e2aa7967290e8c481.png" width="1095" height="418" class="img_ev3q"></p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// remove max from heap</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">removeMax</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">guard</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> root </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">first </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token nil constant" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> last </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">last </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> last</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">removeLast</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isEmpty </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">perculateDown</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// perculate down helper function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">perculateDown</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> index</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> top </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// index of larger child</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> largerChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> leftChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> rightChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// find which child is larger</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> rightChild </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">leftChild</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rightChild</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            largerChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rightChild</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            largerChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> leftChild</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// no need to go down any more</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">largerChild</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> top</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// move the nodes up</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">largerChild</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// index goes down towards larger child</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> largerChild</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// put top key into proper location to restore the heap</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    heapArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> top</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="堆排序和优先队列">堆排序和优先队列<a href="#堆排序和优先队列" class="hash-link" aria-label="堆排序和优先队列的直接链接" title="堆排序和优先队列的直接链接">​</a></h3><p>堆排序是一种非常有趣的排序方法，基本思路就是从未排序的数组一个个把元素丢到堆里，然后再一遍遍 <code>removeMax()</code> 或 <code>removeMin()</code>，就得到了排好序的数组。插入和移除操作的 worst-case 都是 O(n log n)。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">heapSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> heap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">MaxHeap</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Int</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> data </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token omit keyword" style="color:#00009f">_</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">count </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> max </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">removeMax</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ret</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">max</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> at</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在 Java <code>Collections</code> 框架的实现中，<code>PriorityQueue</code> 类就是使用最小堆实现的。因此，遍历一个优先队列不能保证元素的顺序（因为堆是部分有序的），必须要一个个出队才能获得正确的顺序。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="小结">小结<a href="#小结" class="hash-link" aria-label="小结的直接链接" title="小结的直接链接">​</a></h2><p>以上就是几种基础的数据结构和它们的简单实现。不同数据结构由于设计和实现的不同，在看似相同的方法背后有着截然不同的原理和复杂度。在日常开发过程中，一定要根据业务需求选择合适的数据结构，合理利用系统资源，提高总体运行效率。</p>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi 手记]]></title>
        <id>https://xnth97.github.io/2017/10/25/raspberry-pi</id>
        <link href="https://xnth97.github.io/2017/10/25/raspberry-pi"/>
        <updated>2017-10-25T22:25:51.000Z</updated>
        <summary type="html"><![CDATA[近期搞来一块新电脑（？）不能免俗，选择了 Raspberry Pi 3B。树莓派的牛皮纸袋包装真的很可爱，乍一看真的很像从超市买了一袋子树莓回来。]]></summary>
        <content type="html"><![CDATA[<p>近期搞来一块新电脑（？）不能免俗，选择了 Raspberry Pi 3B。树莓派的牛皮纸袋包装真的很可爱，乍一看真的很像从超市买了一袋子树莓回来。</p><p><img loading="lazy" src="/assets/images/1-57fe61125554ba5d17e1b24614e03398.jpg" width="720" height="721" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化">初始化<a href="#初始化" class="hash-link" aria-label="初始化的直接链接" title="初始化的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装系统">安装系统<a href="#安装系统" class="hash-link" aria-label="安装系统的直接链接" title="安装系统的直接链接">​</a></h3><p>准备一张 MicroSD 卡，系统镜像直接下载 <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener noreferrer">Raspbian</a>。有个 Noobs 是一个 easy installer，没什么用处。下载镜像后烧写到 MicroSD 卡里，推荐使用 <a href="https://etcher.io" target="_blank" rel="noopener noreferrer">Etcher</a>，全平台的一个简洁好用的镜像烧写工具。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="无头启动">“无头”启动<a href="#无头启动" class="hash-link" aria-label="“无头”启动的直接链接" title="“无头”启动的直接链接">​</a></h3><p>一般来说，树莓派是需要接上 USB 键鼠、HDMI 连接显示器、插上网线启动的。这些东西我一个都没有，于是使用所谓 headless setup 的方法，直接使树莓派连接上 WiFi 热点并开启 ssh。首先打开 MicroSD 卡的 boot 分区，<code>touch ssh</code> 放入一个空白的 <code>ssh</code> 文件，告诉系统打开 ssh。然后在同样位置创建一个 <code>wpa_supplicant.conf</code> 文件，内容为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">country=US # 这里换成你所在的国家</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">update_config=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">network={</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ssid="你的 WiFi SSID"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    psk="你的 WiFi 密码"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样树莓派启动后会自动读取配置连接 WiFi 热点，即可以用 ssh 愉快地玩耍了。上电。</p><p><img loading="lazy" src="/assets/images/2-d2b2e6638663056a18cd01bc477264b6.jpg" width="720" height="720" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="设置">设置<a href="#设置" class="hash-link" aria-label="设置的直接链接" title="设置的直接链接">​</a></h3><p>在自己路由器管理页面记住树莓派的 IP，用 <code>ssh pi@树莓派的 IP</code> 连接，默认密码为 raspberry。初次启动，使用 <code>sudo passwd</code> 更改下密码，然后 <code>sudo raspi-config</code> 命令进入树莓派的设置工具。</p><p>我在这里进行的变更有：</p><ul><li>Boot options -&gt; Desktop / CLI -&gt; Console</li><li>Interfacing options -&gt; VNC -&gt; Enable</li><li>Advanced options -&gt; Expand filesystem</li></ul><p>开启第二步后，不熟悉命令行的话也可以通过 VNC 连接远程桌面使用树莓派了。需要在终端内启动 <code>vncserver :1</code>，然后就可以从 VNC 客户端里通过 <code>树莓派的 IP:1</code> 连接了。不使用的话可以 <code>vncserver -kill :1</code> 关闭。</p><p>一切就绪，安装好 vim、oh-my-zsh、git 之类工具，树莓派基本就可用了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="搭建下载机">搭建下载机<a href="#搭建下载机" class="hash-link" aria-label="搭建下载机的直接链接" title="搭建下载机的直接链接">​</a></h2><p>搞树莓派的核心需求是搭建一个能够远程控制的下载机，同时我在家里的时候可以直接访问树莓派连接的硬盘，甚至直接通过兼容流媒体协议的 app 播放。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="挂载硬盘">挂载硬盘<a href="#挂载硬盘" class="hash-link" aria-label="挂载硬盘的直接链接" title="挂载硬盘的直接链接">​</a></h3><p>这里我的硬盘因为要兼容 macOS 和 Windows，所以格式化为了 exFAT 格式，需要安装对应读写的驱动：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> exfat-fuse</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>之后挂载移动硬盘到 /mnt/hdd：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mount</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-o</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">uid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">pi,gid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">pi /dev/sda1 /mnt/hdd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>不用后弹出：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">umount</span><span class="token plain"> /mnt/hdd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意：由于电压原因，树莓派直接连接移动硬盘可能不稳定。我的方法是将移动硬盘连接到有 USB 接口的显示器，再把显示器 USB 线连接到树莓派上。如果有带有供电的 USB HUB 理论上应该也可以。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-aria2">安装 aria2<a href="#安装-aria2" class="hash-link" aria-label="安装 aria2的直接链接" title="安装 aria2的直接链接">​</a></h3><p>大名鼎鼎的 aria2 就无需多言了。直接安装：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> aria2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接下来需要给 aria2 创建两个文件：一个配置文件，一个用来保存下载会话。找到一个合适的路径，<code>touch aria2.session</code> 创建空白会话文件。然后 <code>vim aria2.conf</code>，编辑配置文件：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dir = /path/to/your/downloads # 下载存储路径</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">enable-rpc = true # 开启 RPC，以下几个选项均和远程控制有关</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpc-allow-origin-all = true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpc-listen-all = true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">continue = true # 断点续传</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">input-file = /path/to/aria2.session # 会话文件路径，下同</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">save-session = /path/to/aria2.session</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">max-concurrent-downloads = 5 # 最大同时下载数</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>加载配置文件，并以 daemon 模式启动 aria2：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> aria2c --conf-path</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/path/to/aria2.conf </span><span class="token parameter variable" style="color:#36acaa">-D</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>或使用 pm2：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pm2 start aria2c -- --conf-path</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/path/to/aria2.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="远程控制">远程控制<a href="#远程控制" class="hash-link" aria-label="远程控制的直接链接" title="远程控制的直接链接">​</a></h3><p>远程控制就是在本地开一个服务器，提供一个访问 aria2 的 Web UI，然后通过路由器的 port forwarding 暴露到公网上，即可以远程访问 Web UI 管理下载任务了。首先开一个自己习惯的服务器，我使用的是 nginx，安装好后编辑配置文件自己指定 nginx 的根目录，启动 nginx：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> nginx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">vim</span><span class="token plain"> /etc/nginx/sites-enabled/default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">service</span><span class="token plain"> nginx start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接下来选择一个适用于 aria2 的 Web UI，我使用的是 <a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener noreferrer">webui-aria2</a>。进入自己设置的服务器根目录，<code>git clone https://github.com/ziahamza/webui-aria2.git</code>，改个名字 <code>mv webui-aria2 aria2</code>，即可以通过 <code>树莓派的 IP/aria2</code> 访问 aria2 的 Web UI 了。最后在自己路由器上打开 port forwarding，注意给树莓派保留 IP 而不要任凭路由器 DHCP，分配一个端口给树莓派的 80 端口。然后根据 aria2 的教程设置密钥访问，即可以远程安全的管理自己的下载任务了。</p><p><img loading="lazy" src="/assets/images/4-75e83f5c4e12d2d36006ecb00be73281.png" width="1240" height="889" class="img_ev3q"></p><blockquote><p>美帝连国内凄惨的下载速度</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="文件服务器">文件服务器<a href="#文件服务器" class="hash-link" aria-label="文件服务器的直接链接" title="文件服务器的直接链接">​</a></h3><p>文件服务器通过 SMB 协议，安装 samba：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt-get install samba samba-common-bin</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改配置文件：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo vim /etc/samba/smb.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>添加自己下载目录的配置：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[hdd]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">path = /path/to/your/hdd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">valid users = pi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">browseable = Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">writeable = Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">writelist = pi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">create mask = 0777</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">directory mask = 0777</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后重启 samba 服务，并添加当前账户：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">service</span><span class="token plain"> smbd restart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> smbpasswd </span><span class="token parameter variable" style="color:#36acaa">-a</span><span class="token plain"> pi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样在局域网里就能够发现树莓派了。用 pi 的账号密码连接，就可以轻松挂载共享的文件夹。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="流媒体服务器">流媒体服务器<a href="#流媒体服务器" class="hash-link" aria-label="流媒体服务器的直接链接" title="流媒体服务器的直接链接">​</a></h3><p>流媒体服务器通过 DLNA 协议，首先安装 minidlna：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> minidlna</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>之后修改配置文件：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">vim</span><span class="token plain"> /etc/minidlna.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改内容，主要是流媒体服务器读取文件的路径。注意 minidlna 可以根据媒体类型分别设置路径：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># A 代表音频 P 代表图片 V 代表视频</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">media_dir = A,/path/to/audio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">media_dir = P,/path/to/picture</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">media_dir = V,/path/to/video</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>启动 minidlna 服务：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">service</span><span class="token plain"> minidlna start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后打开兼容 DLNA 协议的播放器（如 VLC），就可以直接播放硬盘里的流媒体了。另外，minidlna 还会开放 8200 端口显示媒体数量等一些信息。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="minecraft-服务器">Minecraft 服务器<a href="#minecraft-服务器" class="hash-link" aria-label="Minecraft 服务器的直接链接" title="Minecraft 服务器的直接链接">​</a></h2><p>搭建一个 Minecraft 服务器也是树莓派不错的归宿。之前我尝试过使用免费的 Google Cloud 实例，性能非常差一下子就会崩掉。而我家又由于 Xfinity 的网关原因，无法成功转到公网上。因此采用的办法是树莓派运行服务器，通过内网穿透反向代理到 Google Cloud 实例上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="运行">运行<a href="#运行" class="hash-link" aria-label="运行的直接链接" title="运行的直接链接">​</a></h3><p>安装 JRE：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> default-jre</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>选择合适的 Minecraft 服务器。我选择的是 <a href="https://github.com/PaperMC/Paper" target="_blank" rel="noopener noreferrer">PaperSpigot</a>，一个高性能的 Spigot fork。注意树莓派由于性能原因不建议使用太高版本，以 PaperSpigot-1.7.10-R0.1-SNAPSHOT-latest.jar 为例，执行：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">java</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-jar</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-Xmx840M</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-Xms840M</span><span class="token plain"> PaperSpigot-1.7.10-R0.1-SNAPSHOT-latest.jar nogui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Minecraft 服务器就在 25565 端口上启动了。插件只需要放入同目录的 <code>/plugins</code> 文件夹，重启服务器即可以自动启动。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="内网穿透">内网穿透<a href="#内网穿透" class="hash-link" aria-label="内网穿透的直接链接" title="内网穿透的直接链接">​</a></h3><p>内网穿透使用 <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener noreferrer">frp</a>，具体的使用文档可以看<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener noreferrer">这里</a>。下载时注意架构和操作系统，这里我的 Google Cloud 实例是 linux-amd64，树莓派是 linux-arm。</p><p>将 linux-amd64 的 frps 和 frps.ini 放到 GCP 实例上，编辑 frps.ini：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># frps.ini</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[common]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bind_port = 7000 # 服务器使用 7000 端口和树莓派通信</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>启动 frps：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./frps </span><span class="token parameter variable" style="color:#36acaa">-c</span><span class="token plain"> ./frps.ini</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将 linux-arm 的 frpc 和 frpc.ini 放到树莓派上，编辑 frpc.ini：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># frpc.ini</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[common]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server_addr = x.x.x.x # 公网 IP 地址</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server_port = 7000 # 服务器使用的端口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[minecraft]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = tcp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">local_ip = 127.0.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">local_port = 25565 # minecraft 服务器开启的端口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">remote_port = 6000 # 远程用来连接的端口</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>启动 frpc：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./frpc </span><span class="token parameter variable" style="color:#36acaa">-c</span><span class="token plain"> ./frpc.ini</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>最后在任意一台机器上连接 Minecraft 服务器，地址为 <code>服务器公网 IP:6000</code>。在我的两人生存服上树莓派的负载约为 10%，可以较为轻松的应对低版本 Minecraft 服务器的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="智能家居">智能家居<a href="#智能家居" class="hash-link" aria-label="智能家居的直接链接" title="智能家居的直接链接">​</a></h2><p>智能家居部分主要是运行了两个服务：</p><ul><li><a href="https://github.com/homebridge/homebridge" target="_blank" rel="noopener noreferrer">HomeBridge</a>：将 IoT 设备桥接至 HomeKit</li><li><a href="https://github.com/philippe44/AirConnect" target="_blank" rel="noopener noreferrer">AirConnect</a>：将 Chromecast 设备桥接至 AirPlay</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装-nodejs-及-pm2">安装 Node.js 及 pm2<a href="#安装-nodejs-及-pm2" class="hash-link" aria-label="安装 Node.js 及 pm2的直接链接" title="安装 Node.js 及 pm2的直接链接">​</a></h3><p>我们使用 pm2 作为进程管理工具。首先安装 Node.js LTS，跟着<a href="https://github.com/nodesource/distributions/blob/master/README.md" target="_blank" rel="noopener noreferrer">文档</a>：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">curl</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-fsSL</span><span class="token plain"> https://rpm.nodesource.com/setup_lts.x </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"> -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-y</span><span class="token plain"> nodejs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后安装 pm2：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-g</span><span class="token plain"> pm2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="homebridge">HomeBridge<a href="#homebridge" class="hash-link" aria-label="HomeBridge的直接链接" title="HomeBridge的直接链接">​</a></h3><p>安装 HomeBridge 及 <code>homebridge-config-ui-x</code>：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-g</span><span class="token plain"> --unsafe-perm homebridge homebridge-config-ui-x</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后根据 <a href="https://github.com/homebridge/homebridge/blob/master/config-sample.json" target="_blank" rel="noopener noreferrer">config-sample.json</a> 编写自己的配置文件，放到 <code>~/.homebridge/config.json</code>，之后运行 <code>homebridge</code> 命令启动，并使用 iOS 上的 Home 应用进行初始化。完成后即可通过 <code>pm2 start homebridge</code> 来使用 pm2 管理进程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="airconnect">AirConnect<a href="#airconnect" class="hash-link" aria-label="AirConnect的直接链接" title="AirConnect的直接链接">​</a></h3><p>对于 AirConnect 我们只需要它的一个组件 <code>aircast</code>。作者提供了<a href="https://github.com/philippe44/AirConnect/blob/master/bin/aircast-arm" target="_blank" rel="noopener noreferrer">编译好的 ARM 架构二进制</a>，直接下载后 scp 到树莓派上，修改权限后使用 <code>pm2 start aircast-arm</code> 即可。</p><p>pm2 管理的进程初始化好之后，需要用 <code>pm2 save</code> 保存下配置，之后再次启动可以使用 <code>pm2 resurrect</code> 快速恢复。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>树莓派还是挺实用的，一个极低功耗的完整 Linux 设备，外加 MicroSD 卡可以扩展较大的存储（我使用的 256GB），可以在家里便捷地实现文件共享、简单的自动化等操作。期待以后能有性能更强的 Pi 可以更为流畅地负担日常任务。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Surface Pro 体验]]></title>
        <id>https://xnth97.github.io/2017/07/10/surface-pro</id>
        <link href="https://xnth97.github.io/2017/07/10/surface-pro"/>
        <updated>2017-07-10T22:37:41.000Z</updated>
        <summary type="html"><![CDATA[之前由于 iPad Air 2 的尺寸和生产力不能适应我笔记、阅读、撸码和 Steam 的需要，搞了一台 Surface Pro Core m3 版本作为廉价 iPad Super-Pro 使用。阔别很久，再度长期使用 Windows 系统，感觉整体生态已和往日不可同日而语，故分享一下自己在 Windows 环境下的一些使用和配置。]]></summary>
        <content type="html"><![CDATA[<p>之前由于 iPad Air 2 的尺寸和生产力不能适应我笔记、阅读、撸码和 Steam 的需要，搞了一台 Surface Pro Core m3 版本作为廉价 iPad Super-Pro 使用。阔别很久，再度长期使用 Windows 系统，感觉整体生态已和往日不可同日而语，故分享一下自己在 Windows 环境下的一些使用和配置。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="开发环境">开发环境<a href="#开发环境" class="hash-link" aria-label="开发环境的直接链接" title="开发环境的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="终端">终端<a href="#终端" class="hash-link" aria-label="终端的直接链接" title="终端的直接链接">​</a></h3><p>终端环境基本是我最早没有 Mac 时使用 Ubuntu 的主要原因。cmd.exe 实在是太难用了，后续的 PowerShell 个人感觉也没有好到哪里去。内在是改不了了，壳还是可以换下的。<a href="http://cmder.net" target="_blank" rel="noopener noreferrer">cmder</a> 就是 Windows 下一款非常不错的终端模拟器，提供了非常多的自定义选项，也有非常不错的字体和主题支持。最关键的一点是它的 full 版本在 Windows 下实现了 <!-- -->*<!-- -->nix 的常用命令！终于可以在 Windows 下随意的 <code>ls</code>、<code>cat</code>、<code>grep</code> 了，甚至还支持管道的写法，基本上和日常使用 <!-- -->*<!-- -->nix 系统的命令无异。单凭这一点就大大拉近了我和 Windows 的距离。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="包管理器">包管理器<a href="#包管理器" class="hash-link" aria-label="包管理器的直接链接" title="包管理器的直接链接">​</a></h3><p>Windows 上对于命令行工具的安装/升级/管理一直都是个头疼的问题，像 Ubuntu 有 apt-get、macOS 有 Homebrew 一样，Windows 也需要一个成熟完善的包管理器。我目前在使用 <a href="https://chocolatey.org" target="_blank" rel="noopener noreferrer">Chocolatey</a>，能够很方便的帮你处理安装包、设置环境变量、更新升级等脏活累活，基本使用方法也和 apt-get、Homebrew 大同小异。我现在很多工具都使用 Chocolatey 安装，比如 Python，node.js，jre，nginx，以及 Windows 下很重要的 Mingw。包管理器确实节省了很多配置环境、寻找更新升级包的痛苦。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ide编辑器">IDE/编辑器<a href="#ide编辑器" class="hash-link" aria-label="IDE/编辑器的直接链接" title="IDE/编辑器的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="visual-studio-code">Visual Studio Code<a href="#visual-studio-code" class="hash-link" aria-label="Visual Studio Code的直接链接" title="Visual Studio Code的直接链接">​</a></h3><p>赞美 Electron，借助它跨平台的特性很多我常用的应用都可以有与 macOS 平台一致的无缝体验，比如 GitHub Desktop，Visual Studio Code，Atom，Slack 等。VS Code 确实是一个非常优秀的文本编辑器，以前我主力使用 Atom，仅使用 VS Code 打开大文件用。使用 Surface Pro 后发现 Core m3 真的带不动 Atom，而在 VS Code 下基本能够有流畅的体验。而且现在 VS Code 的插件生态日趋成熟，对中国下载友好的支持、强大的调试器、优秀的 IntelliSense 和性能表现，让我现在选择 VS Code 作为唯一的编辑器。我现在主要使用的插件有：</p><ul><li>Beautify：美化代码格式</li><li>C/C++：微软爸爸出品，第一方插件，完善 C/C++ 支持</li><li>Code Runner：即时在编辑器里运行代码，对 Python，JavaScript 之类的很方便</li><li>Git History：查看某个文件的 git 历史，并可以分栏比较</li><li>LaTeX Workshop：完善的 LaTeX 工具链</li><li>PlantUML：用 PlantUML 画 UML 图并导出矢量/位图的插件，上学期 OOAD 神器</li><li>Python：Python 自动补全、调试器等支持</li></ul><p>VS Code 还提供了比较丰富的自定义选项，比如我可以自由配置 Code Runner 执行的命令，甚至可以实现对 <code>.swift</code> 按下 ctrl + R 调用 WSL 里的 <code>swiftc</code> 编译并执行 Swift 代码，我也可以把 VS Code 编辑器的字体全部替换为思源黑体保护眼睛，雅黑看着实在是太难受了…</p><p>然而 VS Code 作为微软亲儿子，在我的 Surface 上对触屏的支持并不好，且滚动（无论触屏还是触摸板）会出现严重的掉帧。而且在更新时 Windows 版本的 VS Code 需要重新运行一遍 installer，而 macOS 版本则直接重启后无缝更新，真不知到底哪边才是亲生的，期待后续版本改进。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="jetbrains">JetBrains<a href="#jetbrains" class="hash-link" aria-label="JetBrains的直接链接" title="JetBrains的直接链接">​</a></h3><p>JetBrains 全家桶大部分都有不错的跨平台表现。使用 IntelliJ IDEA 写 Java、PyCharm 写 Python，几乎是我开始学习这两门语言时就采用的工具，一直沿用到现在。在我四核 i7 的 MacBook Pro 上，JetBrains 全家桶运行良好，高频率的索引和 IntelliSense 计算使得 JetBrains 的功耗和内存占用都很大。在双核无风扇且 RAM 捉襟见肘的 Core m3 Surface Pro 上，IntelliJ IDEA 和 PyCharm 在索引时不可避免的会慢很多，但在实时编写时自动补全的速度还是不错。当然大规模项目肯定是告别了，但还是足够日常刷题写作业用的。不过随着我对 VS Code 越来越上手，很多 PyCharm 做的工作都交给 VS Code 分担，这样可以保证写码时留点内存。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="visual-studio">Visual Studio<a href="#visual-studio" class="hash-link" aria-label="Visual Studio的直接链接" title="Visual Studio的直接链接">​</a></h3><p>宇宙第一 IDE，感慨一下最早接触编程还是初中必须学的 VB，最早接触 App 开发竟然还是 C# + XAML 写 Windows 8 的 Metro 应用。上次用 Visual Studio 应该是大一什么都不懂学 C++ 时，然而现在又用 Visual Studio 写 C/C++ 了。毕竟田牌自家，VS 2017 在项目规模不大的情况下在孱弱的 Surface 上跑的还是很流畅的，启动速度也明显快过 JetBrains 全家桶。UI 感觉是 Windows 下全场最佳了，IntelliSense 也毕竟是老牌强项，代码提示、补全、重构、改正等都非常优秀，爆出写 Swift 会卡到高亮都没有的 Xcode 几条街。由于我自己使用不深入，只能评价 VS 2017 很适合 C/C++ 的开发。但是由于使用习惯和整体环境的差异，我应该还是倾向于 Xcode 的。VS 2017 新增了对 Python 的支持，简单用了一下代码补全和 PyCharm 还是差距很大。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="wsl">WSL<a href="#wsl" class="hash-link" aria-label="WSL的直接链接" title="WSL的直接链接">​</a></h3><p>WSL 全称 <strong>W</strong>indows <strong>S</strong>ubsystem for <strong>L</strong>inux，又称作 lxss，即 <strong>L</strong>inu<strong>x</strong> <strong>S</strong>ub<strong>s</strong>ystem。简单来讲，由于 NT 架构可以方便的扩展 Windows 的子系统层，WSL 相当于在 Windows 里跑了一个 Ubuntu，兼容 POSIX 的 API，同时又能获得较小的性能损耗。WSL 在开启后通过 <code>bash</code> 命令进入，前述的 cmder 对 WSL 有相当好的支持，可以在设置里新建一个 task 为 <code>bash.exe -cur_console:p</code>，即可从 cmder 直接进入 WSL 同时获得正确的光标操作。我在 WSL 里安装了 oh-my-zsh，然后在 <code>~/.bashrc</code> 里加上了默认执行 <code>zsh</code> 的代码：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token builtin class-name">test</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-t</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">exec</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">zsh</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>就可以把 WSL 当作一个普通的 Ubuntu 使用了。WSL + cmder 带来的一个好处是 Ubuntu 下的 ssh 能够保证连到 Ubuntu 系统的 VPS 时格式不出错，如果直接用 Windows 下的 cmd.exe 和 ssh，在 VPS 上运行了别的 text window manager（比如我用了 byobu）时终端直接就乱掉了。</p><p>WSL 最黑科技的是可以安装好 Ubuntu 桌面相关软件包后，让 Ubuntu 的桌面运行在 Windows 的 X11 中。效果如下所示：</p><p><img loading="lazy" src="/assets/images/wsl-f5ce223862b11b2e32905024885e3f75.png" width="1230" height="820" class="img_ev3q"></p><p>WSL 提供了和 Win32 相互调用的接口，然而目前各开发工具的支持还不完善。不过可以预见的是，完全可以在 Windows 桌面环境下写代码，然后在 WSL 的 Linux 环境里编译、运行和调试，到时候可能很多开发者的工作流会更加的无缝和顺畅。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="生产力">生产力<a href="#生产力" class="hash-link" aria-label="生产力的直接链接" title="生产力的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="阅读">阅读<a href="#阅读" class="hash-link" aria-label="阅读的直接链接" title="阅读的直接链接">​</a></h3><p>阅读属于我搞 Surface 的核心需求，12.3 寸 2736x1824 的屏幕捧起来看书确实比我 iPad Air 2 的体验好出不少，3：2 的比例乍看奇怪，竖直捧起来时又非常合适。准确的色彩还原、舒适的大小、清晰的分辨率配合随时批注的 Surface Pen，阅读体验还是比较出色的。最近经常高铁出行，关闭 WiFi 打开节电模式看书，基本上一小时耗电 10%，足够长途旅行使用。唯一不足是 Windows 10 的触控体验还是远不如 iOS 顺滑，更不用说 ProMotion 加持的新 iPad Pro 了。</p><p>单纯进行阅读和笔记时我使用预装的 Drawboard PDF，笔迹舒适，功能丰富，性能尚可，非常适合一手端着 Surface 一手提着笔边读书边写写画画。然而 Drawboard PDF 启动速度很慢，检索速度也很差，而且经常打开3、4个较大 PDF 就提示已无法再打开（可能与我 Surface 捉急的 RAM 有关系）。因此如果在传统桌面下，我还是使用 SumatraPDF，免费轻便而性能优异。不足之处当然就是由于不是 UWP 对触控的优化极差，手感非常不舒服，只能使用鼠标操作了。</p><p><img loading="lazy" src="/assets/images/book-2655c643929d317c1066c15c80c7a998.png" width="912" height="1328" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="笔记">笔记<a href="#笔记" class="hash-link" aria-label="笔记的直接链接" title="笔记的直接链接">​</a></h3><p>拿到 Surface 后，我这个多年 OneNote 用户总算是头顶青天了。OneNote 的 UWP 做的非常优秀，UI 简约而功能丰富，手指触控和电磁笔书写都<del>丝般顺滑</del>（体验过新的 iPad Pro 120Hz ProMotion 以后再也不敢用这个词了），远超 Drawboard PDF 的书写体验。毕竟是软爹第一方出品，笔记的记录和管理流程都比较优秀。导出功能有些问题，不过还好提供了全功能的 OneNote 2016，流畅度略逊于 UWP，不过功能全面增强，传统的“打印”对话框也让导出功能强大了很多。</p><p><img loading="lazy" src="/assets/images/onenote-f0b9dd08766863585a918806e1cf7c79.png" width="1230" height="820" class="img_ev3q"></p><p>另一个我在尝试的工具是 MyScript 的 Nebo，这个在 iPad Pro 上也是非常出名的 App。MyScript 最早做了手写计算器，优秀的笔记识别让我印象深刻，这次趁 Windows Store 打折 20 块就收了下来。整体还在体验中，书写迟滞感较为明显，然而转 Word 识别准确率非常高，尤其是手画图表转成排好版的电子格式的功能让我非常印象深刻。手写转数学公式也很有用，不过对于我个人还是偏向于 LaTeX。整体笔记本管理也比较方便，直接手写笔迹导出 HTML 也远胜于 OneNote 的打印，然而由于同步不方便，应该主要还是辅助 OneNote 使用。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="图像处理">图像处理<a href="#图像处理" class="hash-link" aria-label="图像处理的直接链接" title="图像处理的直接链接">​</a></h2><p>以前出门旅行会带着 Sony NEX 相机和 iPad，玩耍一天后通过 PlayMemories App 将相机里的照片利用 WiFi 发送到 iPad 上进行观看/筛选/编辑/发社交网络的流程。换用 Surface 后，观看和筛选的过程大为便捷：仅需要带着一根 USB 线，相机连接 Surface 即可以直接观看筛选照片，略去了 iPad 等待照片无线传输的漫长过程。同时对照片文件有更自由的操作，比如如果存储卡不够了可以直接拷贝出来存储到 Surface 里，而 iPad 如果作为存储扩展还需要考虑之后如何导出的麻烦问题。我打算采取的更佳方案是用 MicroSD + SD 卡套的方式替代相机 SD 卡，这样拍摄完成后直接把 MicroSD 插入 Surface 即可浏览，省去携带一根线的麻烦<del>似乎并不麻烦</del>。</p><p>在 Surface 的高分辨率色彩准确的 PixelSense 屏幕上观看照片确实很享受，后续过程却没有那么舒心。在 iPad 上我可以方便的使用 Enlight，Snapseed，泼辣修图进行图像处理，这些 App 提供了适合触屏的操作同时又具有较为专业的功能，而想在 Windows 平台上找到对等的 UWP 可就比较难了。泼辣修图算非常良心的一个，我在 Mac 上趁降价购买了 Mac App Store 版泼辣修图，只需要注册账号并登录，在全平台的泼辣修图都可以解锁所有功能，在 UWP 上配合 Surface Pen 整体体验很不错。其他的就比较鸡肋了，属于残废等级。当然也可以搬出大杀器 Photoshop，不过电量可是会尿崩的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="娱乐">娱乐<a href="#娱乐" class="hash-link" aria-label="娱乐的直接链接" title="娱乐的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="音视频">音视频<a href="#音视频" class="hash-link" aria-label="音视频的直接链接" title="音视频的直接链接">​</a></h3><p>音乐主要使用 Apple Music 和网易云音乐，网易云音乐的 UWP 一直是业界标杆，据说今年毒瘤 iTunes 也要转制 UWP 上架了。不过我在 macOS 下 iTunes 就卡的不得了，到了孱弱的 Surface 这里简直是卡的一逼了。好像 Spotify 的 UWP 也近日上架了，不过一直没有使用。视频国内厂商 UWP 基本都能用吧，没什么推荐，可惜没有 YouTube。Netflix 倒是有，等回到墙外再体验一下。本地视频在 Windows 下真是随便选了，我个人一直用 VLC。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="玩耍">玩耍<a href="#玩耍" class="hash-link" aria-label="玩耍的直接链接" title="玩耍的直接链接">​</a></h3><p>玩耍方面虽然乍一看 Windows Store 的清冷实在无法和 App Store 相比，不过咱可是正经的 Windows 10 Pro 啊。Steam 开起来，PPSSPP 开起来，Dolphin 开起来，Xbox 手柄插起来…Steam 上大量的独立游戏、像素风游戏又不需要 GTX 1080，跑的很是欢脱。模拟器游戏由于年代久远，对显卡压力也不大。当然这块 HD 515 GPU 也是有点出乎我意料了，4x 分辨率下模拟铁拳 6，全程 60 fps 非常稳定，瞬间就告别学习了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>多年后重用 Windows，不得不承认其生态越发完善，去除 iOS/macOS 开发和写 Swift 的部分，我使用 Windows 进行开发工作基本是没什么问题的。当然由于业界广泛使用 macOS/Linux，Windows 的兼容性还是有些欠缺，比如读取文件需要 <code>open('file', 'rb')</code> 以保证不受换行影响，比如 wget 下来的脚本经常不能使用需要使用 Chrome 访问 URL 再另存为…</p><p>从 macOS 使用习惯转移到 Windows，最难以适应的其实是快捷键 cmd 和 control 的差异。后来发现可以通过注册表设置 scancode map，交换左 Alt 和 Ctrl 的键位，实现 macOS cmd 键的效果。在编辑器里新建文本文件：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Windows Registry Editor Version 5.00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,38,00,1D,00,1D,00,38,00,00,00,00,00</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改扩展名为 reg，在 Windows 中打开导入注册表，重启后生效。</p><p>使用田牌给我最大的惊喜是硬件。Surface Pen 是 Surface 的精华，其设计充满微软风格的实用主义。不需要为光洁的外表牺牲功能，磁力吸附、笔夹、橡皮擦、拖拽键、Windows Ink 呼出…配合脚本，你甚至可以用它当成 PPT 翻页笔使用。电池我使用了一个多月仍然是 100%，更换电池的一旋一拔也是非常优雅的设计。Type cover 触控板颠覆了我对 Windows 产品触控板的认知，大面积玻璃恍然间有小尺寸 Mac 的感觉，舒适的按键和键盘背光更是吊打 iPad Pro 的所谓键盘，能够保证在使用 Surface 外出时真的可以进行写作/coding 等工作。Windows Hello 识别迅速而准确，看一眼即可解锁/付款认证，高科技的未来感甩出 Touch ID 等传统指纹识别几条街。无风扇的 Core m3 处理器在保证续航和发热的同时达到了很不错的性能，对于轻度使用、尤其是 VS Code 编辑代码这种轻度专业使用的场景非常合适。屏幕尺寸和比例都很舒适，分辨率极高，色彩准确讨喜（但比 MacBook Pro 偏冷），PixelSense 加成使得在 Surface Pro 上进行内容消费很是合适。</p><p>田牌平板成在微软赖以成家的 Windows。创新的硬件和自家 OS 的软硬结合带来一种异乎 iOS 而更为丰富的体验，高度的可扩展性也让 Surface Pro 真正成了一个可以关键时刻救急的工作设备而非 iPad Pro 那样明显在现有生态下轻办公重娱乐的优雅玩具。田牌的败笔却也在 Windows。Windows 10 和 Surface 固件小问题比较令人头痛，如触屏失灵、Windows Hello 不识别、电池电量不更新等。虽然频率非常低，但一旦出现问题需要重启还是异常烦人的。Surface 的电量由于 Windows 系统的一些问题也非常不稳，不知道后台跑着什么可能迅速就尿崩。</p><p>不过总体来说，Surface Pro 算是给我带来了一些新奇且实用的体验，我也很期待后续更新的 Windows 能够带来更多的惊喜。</p>]]></content>
        <category label="daily" term="daily"/>
        <category label="gears" term="gears"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cocoa 并发编程笔记]]></title>
        <id>https://xnth97.github.io/2017/03/18/cocoa-concurrency</id>
        <link href="https://xnth97.github.io/2017/03/18/cocoa-concurrency"/>
        <updated>2017-03-18T22:18:09.000Z</updated>
        <summary type="html"><![CDATA[并发所描述的概念就是同时运行多个任务。这些任务可能是以在单核 CPU 上以分时的形式同时运行，也可能是在多核 CPU 上以真正的并行方式来运行。在 iOS/macOS 中，主要提供了 pthread, NSThread, NSOperationQueue, Grand Central Dispatch 和 NSRunloop 等方法实现并发编程。]]></summary>
        <content type="html"><![CDATA[<p>并发所描述的概念就是同时运行多个任务。这些任务可能是以在单核 CPU 上以分时的形式同时运行，也可能是在多核 CPU 上以真正的并行方式来运行。在 iOS/macOS 中，主要提供了 <code>pthread</code>, <code>NSThread</code>, <code>NSOperationQueue</code>, Grand Central Dispatch 和 <code>NSRunloop</code> 等方法实现并发编程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="thread">Thread<a href="#thread" class="hash-link" aria-label="Thread的直接链接" title="Thread的直接链接">​</a></h2><p>线程（thread）是组成进程的子单元，操作系统的调度器可以对线程进行单独的调度。实际上，所有的并发编程 API 都是构建于线程之上的，包括 GCD 和操作队列。多线程可以在单核 CPU 上同时（或者至少看作同时）运行。操作系统将小的时间片分配给每一个线程，这样就能够让用户感觉到有多个任务在同时进行。如果 CPU 是多核的，那么线程就可以真正的以并发方式被执行，从而减少了完成某项操作所需要的总时间。</p><p><code>pthread</code> 是 POSIX 的线程标准，但写起代码比较复杂。<code>NSThread</code> 是 Objective-C 对 pthread 的封装（对应的 <code>Thread</code> 为 Swift 对 <code>pthread</code> 的封装），更便于在 Cocoa 环境下开发。常用的使用方法是创建一个线程对象，并调用它的 <code>start</code> 方法。可以通过检测线程的 <code>isFinished</code> 属性判断线程是否结束。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> helloThread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Thread</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">block</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Hello World"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">helloThread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>也可以通过创建一个 <code>Thread</code> 的子类，将需要后台执行的代码写在重写的 <code>main</code> 方法里。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">TestThread</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Thread</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">override</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Code goes here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>直接使用线程可能会引发的一个问题是，如果你的代码和所基于的框架代码都创建自己的线程时，那么活动的线程数量有可能以指数级增长。例如，在 8 核 CPU 中，你创建了 8 个线程来完全发挥 CPU 性能。然而在这些线程中你的代码所调用的框架代码也做了同样事情（因为它并不知道你已经创建的这些线程），这样会很快产生成成百上千的线程。代码的每个部分自身都没有问题，然而最后却还是导致了问题。使用线程并不是没有代价的，每个线程都会消耗一些内存和内核资源。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="grand-central-dispatch">Grand Central Dispatch<a href="#grand-central-dispatch" class="hash-link" aria-label="Grand Central Dispatch的直接链接" title="Grand Central Dispatch的直接链接">​</a></h2><p>GCD 是自 macOS 10.6 和 iOS 4 被引入的一个更方便充分使用多核 CPU 性能的技术，现在也作为 <code>libdispatch</code> 被加入 FreeBSD 等操作系统中。通过 GCD，开发者不用再直接跟线程打交道了，只需要向队列中添加代码块即可，GCD 在后端管理着一个线程池。GCD 不仅决定着你的代码块将在哪个线程被执行，它还根据可用的系统资源对这些线程进行管理。这样可以将开发者从线程管理的工作中解放出来，通过集中的管理线程，来缓解大量线程被创建的问题。GCD 带来的另一个重要改变是作为开发者可以将工作考虑为一个队列，而不是一堆线程，这种并行的抽象模型更容易掌握和使用。</p><p>GCD 的队列实际上就是一系列代码块，这些代码可以在主线程或后台线程中以同步或者异步的方式执行。一旦队列创建完成，操作系统就接管了这个队列，并将其分配到任意一个核心中进行处理。不管有多少个队列，它们都能被系统正确地管理，这些都不需要开发者进行手动管理。队列遵循 FIFO 模式（先进先出），这意味着先进队列的任务会先被执行。</p><p>Objective-C 和早期 Swift 中的 GCD 仍保留 C 风格 API，在 Swift 3 中 GCD 被进行了较大的改变，更加面向对象。</p><p>创建队列，只需要简单的构造一个 <code>DispatchQueue</code> 对象：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> queue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">DispatchQueue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">label</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"queueIdentifier"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 异步执行代码</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里的 <code>async</code> 为异步执行，即任务将（几乎）同时执行。<code>sync</code> 方法则会在串行队列里将任务一个个依次执行。</p><p><code>DispatchQueue</code> 的构造函数里包含了一个 <code>qos</code> 参数，即队列优先级（Quality of Service），是一个名为 <code>QoSClass</code> 的枚举类型：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">QoSClass</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> background</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> utility</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> `</span><span class="token keyword" style="color:#00009f">default</span><span class="token plain">`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> userInitiated</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> userInteractive</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> unspecified</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用不同优先级的若干个队列乍听起来非常直接，不过强烈建议在绝大多数情况下使用默认的优先级队列。如果执行的任务需要访问一些共享的资源，那么在不同优先级的队列中调度这些任务很快就会造成不可预期的行为。这样可能会引起程序的完全挂起，因为低优先级的任务阻塞了高优先级任务，使它不能被执行。</p><p>GCD 也不是总需要创建队列，尤其是并不建议改变优先级的时候。常用的方法有 <code>DispatchQueue.global()</code>，即操作系统创建的全局队列，一个后台队列的集合。从别的队列访问主队列也很简单，只需要 <code>DispatchQueue.main</code>。主队列经常用于更新 UI 等操作。一个简单的使用全局队列进行计算并从主队列更新 UI 的栗子如下。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Global queue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">DispatchQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">global</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Time-comsuming operations</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">..&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        total </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Back to main queue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">DispatchQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Update UI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">total</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>GCD 还有一个很重要的概念叫 <code>DispatchGroup</code>。可以把几个相关的任务队列放到一个组中，常用的 <code>DispatchGroup</code> 实例方法有 <code>wait</code> 和 <code>notify</code>。当一个组中所有队列任务执行完毕后会触发队列的 <code>notify</code> 方法。例如一个程序具有两个异步队列分别从服务器下载文本和图片，文本和图片都下载完成后从主队列更新 UI。栗子如下。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 创建队列</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> textQueue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">DispatchQueue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">label</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"textQueue"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> imageQueue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">DispatchQueue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">label</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"imageQueue"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 创建组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> group </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">DispatchGroup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 文本队列异步下载</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">textQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">async</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">group</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> group</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">downloadText</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 图片队列异步下载</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">imageQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">async</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">group</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> group</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">downloadImage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 下载完成后触发 DispatchGroup 的 notify，从主队列更新 UI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">group</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">notify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">queue</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">DispatchQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> execute</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">updateUI</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>需要注意的是这里 <code>notify</code> 方法的 <code>queue</code> 参数是组里队列执行完毕后<strong>代码块要被提交到的队列</strong>而不是组所监听的队列（这个关系由 <code>async</code> 方法的 <code>group</code> 参数确定），因此更新 UI 的主队列作为 <code>notify</code> 方法的 <code>queue</code> 参数传入。</p><p>第二个常用的方法 <code>wait</code> 即组可以选择等待的时间，如果在时间内所有队列执行完毕则执行某段代码块，否则超时错误执行另一段代码块。基本用法如下：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 等待两秒钟</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> group</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timeout</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2.0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> result </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 成功执行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Success"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 超时</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">timedOut</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"GG"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>wait</code> 方法会返回一个 <code>DispatchTimeoutResult</code> 枚举，它的构成只有 <code>success</code> 和 <code>timedOut</code> 两种，因此常用 switch-case 语句作进一步的判断。</p><p><code>DispatchGroup</code> 也可以手动进行计数管理，即 <code>group.enter()</code> 和 <code>group.leave()</code>，在这种情况下 <code>enter</code> 和 <code>leave</code> 必须配对。例如：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> group </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">DispatchGroup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// task 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">group</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">enter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Task1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">someTask</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> finished </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    group</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">leave</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// task 2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">group</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">enter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Task2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">anotherTask</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> finished </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    group</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">leave</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 所有任务完成后</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">group</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">notify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">queue</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">global</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> execute</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">completion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>GCD 还有一种常见的用法是做延时操作，比较简单：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">DispatchQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">asyncAfter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">deadline</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3.0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> execute</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 延迟三秒执行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里时间的用法和上述 <code>wait</code> 方法类似，都是一个 <code>DispatchTime</code> 对象。比较有趣的是这里可以使用 <code>+</code> 号并不是数学运算，而是实现了一个函数 <code>public func +(time: DispatchTime, seconds: Double) -&gt; DispatchTime</code>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="operation-queue">Operation Queue<a href="#operation-queue" class="hash-link" aria-label="Operation Queue的直接链接" title="Operation Queue的直接链接">​</a></h2><p>操作队列是由 GCD 提供的一个队列模型的 Cocoa 抽象。GCD 提供了更加底层的控制，而操作队列则在 GCD 之上实现了一些方便的功能。<code>OperationQueue</code> 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 <code>Operation</code> 的子类来表述。你可以通过重写 <code>main</code> 或者 <code>start</code> 方法来定义自己的 <code>Operation</code>。重写 <code>main</code> 并不需要管理一些状态属性（例如 <code>isExecuting</code> 和 <code>isFinished</code>），当 <code>main</code> 方法返回的时候这个 <code>Operation</code> 就结束了。这种方式使用起来非常简单，但是灵活性相对重写 <code>start</code> 来说要少一些。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">TestOperation</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Operation</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">override</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Do something</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>类似的，也可以构造 <code>OperationQueue</code>，并将 <code>Operation</code> 添加到队列中。栗子如下：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 构造操作队列</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> operationQueue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">OperationQueue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 构造 Operation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> testOperation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">TestOperation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 添加 Operation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">operationQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addOperation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">testOperation</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 添加代码块</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">operationQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addOperation </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Do something</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>主队列可以通过 <code>OperationQueue.main</code> 访问到。除了提供基本的调度操作或 block 外，操作队列还提供了在 GCD 中不太容易处理好的特性的功能。例如，可以通过 <code>maxConcurrentOperationCount</code> 属性来控制一个特定队列中可以有多少个操作参与并发执行，将其设置为 1 的话将得到一个串行队列。</p><p>另外还有一个方便的功能就是根据队列中 <code>Operation</code> 的优先级对其进行排序，这不同于 GCD 的队列优先级，它只影响当前队列中所有被调度的 <code>Operation</code> 的执行先后。如果需要进一步在除了 5 个标准的优先级以外对 <code>Operation</code> 的执行顺序进行控制的话，还可以通过 <code>addDependency</code> 方法在 <code>Operation</code> 之间指定依赖关系。对于需要明确的执行顺序时，操作依赖是非常强大的一个机制。它可以让你创建一些操作组，并确保这些操作组在依赖它们的操作被执行之前执行，或者在并发队列中以串行的方式执行操作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="runloop">RunLoop<a href="#runloop" class="hash-link" aria-label="RunLoop的直接链接" title="RunLoop的直接链接">​</a></h2><p><code>RunLoop</code> 就是一组小的循环，在里面不断处理新的事件，比如 <code>RunLoop.main</code> 与主线程相关负责处理 UI 事件、计时器以及其它内核相关事件。每个 <code>RunLoop</code> 都和一个线程相关（一一对应）。</p><p><code>RunLoop</code> 可以运行在不同的模式中，每种模式都定义了一组事件，供 <code>RunLoop</code> 做出响应，比如 <code>RunLoop.main</code> 暂时性的将某个任务优先执行。一个典型的栗子是 iOS 的滚动，在进行滚动时为保证流畅 <code>RunLoop</code> 并不是运行在默认模式中，因此其他任务（计时器、UI 更新）并不会被 <code>RunLoop</code> 响应。如果需要，则要设置 <code>NSRunLoopCommonModes</code> 的模式并添加到 <code>RunLoop</code> 中。</p>]]></content>
        <category label="coding" term="coding"/>
        <category label="note" term="note"/>
        <category label="ios" term="ios"/>
    </entry>
</feed>